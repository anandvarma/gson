
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test001"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject14 = jsonObject0.getAsJsonObject("0");
    boolean b15 = jsonObject0.isJsonArray();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement16 = jsonObject0.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    jsonObject0.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement)jsonPrimitive19);
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setLenient();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder21.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.setLenient();
    int[] i_array32 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithModifiers(i_array32);
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder27.excludeFieldsWithModifiers(i_array32);
    boolean b35 = jsonObject0.equals((java.lang.Object)gsonBuilder27);
    boolean b37 = jsonObject0.has("\"4\"");
    jsonObject0.addProperty("null", (java.lang.Boolean)false);
    java.lang.String str41 = jsonObject0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "{\"hi!\":1,\"com.google.gson.stream.MalformedJsonException: \":\"4\",\"null\":false}"+ "'", str41.equals("{\"hi!\":1,\"com.google.gson.stream.MalformedJsonException: \":\"4\",\"null\":false}"));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test002"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement20 = jsonArray0.iterator();
    java.lang.String str21 = jsonArray0.getAsString();
    java.math.BigDecimal bigDecimal22 = jsonArray0.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test003"); }


    java.lang.Throwable throwable1 = null;
    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("", throwable1);
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException2);
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException2);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException5);
    java.lang.Throwable throwable8 = null;
    com.google.gson.JsonParseException jsonParseException9 = new com.google.gson.JsonParseException("", throwable8);
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException9);
    com.google.gson.JsonParseException jsonParseException11 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException9);
    com.google.gson.stream.MalformedJsonException malformedJsonException12 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException11);
    com.google.gson.stream.MalformedJsonException malformedJsonException13 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException12);
    java.lang.Throwable throwable16 = null;
    com.google.gson.JsonParseException jsonParseException17 = new com.google.gson.JsonParseException("", throwable16);
    com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("hi!", throwable16);
    malformedJsonException13.addSuppressed((java.lang.Throwable)malformedJsonException18);
    malformedJsonException5.addSuppressed((java.lang.Throwable)malformedJsonException18);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test004"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setDateFormat(100);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("{\"hi!\":1}");
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder8.setDateFormat("{}");
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder8.disableInnerClassSerialization();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test005"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    int i31 = jsonObject29.size();
    jsonObject29.addProperty("1", "{\"hi!\":1}");
    java.lang.Object obj35 = null;
    boolean b36 = jsonObject29.equals(obj35);
    com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder39 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.setLenient();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder39.excludeFieldsWithoutExposeAnnotation();
    boolean b43 = jsonArray38.equals((java.lang.Object)gsonBuilder39);
    com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b46 = jsonPrimitive45.isString();
    boolean b47 = jsonPrimitive45.isBoolean();
    java.lang.String str48 = jsonPrimitive45.getAsString();
    boolean b49 = jsonPrimitive45.isJsonObject();
    int i50 = jsonPrimitive45.getAsInt();
    boolean b51 = jsonPrimitive45.getAsBoolean();
    jsonArray38.add((com.google.gson.JsonElement)jsonPrimitive45);
    int i53 = jsonArray38.size();
    short s54 = jsonArray38.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    java.lang.Number number58 = jsonPrimitive56.getAsNumber();
    boolean b59 = jsonPrimitive56.isBoolean();
    boolean b60 = jsonArray38.remove((com.google.gson.JsonElement)jsonPrimitive56);
    jsonObject29.add("", (com.google.gson.JsonElement)jsonPrimitive56);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive65 = jsonPrimitive64.getAsJsonPrimitive();
    java.math.BigDecimal bigDecimal66 = jsonPrimitive65.getAsBigDecimal();
    byte byte67 = jsonPrimitive65.getAsByte();
    java.math.BigInteger bigInteger68 = jsonPrimitive65.getAsBigInteger();
    jsonObject29.addProperty("{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}", (java.lang.Number)bigInteger68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "1"+ "'", str48.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s54 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number58 + "' != '" + 1+ "'", number58.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte67 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger68);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test006"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d22 = jsonPrimitive21.getAsDouble();
    boolean b23 = jsonPrimitive21.isJsonObject();
    boolean b24 = jsonPrimitive21.isNumber();
    boolean b25 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive21);
    int i26 = jsonArray0.size();
    int i27 = jsonArray0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 3);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test007"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    com.google.gson.GsonBuilder gsonBuilder41 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder41.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder41.setLenient();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder43.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy45 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder43.setFieldNamingPolicy(fieldNamingPolicy45);
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder46.excludeFieldsWithoutExposeAnnotation();
    int[] i_array48 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder46.excludeFieldsWithModifiers(i_array48);
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder46.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setVersion((double)0.0f);
    com.google.gson.GsonBuilder gsonBuilder53 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder53.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder53.setLenient();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder53.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder57 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder57.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder57.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder59.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder61 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder61.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder61.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy64 = null;
    com.google.gson.GsonBuilder gsonBuilder65 = gsonBuilder63.addSerializationExclusionStrategy(exclusionStrategy64);
    com.google.gson.ExclusionStrategy exclusionStrategy66 = null;
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder63.addSerializationExclusionStrategy(exclusionStrategy66);
    com.google.gson.Gson gson68 = gsonBuilder63.create();
    com.google.gson.JsonPrimitive jsonPrimitive70 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b71 = jsonPrimitive70.isString();
    boolean b72 = jsonPrimitive70.isBoolean();
    java.lang.String str73 = jsonPrimitive70.getAsString();
    boolean b74 = jsonPrimitive70.isJsonObject();
    java.math.BigDecimal bigDecimal75 = jsonPrimitive70.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement76 = gson68.toJsonTree((java.lang.Object)jsonPrimitive70);
    com.google.gson.internal.Excluder excluder77 = gson68.excluder();
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder60.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder77);
    com.google.gson.GsonBuilder gsonBuilder79 = gsonBuilder53.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder77);
    com.google.gson.GsonBuilder gsonBuilder80 = gsonBuilder52.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder77);
    com.google.gson.GsonBuilder gsonBuilder81 = gsonBuilder80.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder82 = gsonBuilder81.setPrettyPrinting();
    java.lang.reflect.Type type83 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str84 = gson7.toJson((java.lang.Object)gsonBuilder81, type83);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "1"+ "'", str73.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder82);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test008"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonArray jsonArray17 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setLenient();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.excludeFieldsWithoutExposeAnnotation();
    boolean b22 = jsonArray17.equals((java.lang.Object)gsonBuilder18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    boolean b26 = jsonPrimitive24.isBoolean();
    java.lang.String str27 = jsonPrimitive24.getAsString();
    boolean b28 = jsonPrimitive24.isJsonObject();
    int i29 = jsonPrimitive24.getAsInt();
    boolean b30 = jsonPrimitive24.getAsBoolean();
    jsonArray17.add((com.google.gson.JsonElement)jsonPrimitive24);
    int i32 = jsonArray17.size();
    jsonArray0.addAll(jsonArray17);
    long long34 = jsonArray17.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1"+ "'", str27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 1L);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test009"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive2 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d3 = jsonPrimitive2.getAsDouble();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive2);
    java.lang.String str5 = jsonArray0.getAsString();
    char char6 = jsonArray0.getAsCharacter();
    jsonArray0.add((java.lang.Character)'a');
    com.google.gson.JsonElement jsonElement10 = jsonArray0.get((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "4"+ "'", str5.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test010"); }


    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException("{}");
    java.lang.Throwable[] throwable_array2 = jsonParseException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test011"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    int[] i_array12 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.excludeFieldsWithModifiers(i_array12);
    int[] i_array18 = new int[] { '1', ' ', (short)1, '4' };
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder13.excludeFieldsWithModifiers(i_array18);
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder6.excludeFieldsWithModifiers(i_array18);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setDateFormat((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test012"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.getAsInt();
    char char16 = jsonArray0.getAsCharacter();
    jsonArray0.add("com.google.gson.JsonParseException: [1,1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '1');

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test013"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    double d6 = jsonPrimitive1.getAsDouble();
    boolean b7 = jsonPrimitive1.isString();
    int i8 = jsonPrimitive1.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test014"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.setLenient();
    com.google.gson.Gson gson4 = gsonBuilder3.create();
    com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    boolean b10 = jsonArray5.equals((java.lang.Object)gsonBuilder6);
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b13 = jsonPrimitive12.isString();
    boolean b14 = jsonPrimitive12.isBoolean();
    java.lang.String str15 = jsonPrimitive12.getAsString();
    boolean b16 = jsonPrimitive12.isJsonObject();
    int i17 = jsonPrimitive12.getAsInt();
    boolean b18 = jsonPrimitive12.getAsBoolean();
    jsonArray5.add((com.google.gson.JsonElement)jsonPrimitive12);
    int i20 = jsonArray5.size();
    int i21 = jsonArray5.getAsInt();
    boolean b22 = jsonArray5.isJsonPrimitive();
    boolean b23 = jsonArray5.getAsBoolean();
    java.lang.Number number24 = jsonArray5.getAsNumber();
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls25 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException26 = gson4.fromJson((com.google.gson.JsonElement)jsonArray5, cls25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number24 + "' != '" + 1+ "'", number24.equals(1));

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test015"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat(10, 0);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("\"4\"");
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setDateFormat("com.google.gson.JsonParseException: hi!");
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder10.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setDateFormat((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test016"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d12 = jsonPrimitive11.getAsDouble();
    boolean b13 = jsonPrimitive11.isNumber();
    java.lang.String str14 = gson9.toJson((com.google.gson.JsonElement)jsonPrimitive11);
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isJsonObject();
    java.lang.Number number19 = jsonPrimitive16.getAsNumber();
    java.lang.reflect.Type type20 = null;
    com.google.gson.stream.JsonWriter jsonWriter21 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson9.toJson((java.lang.Object)jsonPrimitive16, type20, jsonWriter21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\"4\""+ "'", str14.equals("\"4\""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number19);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test017"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject14 = jsonObject0.getAsJsonObject("0");
    boolean b15 = jsonObject0.isJsonArray();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement16 = jsonObject0.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    jsonObject0.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement)jsonPrimitive19);
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setLenient();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder21.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.setLenient();
    int[] i_array32 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithModifiers(i_array32);
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder27.excludeFieldsWithModifiers(i_array32);
    boolean b35 = jsonObject0.equals((java.lang.Object)gsonBuilder27);
    boolean b37 = jsonObject0.has("\"4\"");
    jsonObject0.addProperty("null", (java.lang.Boolean)false);
    com.google.gson.JsonArray jsonArray42 = jsonObject0.getAsJsonArray("{}");
    jsonObject0.addProperty("4", (java.lang.Character)'h');
    // The following exception was thrown during execution in test generation
    try {
    double d46 = jsonObject0.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray42);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test018"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    int i24 = jsonObject0.size();
    int i25 = jsonObject0.size();
    int i26 = jsonObject0.size();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull27 = jsonObject0.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 2);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test019"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    boolean b12 = gson7.htmlSafe();
    boolean b13 = gson7.htmlSafe();
    com.google.gson.JsonObject jsonObject14 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray16 = jsonObject14.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray18 = jsonObject14.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    java.lang.Number number23 = jsonPrimitive21.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive24 = jsonPrimitive21.getAsJsonPrimitive();
    jsonObject14.add("hi!", (com.google.gson.JsonElement)jsonPrimitive24);
    boolean b26 = jsonObject14.isJsonArray();
    com.google.gson.JsonObject jsonObject27 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray29 = jsonObject27.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray31 = jsonObject27.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    java.lang.Number number36 = jsonPrimitive34.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive37 = jsonPrimitive34.getAsJsonPrimitive();
    jsonObject27.add("hi!", (com.google.gson.JsonElement)jsonPrimitive37);
    boolean b39 = jsonObject27.isJsonArray();
    com.google.gson.JsonElement jsonElement41 = jsonObject27.get("hi!");
    boolean b42 = jsonObject14.equals((java.lang.Object)jsonElement41);
    com.google.gson.JsonObject jsonObject43 = jsonObject14.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement44 = jsonObject43.entrySet();
    int i45 = jsonObject43.size();
    int i46 = jsonObject43.size();
    com.google.gson.JsonPrimitive jsonPrimitive49 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive50 = jsonPrimitive49.getAsJsonPrimitive();
    int i51 = jsonPrimitive50.getAsInt();
    jsonObject43.add("{\"hi!\":1}", (com.google.gson.JsonElement)jsonPrimitive50);
    com.google.gson.JsonElement jsonElement53 = gson7.toJsonTree((java.lang.Object)jsonObject43);
    java.lang.String str54 = gson7.toString();
    boolean b55 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive57 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b58 = jsonPrimitive57.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder59 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder59.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder59.setLenient();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder59.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder59.disableInnerClassSerialization();
    boolean b64 = jsonPrimitive57.equals((java.lang.Object)gsonBuilder63);
    com.google.gson.GsonBuilder gsonBuilder65 = gsonBuilder63.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder66 = gsonBuilder63.enableComplexMapKeySerialization();
    java.lang.reflect.Type type67 = null;
    com.google.gson.stream.JsonWriter jsonWriter68 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gsonBuilder63, type67, jsonWriter68);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number23 + "' != '" + 1+ "'", number23.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number36 + "' != '" + 1+ "'", number36.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder66);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test020"); }


    java.lang.Throwable throwable2 = null;
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException("", throwable2);
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException3);
    com.google.gson.JsonParseException jsonParseException5 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException3);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException5);
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException6);
    com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException7);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test021"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.lang.Number number20 = jsonArray0.getAsNumber();
    char char21 = jsonArray0.getAsCharacter();
    jsonArray0.add((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '1');

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test022"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder0.setDateFormat((-1));
    com.google.gson.Gson gson11 = gsonBuilder10.create();
    com.google.gson.stream.JsonReader jsonReader12 = null;
    java.lang.reflect.Type type13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array14 = gson11.fromJson(jsonReader12, type13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson11);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test023"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.remove("{\"hi!\":1}");
    int i23 = jsonObject0.size();
    com.google.gson.JsonPrimitive jsonPrimitive25 = jsonObject0.getAsJsonPrimitive("null");
    com.google.gson.JsonElement jsonElement27 = jsonObject0.get("com.google.gson.JsonParseException: ");
    com.google.gson.JsonObject jsonObject28 = new com.google.gson.JsonObject();
    com.google.gson.JsonObject jsonObject29 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray31 = jsonObject29.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray33 = jsonObject29.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    java.lang.Number number38 = jsonPrimitive36.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonPrimitive36.getAsJsonPrimitive();
    jsonObject29.add("hi!", (com.google.gson.JsonElement)jsonPrimitive39);
    boolean b41 = jsonObject29.isJsonArray();
    boolean b42 = jsonObject28.equals((java.lang.Object)b41);
    com.google.gson.JsonObject jsonObject44 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray46 = jsonObject44.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray48 = jsonObject44.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive51 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b52 = jsonPrimitive51.isString();
    java.lang.Number number53 = jsonPrimitive51.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive54 = jsonPrimitive51.getAsJsonPrimitive();
    jsonObject44.add("hi!", (com.google.gson.JsonElement)jsonPrimitive54);
    boolean b56 = jsonObject44.isJsonArray();
    com.google.gson.JsonElement jsonElement58 = jsonObject44.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive60 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d61 = jsonPrimitive60.getAsDouble();
    boolean b62 = jsonPrimitive60.isBoolean();
    boolean b63 = jsonObject44.equals((java.lang.Object)b62);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement64 = jsonObject44.entrySet();
    com.google.gson.JsonArray jsonArray66 = jsonObject44.getAsJsonArray("1");
    int i67 = jsonObject44.size();
    boolean b68 = jsonObject44.isJsonObject();
    jsonObject44.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Number)1L);
    com.google.gson.JsonPrimitive jsonPrimitive74 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b75 = jsonPrimitive74.isString();
    java.lang.Number number76 = jsonPrimitive74.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive77 = jsonPrimitive74.getAsJsonPrimitive();
    boolean b78 = jsonPrimitive77.isString();
    java.math.BigDecimal bigDecimal79 = jsonPrimitive77.getAsBigDecimal();
    jsonObject44.addProperty("hi!", (java.lang.Number)bigDecimal79);
    jsonObject28.addProperty("com.google.gson.JsonParseException: hi!", (java.lang.Number)bigDecimal79);
    jsonObject28.addProperty("hi!", (java.lang.Boolean)false);
    boolean b85 = jsonObject0.equals((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number38 + "' != '" + 1+ "'", number38.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number53 + "' != '" + 1+ "'", number53.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d61 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number76 + "' != '" + 1+ "'", number76.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test024"); }


    java.lang.Throwable throwable0 = null;
    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException(throwable0);
    java.lang.Throwable throwable3 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException(throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException4);
    java.lang.Throwable[] throwable_array6 = malformedJsonException4.getSuppressed();
    jsonParseException1.addSuppressed((java.lang.Throwable)malformedJsonException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable11 = null;
    com.google.gson.JsonParseException jsonParseException12 = new com.google.gson.JsonParseException("", throwable11);
    com.google.gson.stream.MalformedJsonException malformedJsonException13 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException12);
    malformedJsonException9.addSuppressed((java.lang.Throwable)jsonParseException12);
    com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException12);
    malformedJsonException4.addSuppressed((java.lang.Throwable)jsonParseException12);
    java.lang.Throwable[] throwable_array17 = jsonParseException12.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array17);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test025"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy14 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy15 = gson7.getAdapter(typetoken_fieldNamingStrategy14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test026"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder52 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setLenient();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithoutExposeAnnotation();
    boolean b56 = jsonArray51.equals((java.lang.Object)gsonBuilder52);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    jsonArray51.addAll(jsonArray57);
    java.math.BigInteger bigInteger73 = jsonArray57.getAsBigInteger();
    boolean b74 = jsonArray57.isJsonPrimitive();
    jsonArray57.add((java.lang.Character)'#');
    boolean b77 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray57);
    com.google.gson.JsonPrimitive jsonPrimitive79 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b80 = jsonPrimitive79.isString();
    java.lang.Number number81 = jsonPrimitive79.getAsNumber();
    long long82 = jsonPrimitive79.getAsLong();
    java.math.BigInteger bigInteger83 = jsonPrimitive79.getAsBigInteger();
    byte byte84 = jsonPrimitive79.getAsByte();
    boolean b85 = jsonArray57.equals((java.lang.Object)jsonPrimitive79);
    java.lang.String str86 = jsonPrimitive79.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number81 + "' != '" + 1+ "'", number81.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long82 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte84 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "1"+ "'", str86.equals("1"));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test027"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.serializeNulls();
    com.google.gson.Gson gson8 = gsonBuilder7.create();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson8);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test028"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.setDateFormat("\"\"");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test029"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    boolean b12 = gson7.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLenient();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder13.setDateFormat((int)'1', (int)'4');
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.addSerializationExclusionStrategy(exclusionStrategy23);
    com.google.gson.ExclusionStrategy exclusionStrategy25 = null;
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder22.addSerializationExclusionStrategy(exclusionStrategy25);
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setLenient();
    int[] i_array31 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.excludeFieldsWithModifiers(i_array31);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder29.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy34 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder26.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder19.setLongSerializationPolicy(longSerializationPolicy34);
    java.lang.reflect.Type type38 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str39 = gson7.toJson((java.lang.Object)gsonBuilder19, type38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test030"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder8.excludeFieldsWithModifiers(i_array14);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder8.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy23 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.setFieldNamingPolicy(fieldNamingPolicy23);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setDateFormat((-1));
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setLenient();
    int[] i_array31 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.excludeFieldsWithModifiers(i_array31);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder29.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy34 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.JsonElement jsonElement37 = longSerializationPolicy34.serialize((java.lang.Long)1L);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder26.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.JsonElement jsonElement40 = longSerializationPolicy34.serialize((java.lang.Long)10L);
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder18.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.JsonElement jsonElement43 = longSerializationPolicy34.serialize((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement43);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test031"); }


    com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder3.setFieldNamingPolicy(fieldNamingPolicy5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    int[] i_array8 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithModifiers(i_array8);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.setLenient();
    boolean b12 = jsonNull0.equals((java.lang.Object)gsonBuilder10);
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder19.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy25 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array26 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy25 };
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder19.setExclusionStrategies(exclusionStrategy_array26);
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder18.setExclusionStrategies(exclusionStrategy_array26);
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder10.setExclusionStrategies(exclusionStrategy_array26);
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder10.serializeSpecialFloatingPointValues();
    com.google.gson.Gson gson31 = gsonBuilder10.create();
    boolean b32 = gson31.htmlSafe();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test032"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonElement jsonElement36 = jsonArray0.remove((int)(short)0);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonPrimitive38.getAsJsonPrimitive();
    int i40 = jsonPrimitive39.getAsInt();
    boolean b41 = jsonArray0.contains((com.google.gson.JsonElement)jsonPrimitive39);
    short s42 = jsonPrimitive39.getAsShort();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull43 = jsonPrimitive39.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s42 == (short)1);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test033"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    jsonArray0.add((java.lang.Boolean)true);
    jsonArray0.add((java.lang.Character)'4');
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isJsonArray();
    boolean b28 = jsonPrimitive25.getAsBoolean();
    java.math.BigInteger bigInteger29 = jsonPrimitive25.getAsBigInteger();
    float f30 = jsonPrimitive25.getAsFloat();
    byte byte31 = jsonPrimitive25.getAsByte();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement32 = jsonArray0.set((int)(byte)4, (com.google.gson.JsonElement)jsonPrimitive25);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f30 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte31 == (byte)1);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test034"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder5 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy8 = null;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.addSerializationExclusionStrategy(exclusionStrategy8);
    com.google.gson.ExclusionStrategy exclusionStrategy10 = null;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder7.addSerializationExclusionStrategy(exclusionStrategy10);
    com.google.gson.Gson gson12 = gsonBuilder7.create();
    com.google.gson.JsonPrimitive jsonPrimitive14 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b15 = jsonPrimitive14.isString();
    java.lang.Number number16 = jsonPrimitive14.getAsNumber();
    java.math.BigDecimal bigDecimal17 = jsonPrimitive14.getAsBigDecimal();
    long long18 = jsonPrimitive14.getAsLong();
    boolean b19 = jsonPrimitive14.isNumber();
    java.lang.String str20 = gson12.toJson((com.google.gson.JsonElement)jsonPrimitive14);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy21 = gson12.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder4.setFieldNamingStrategy(fieldNamingStrategy21);
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.generateNonExecutableJson();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number16 + "' != '" + 1+ "'", number16.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "1"+ "'", str20.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test035"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    int i18 = jsonArray0.size();
    int i19 = jsonArray0.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test036"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    com.google.gson.JsonObject jsonObject53 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray55 = jsonObject53.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray57 = jsonObject53.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement58 = jsonObject53.entrySet();
    java.lang.String str59 = gson7.toJson((com.google.gson.JsonElement)jsonObject53);
    com.google.gson.GsonBuilder gsonBuilder60 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder60.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder60.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy63 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder60.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy63);
    com.google.gson.GsonBuilder gsonBuilder65 = gsonBuilder60.enableComplexMapKeySerialization();
    com.google.gson.Gson gson66 = gsonBuilder60.create();
    com.google.gson.JsonPrimitive jsonPrimitive68 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b69 = jsonPrimitive68.isString();
    boolean b70 = jsonPrimitive68.isBoolean();
    java.lang.String str71 = jsonPrimitive68.getAsString();
    boolean b72 = jsonPrimitive68.isJsonObject();
    java.math.BigDecimal bigDecimal73 = jsonPrimitive68.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement74 = gson66.toJsonTree((java.lang.Object)bigDecimal73);
    java.lang.String str75 = gson7.toJson(jsonElement74);
    java.lang.Class<java.math.BigDecimal> cls77 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal78 = gson7.fromJson("[10]", cls77);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "{}"+ "'", str59.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "1"+ "'", str71.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "1"+ "'", str75.equals("1"));

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test037"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    boolean b18 = jsonArray0.getAsBoolean();
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive("com.google.gson.stream.MalformedJsonException: hi!");
    boolean b21 = jsonPrimitive20.getAsBoolean();
    boolean b22 = jsonArray0.equals((java.lang.Object)jsonPrimitive20);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    boolean b26 = jsonPrimitive24.isBoolean();
    java.lang.String str27 = jsonPrimitive24.getAsString();
    boolean b28 = jsonPrimitive24.isJsonObject();
    double d29 = jsonPrimitive24.getAsDouble();
    double d30 = jsonPrimitive24.getAsDouble();
    com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    boolean b36 = jsonArray31.equals((java.lang.Object)gsonBuilder32);
    com.google.gson.JsonArray jsonArray37 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder38 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder38.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.setLenient();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder38.excludeFieldsWithoutExposeAnnotation();
    boolean b42 = jsonArray37.equals((java.lang.Object)gsonBuilder38);
    com.google.gson.JsonPrimitive jsonPrimitive44 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b45 = jsonPrimitive44.isString();
    boolean b46 = jsonPrimitive44.isBoolean();
    java.lang.String str47 = jsonPrimitive44.getAsString();
    boolean b48 = jsonPrimitive44.isJsonObject();
    int i49 = jsonPrimitive44.getAsInt();
    boolean b50 = jsonPrimitive44.getAsBoolean();
    jsonArray37.add((com.google.gson.JsonElement)jsonPrimitive44);
    jsonArray31.addAll(jsonArray37);
    java.math.BigInteger bigInteger53 = jsonArray37.getAsBigInteger();
    boolean b54 = jsonArray37.isJsonPrimitive();
    int i55 = jsonArray37.getAsInt();
    com.google.gson.JsonArray jsonArray56 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder57 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder57.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder57.setLenient();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder57.excludeFieldsWithoutExposeAnnotation();
    boolean b61 = jsonArray56.equals((java.lang.Object)gsonBuilder57);
    com.google.gson.JsonPrimitive jsonPrimitive63 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b64 = jsonPrimitive63.isString();
    boolean b65 = jsonPrimitive63.isBoolean();
    java.lang.String str66 = jsonPrimitive63.getAsString();
    boolean b67 = jsonPrimitive63.isJsonObject();
    int i68 = jsonPrimitive63.getAsInt();
    boolean b69 = jsonPrimitive63.getAsBoolean();
    jsonArray56.add((com.google.gson.JsonElement)jsonPrimitive63);
    java.math.BigInteger bigInteger71 = jsonArray56.getAsBigInteger();
    int i72 = jsonArray56.getAsInt();
    java.lang.Number number73 = jsonArray56.getAsNumber();
    jsonArray56.add("{\"hi!\":1}");
    jsonArray37.add((com.google.gson.JsonElement)jsonArray56);
    jsonArray37.add((java.lang.Boolean)true);
    boolean b79 = jsonPrimitive24.equals((java.lang.Object)jsonArray37);
    com.google.gson.JsonElement jsonElement81 = jsonArray37.remove((int)(short)0);
    jsonArray0.add((com.google.gson.JsonElement)jsonArray37);
    // The following exception was thrown during execution in test generation
    try {
    long long83 = jsonArray0.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1"+ "'", str27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "1"+ "'", str47.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "1"+ "'", str66.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number73 + "' != '" + 1+ "'", number73.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement81);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test038"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    jsonArray0.add((java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    long long19 = jsonArray0.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test039"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.addDeserializationExclusionStrategy(exclusionStrategy6);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setLenient();
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder5.addSerializationExclusionStrategy(exclusionStrategy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder5.setFieldNamingStrategy(fieldNamingStrategy12);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test040"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d54 = jsonPrimitive53.getAsDouble();
    boolean b55 = jsonPrimitive53.isJsonObject();
    byte byte56 = jsonPrimitive53.getAsByte();
    int i57 = jsonPrimitive53.getAsInt();
    java.math.BigInteger bigInteger58 = jsonPrimitive53.getAsBigInteger();
    jsonArray32.add((java.lang.Number)bigInteger58);
    com.google.gson.JsonArray jsonArray60 = jsonArray32.getAsJsonArray();
    com.google.gson.JsonObject jsonObject61 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray63 = jsonObject61.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray65 = jsonObject61.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive68 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b69 = jsonPrimitive68.isString();
    java.lang.Number number70 = jsonPrimitive68.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive71 = jsonPrimitive68.getAsJsonPrimitive();
    jsonObject61.add("hi!", (com.google.gson.JsonElement)jsonPrimitive71);
    boolean b73 = jsonObject61.isJsonArray();
    com.google.gson.JsonElement jsonElement75 = jsonObject61.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive77 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d78 = jsonPrimitive77.getAsDouble();
    boolean b79 = jsonPrimitive77.isBoolean();
    boolean b80 = jsonObject61.equals((java.lang.Object)b79);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement81 = jsonObject61.entrySet();
    com.google.gson.JsonArray jsonArray83 = jsonObject61.getAsJsonArray("1");
    int i84 = jsonObject61.size();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement85 = jsonObject61.entrySet();
    boolean b86 = jsonArray32.remove((com.google.gson.JsonElement)jsonObject61);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement87 = jsonArray32.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte56 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number70 + "' != '" + 1+ "'", number70.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d78 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement87);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test041"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test042"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setDateFormat("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setDateFormat((-1));
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder0.serializeNulls();
    com.google.gson.Gson gson8 = gsonBuilder7.create();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy9 = gson8.fieldNamingStrategy();
    com.google.gson.JsonObject jsonObject10 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray12 = jsonObject10.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray14 = jsonObject10.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b18 = jsonPrimitive17.isString();
    java.lang.Number number19 = jsonPrimitive17.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive20 = jsonPrimitive17.getAsJsonPrimitive();
    jsonObject10.add("hi!", (com.google.gson.JsonElement)jsonPrimitive20);
    jsonObject10.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject10.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    boolean b28 = jsonObject10.isJsonObject();
    boolean b29 = jsonObject10.isJsonNull();
    java.lang.reflect.Type type30 = null;
    com.google.gson.stream.JsonWriter jsonWriter31 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson8.toJson((java.lang.Object)b29, type30, jsonWriter31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number19 + "' != '" + 1+ "'", number19.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test043"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.math.BigDecimal bigDecimal20 = jsonArray0.getAsBigDecimal();
    jsonArray0.add((java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number23 = jsonArray0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test044"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    float f17 = jsonArray0.getAsFloat();
    java.lang.String str18 = jsonArray0.getAsString();
    java.math.BigDecimal bigDecimal19 = jsonArray0.getAsBigDecimal();
    long long20 = jsonArray0.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f17 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 1L);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test045"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    java.lang.Number number26 = jsonPrimitive24.getAsNumber();
    long long27 = jsonPrimitive24.getAsLong();
    java.math.BigDecimal bigDecimal28 = jsonPrimitive24.getAsBigDecimal();
    jsonArray0.add((java.lang.Number)bigDecimal28);
    java.math.BigDecimal bigDecimal30 = jsonArray0.getAsBigDecimal();
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal30);
    double d32 = jsonPrimitive31.getAsDouble();
    java.math.BigInteger bigInteger33 = jsonPrimitive31.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number26 + "' != '" + 1+ "'", number26.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long27 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger33);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test046"); }


    java.lang.Throwable throwable3 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException(throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.JsonParseException jsonParseException6 = new com.google.gson.JsonParseException("hi!", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("com.google.gson.JsonParseException: {\"hi!\":1}", (java.lang.Throwable)jsonParseException6);
    com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException6);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test047"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy8 = null;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy8);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.serializeNulls();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test048"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    com.google.gson.JsonObject jsonObject15 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray17 = jsonObject15.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray19 = jsonObject15.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    java.lang.Number number24 = jsonPrimitive22.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive25 = jsonPrimitive22.getAsJsonPrimitive();
    jsonObject15.add("hi!", (com.google.gson.JsonElement)jsonPrimitive25);
    jsonObject15.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject15.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive34 = jsonObject15.getAsJsonPrimitive("1");
    boolean b36 = jsonObject15.has("com.google.gson.stream.MalformedJsonException: hi!");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement37 = jsonObject15.entrySet();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement38 = jsonObject15.entrySet();
    com.google.gson.JsonObject jsonObject40 = jsonObject15.getAsJsonObject("com.google.gson.JsonParseException: {\"hi!\":1}");
    jsonObject15.addProperty("[1]", (java.lang.Boolean)false);
    boolean b45 = jsonObject15.has("com.google.gson.JsonParseException: ");
    java.lang.reflect.Type type46 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException47 = gson7.fromJson((com.google.gson.JsonElement)jsonObject15, type46);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number24 + "' != '" + 1+ "'", number24.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test049"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    int[] i_array11 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder5.excludeFieldsWithModifiers(i_array11);
    com.google.gson.ExclusionStrategy exclusionStrategy14 = null;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder5.addDeserializationExclusionStrategy(exclusionStrategy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test050"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array7 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy6 };
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder0.setExclusionStrategies(exclusionStrategy_array7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setLenient();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder10.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder10.setVersion((double)'#');
    com.google.gson.Gson gson16 = gsonBuilder15.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder9.setFieldNamingPolicy(fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy31 = null;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.addSerializationExclusionStrategy(exclusionStrategy31);
    com.google.gson.ExclusionStrategy exclusionStrategy33 = null;
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder30.addSerializationExclusionStrategy(exclusionStrategy33);
    com.google.gson.Gson gson35 = gsonBuilder30.create();
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b38 = jsonPrimitive37.isString();
    boolean b39 = jsonPrimitive37.isBoolean();
    java.lang.String str40 = jsonPrimitive37.getAsString();
    boolean b41 = jsonPrimitive37.isJsonObject();
    java.math.BigDecimal bigDecimal42 = jsonPrimitive37.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement43 = gson35.toJsonTree((java.lang.Object)jsonPrimitive37);
    com.google.gson.internal.Excluder excluder44 = gson35.excluder();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder27.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder44);
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder20.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder44);
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder46.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder48 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder48.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder49.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy53 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setFieldNamingPolicy(fieldNamingPolicy53);
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder47.setFieldNamingPolicy(fieldNamingPolicy53);
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder9.setFieldNamingPolicy(fieldNamingPolicy53);
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder9.disableHtmlEscaping();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "1"+ "'", str40.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test051"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)100.0f);
    boolean b2 = jsonPrimitive1.isJsonArray();
    double d3 = jsonPrimitive1.getAsDouble();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    double d5 = jsonPrimitive1.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "100.0"+ "'", str4.equals("100.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 100.0d);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test052"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy20 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder17.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy20);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder17.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy27 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder24.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy27);
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder24.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy31 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.setFieldNamingPolicy(fieldNamingPolicy31);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder23.setFieldNamingPolicy(fieldNamingPolicy31);
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder6.setFieldNamingPolicy(fieldNamingPolicy31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test053"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.setDateFormat((int)' ', (int)'h');
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder8.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder13.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy22 = null;
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.addSerializationExclusionStrategy(exclusionStrategy22);
    com.google.gson.ExclusionStrategy exclusionStrategy24 = null;
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder21.addSerializationExclusionStrategy(exclusionStrategy24);
    com.google.gson.Gson gson26 = gsonBuilder21.create();
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b29 = jsonPrimitive28.isString();
    boolean b30 = jsonPrimitive28.isBoolean();
    java.lang.String str31 = jsonPrimitive28.getAsString();
    boolean b32 = jsonPrimitive28.isJsonObject();
    java.math.BigDecimal bigDecimal33 = jsonPrimitive28.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement34 = gson26.toJsonTree((java.lang.Object)jsonPrimitive28);
    com.google.gson.internal.Excluder excluder35 = gson26.excluder();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder13.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder35);
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder4.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "1"+ "'", str31.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test054"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder9.setVersion((double)'#');
    com.google.gson.Gson gson15 = gsonBuilder14.create();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder16.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.serializeSpecialFloatingPointValues();
    com.google.gson.JsonElement jsonElement26 = gson15.toJsonTree((java.lang.Object)gsonBuilder25);
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setLenient();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy31 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.setFieldNamingPolicy(fieldNamingPolicy31);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    int[] i_array34 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithModifiers(i_array34);
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder32.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.setVersion((double)0.0f);
    com.google.gson.GsonBuilder gsonBuilder39 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.setLenient();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder39.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder43 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder43.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder43.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder45.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder47 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder47.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder47.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy50 = null;
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder49.addSerializationExclusionStrategy(exclusionStrategy50);
    com.google.gson.ExclusionStrategy exclusionStrategy52 = null;
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder49.addSerializationExclusionStrategy(exclusionStrategy52);
    com.google.gson.Gson gson54 = gsonBuilder49.create();
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    boolean b58 = jsonPrimitive56.isBoolean();
    java.lang.String str59 = jsonPrimitive56.getAsString();
    boolean b60 = jsonPrimitive56.isJsonObject();
    java.math.BigDecimal bigDecimal61 = jsonPrimitive56.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement62 = gson54.toJsonTree((java.lang.Object)jsonPrimitive56);
    com.google.gson.internal.Excluder excluder63 = gson54.excluder();
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder46.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder63);
    com.google.gson.GsonBuilder gsonBuilder65 = gsonBuilder39.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder63);
    com.google.gson.GsonBuilder gsonBuilder66 = gsonBuilder38.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder63);
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder25.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder63);
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder7.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1"+ "'", str59.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test055"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder8.excludeFieldsWithModifiers(i_array14);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder8.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    int[] i_array24 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder21.excludeFieldsWithModifiers(i_array24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder8.excludeFieldsWithModifiers(i_array24);
    com.google.gson.LongSerializationPolicy longSerializationPolicy27 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement29 = longSerializationPolicy27.serialize((java.lang.Long)(-1L));
    com.google.gson.JsonElement jsonElement31 = longSerializationPolicy27.serialize((java.lang.Long)0L);
    com.google.gson.JsonElement jsonElement33 = longSerializationPolicy27.serialize((java.lang.Long)100L);
    com.google.gson.JsonElement jsonElement35 = longSerializationPolicy27.serialize((java.lang.Long)(-1L));
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder26.setLongSerializationPolicy(longSerializationPolicy27);
    com.google.gson.ExclusionStrategy exclusionStrategy37 = null;
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder26.addDeserializationExclusionStrategy(exclusionStrategy37);
    com.google.gson.ExclusionStrategy exclusionStrategy39 = null;
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder26.addDeserializationExclusionStrategy(exclusionStrategy39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test056"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    boolean b19 = jsonArray0.isJsonPrimitive();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    int[] i_array24 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.excludeFieldsWithModifiers(i_array24);
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    int[] i_array30 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder28.excludeFieldsWithModifiers(i_array30);
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder32.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy38 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array39 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy38 };
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder32.setExclusionStrategies(exclusionStrategy_array39);
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder32.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder42 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder42.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder42.setLenient();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder42.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder42.setVersion((double)'#');
    com.google.gson.Gson gson48 = gsonBuilder47.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy49 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder47.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy49);
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder41.setFieldNamingPolicy(fieldNamingPolicy49);
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder31.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy49);
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder22.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy49);
    boolean b54 = jsonArray0.equals((java.lang.Object)gsonBuilder22);
    com.google.gson.ExclusionStrategy exclusionStrategy55 = null;
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder22.addDeserializationExclusionStrategy(exclusionStrategy55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test057"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithoutExposeAnnotation();
    boolean b28 = jsonArray23.equals((java.lang.Object)gsonBuilder24);
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b31 = jsonPrimitive30.isString();
    boolean b32 = jsonPrimitive30.isBoolean();
    java.lang.String str33 = jsonPrimitive30.getAsString();
    boolean b34 = jsonPrimitive30.isJsonObject();
    int i35 = jsonPrimitive30.getAsInt();
    boolean b36 = jsonPrimitive30.getAsBoolean();
    jsonArray23.add((com.google.gson.JsonElement)jsonPrimitive30);
    int i38 = jsonArray23.size();
    short s39 = jsonArray23.getAsShort();
    int i40 = jsonArray23.getAsInt();
    jsonArray0.addAll(jsonArray23);
    java.lang.String str42 = jsonArray23.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive44 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive45 = jsonPrimitive44.getAsJsonPrimitive();
    int i46 = jsonPrimitive45.getAsInt();
    boolean b47 = jsonArray23.contains((com.google.gson.JsonElement)jsonPrimitive45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s39 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test058"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.addDeserializationExclusionStrategy(exclusionStrategy6);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder5.setDateFormat("");
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls12 = null;
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    boolean b24 = jsonArray19.equals((java.lang.Object)gsonBuilder20);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    int i31 = jsonPrimitive26.getAsInt();
    boolean b32 = jsonPrimitive26.getAsBoolean();
    jsonArray19.add((com.google.gson.JsonElement)jsonPrimitive26);
    jsonArray13.addAll(jsonArray19);
    java.math.BigInteger bigInteger35 = jsonArray19.getAsBigInteger();
    java.math.BigInteger bigInteger36 = jsonArray19.getAsBigInteger();
    java.math.BigInteger bigInteger37 = jsonArray19.getAsBigInteger();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder11.registerTypeHierarchyAdapter(cls12, (java.lang.Object)jsonArray19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger37);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test059"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder0.setDateFormat((-1));
    com.google.gson.Gson gson11 = gsonBuilder10.create();
    boolean b12 = gson11.htmlSafe();
    java.lang.reflect.Type type14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable15 = gson11.fromJson("com.google.gson.JsonParseException: {\"hi!\":1}", type14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test060"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    boolean b23 = jsonArray18.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    int i30 = jsonPrimitive25.getAsInt();
    boolean b31 = jsonPrimitive25.getAsBoolean();
    jsonArray18.add((com.google.gson.JsonElement)jsonPrimitive25);
    java.math.BigInteger bigInteger33 = jsonArray18.getAsBigInteger();
    int i34 = jsonArray18.getAsInt();
    com.google.gson.JsonNull jsonNull35 = new com.google.gson.JsonNull();
    boolean b36 = jsonArray18.contains((com.google.gson.JsonElement)jsonNull35);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement37 = jsonArray18.iterator();
    java.math.BigDecimal bigDecimal38 = jsonArray18.getAsBigDecimal();
    boolean b39 = jsonArray18.getAsBoolean();
    java.lang.String str40 = gson7.toJson((com.google.gson.JsonElement)jsonArray18);
    java.lang.String str41 = gson7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[1]"+ "'", str40.equals("[1]"));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test061"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    jsonArray0.add((java.lang.Character)'#');
    jsonArray0.add((java.lang.Boolean)true);
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Boolean)false);
    boolean b38 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive37);
    boolean b39 = jsonArray0.isJsonNull();
    com.google.gson.JsonPrimitive jsonPrimitive41 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i42 = jsonPrimitive41.getAsInt();
    boolean b43 = jsonPrimitive41.getAsBoolean();
    byte byte44 = jsonPrimitive41.getAsByte();
    byte byte45 = jsonPrimitive41.getAsByte();
    boolean b46 = jsonArray0.contains((com.google.gson.JsonElement)jsonPrimitive41);
    boolean b47 = jsonPrimitive41.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte44 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte45 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test062"); }


    com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
    boolean b2 = jsonNull0.equals((java.lang.Object)(-1L));
    com.google.gson.JsonArray jsonArray3 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setLenient();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.excludeFieldsWithoutExposeAnnotation();
    boolean b8 = jsonArray3.equals((java.lang.Object)gsonBuilder4);
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b11 = jsonPrimitive10.isString();
    boolean b12 = jsonPrimitive10.isBoolean();
    java.lang.String str13 = jsonPrimitive10.getAsString();
    boolean b14 = jsonPrimitive10.isJsonObject();
    int i15 = jsonPrimitive10.getAsInt();
    boolean b16 = jsonPrimitive10.getAsBoolean();
    jsonArray3.add((com.google.gson.JsonElement)jsonPrimitive10);
    int i18 = jsonArray3.size();
    jsonArray3.add((java.lang.Boolean)false);
    int i21 = jsonArray3.size();
    boolean b22 = jsonNull0.equals((java.lang.Object)jsonArray3);
    java.lang.Object obj23 = null;
    boolean b24 = jsonNull0.equals(obj23);
    boolean b25 = jsonNull0.isJsonNull();
    java.lang.Throwable throwable30 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException31 = new com.google.gson.stream.MalformedJsonException(throwable30);
    com.google.gson.stream.MalformedJsonException malformedJsonException32 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException31);
    com.google.gson.JsonParseException jsonParseException33 = new com.google.gson.JsonParseException("hi!", (java.lang.Throwable)malformedJsonException31);
    com.google.gson.stream.MalformedJsonException malformedJsonException34 = new com.google.gson.stream.MalformedJsonException("com.google.gson.JsonParseException: {\"hi!\":1}", (java.lang.Throwable)jsonParseException33);
    com.google.gson.stream.MalformedJsonException malformedJsonException35 = new com.google.gson.stream.MalformedJsonException("[1,1]", (java.lang.Throwable)jsonParseException33);
    boolean b36 = jsonNull0.equals((java.lang.Object)"[1,1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1"+ "'", str13.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test063"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    jsonArray0.add((java.lang.Number)(byte)10);
    jsonArray0.add((java.lang.Character)'t');
    com.google.gson.JsonObject jsonObject27 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray29 = jsonObject27.getAsJsonArray("1");
    jsonObject27.addProperty("com.google.gson.stream.MalformedJsonException: hi!", "hi!");
    jsonObject27.addProperty("[1]", (java.lang.Character)'4');
    int i36 = jsonObject27.size();
    boolean b37 = jsonArray0.equals((java.lang.Object)jsonObject27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test064"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException2);
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException("[1,false]", (java.lang.Throwable)malformedJsonException2);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test065"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.getAsInt();
    boolean b16 = jsonArray0.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test066"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setFieldNamingPolicy(fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder3.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder12.setDateFormat((int)'1', (int)'4');
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy22 = null;
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.addSerializationExclusionStrategy(exclusionStrategy22);
    com.google.gson.ExclusionStrategy exclusionStrategy24 = null;
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder21.addSerializationExclusionStrategy(exclusionStrategy24);
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    int[] i_array30 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder28.excludeFieldsWithModifiers(i_array30);
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder28.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy33 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLongSerializationPolicy(longSerializationPolicy33);
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder25.setLongSerializationPolicy(longSerializationPolicy33);
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder18.setLongSerializationPolicy(longSerializationPolicy33);
    com.google.gson.JsonElement jsonElement38 = longSerializationPolicy33.serialize((java.lang.Long)1L);
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder11.setLongSerializationPolicy(longSerializationPolicy33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test067"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    jsonObject0.addProperty("{}", "com.google.gson.stream.MalformedJsonException: 0");
    // The following exception was thrown during execution in test generation
    try {
    short s18 = jsonObject0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test068"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    float f3 = jsonPrimitive2.getAsFloat();
    float f4 = jsonPrimitive2.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f3 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 1.0f);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test069"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive16 = jsonObject0.getAsJsonPrimitive("null");
    com.google.gson.JsonArray jsonArray18 = jsonObject0.getAsJsonArray("\"4\"");
    boolean b20 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: 0");
    jsonObject0.addProperty("", "com.google.gson.stream.MalformedJsonException: ");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test070"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d22 = jsonPrimitive21.getAsDouble();
    boolean b23 = jsonPrimitive21.isJsonObject();
    boolean b24 = jsonPrimitive21.isNumber();
    boolean b25 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive21);
    int i26 = jsonArray0.size();
    jsonArray0.add((java.lang.Character)'t');
    boolean b29 = jsonArray0.isJsonPrimitive();
    com.google.gson.JsonArray jsonArray30 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder31 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder31.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder31.setLenient();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder31.excludeFieldsWithoutExposeAnnotation();
    boolean b35 = jsonArray30.equals((java.lang.Object)gsonBuilder31);
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b38 = jsonPrimitive37.isString();
    boolean b39 = jsonPrimitive37.isBoolean();
    java.lang.String str40 = jsonPrimitive37.getAsString();
    boolean b41 = jsonPrimitive37.isJsonObject();
    int i42 = jsonPrimitive37.getAsInt();
    boolean b43 = jsonPrimitive37.getAsBoolean();
    jsonArray30.add((com.google.gson.JsonElement)jsonPrimitive37);
    int i45 = jsonArray30.size();
    int i46 = jsonArray30.getAsInt();
    boolean b47 = jsonArray30.isJsonPrimitive();
    jsonArray0.addAll(jsonArray30);
    com.google.gson.JsonPrimitive jsonPrimitive50 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d51 = jsonPrimitive50.getAsDouble();
    boolean b52 = jsonPrimitive50.isJsonObject();
    byte byte53 = jsonPrimitive50.getAsByte();
    int i54 = jsonPrimitive50.getAsInt();
    java.math.BigInteger bigInteger55 = jsonPrimitive50.getAsBigInteger();
    java.math.BigDecimal bigDecimal56 = jsonPrimitive50.getAsBigDecimal();
    java.lang.String str57 = jsonPrimitive50.toString();
    boolean b58 = jsonArray30.contains((com.google.gson.JsonElement)jsonPrimitive50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "1"+ "'", str40.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d51 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte53 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "\"4\""+ "'", str57.equals("\"4\""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test071"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    java.lang.reflect.Type type35 = null;
    java.lang.Appendable appendable36 = gson7.fromJson("", type35);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy37 = gson7.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder38 = gson7.excluder();
    java.lang.String str39 = gson7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder38);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test072"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement5 = jsonObject0.entrySet();
    boolean b6 = jsonObject0.isJsonNull();
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = jsonObject0.getAsBoolean();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test073"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonElement jsonElement6 = jsonObject0.remove("100.0");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement6);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test074"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonElement jsonElement30 = jsonObject0.get("com.google.gson.stream.MalformedJsonException: {\"hi!\":1}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement30);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test075"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.generateNonExecutableJson();
    com.google.gson.ExclusionStrategy exclusionStrategy4 = null;
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.addDeserializationExclusionStrategy(exclusionStrategy4);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls6 = null;
    com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    boolean b12 = jsonArray7.equals((java.lang.Object)gsonBuilder8);
    com.google.gson.JsonPrimitive jsonPrimitive14 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b15 = jsonPrimitive14.isString();
    boolean b16 = jsonPrimitive14.isBoolean();
    java.lang.String str17 = jsonPrimitive14.getAsString();
    boolean b18 = jsonPrimitive14.isJsonObject();
    int i19 = jsonPrimitive14.getAsInt();
    boolean b20 = jsonPrimitive14.getAsBoolean();
    jsonArray7.add((com.google.gson.JsonElement)jsonPrimitive14);
    java.math.BigInteger bigInteger22 = jsonArray7.getAsBigInteger();
    int i23 = jsonArray7.getAsInt();
    com.google.gson.JsonNull jsonNull24 = new com.google.gson.JsonNull();
    boolean b25 = jsonArray7.contains((com.google.gson.JsonElement)jsonNull24);
    boolean b26 = jsonArray7.isJsonPrimitive();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder5.registerTypeHierarchyAdapter(cls6, (java.lang.Object)jsonArray7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test076"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array13 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy12 };
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array13);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder5.setExclusionStrategies(exclusionStrategy_array13);
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder5.setVersion((double)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test077"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)0L);
    boolean b17 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive16);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull18 = jsonPrimitive16.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test078"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.internal.Excluder excluder15 = gson7.excluder();
    com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable21 = null;
    com.google.gson.JsonParseException jsonParseException22 = new com.google.gson.JsonParseException("", throwable21);
    com.google.gson.stream.MalformedJsonException malformedJsonException23 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException22);
    malformedJsonException19.addSuppressed((java.lang.Throwable)jsonParseException22);
    com.google.gson.stream.MalformedJsonException malformedJsonException25 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException19);
    com.google.gson.stream.MalformedJsonException malformedJsonException26 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException25);
    com.google.gson.JsonParseException jsonParseException27 = new com.google.gson.JsonParseException("{\"com.google.gson.stream.MalformedJsonException: hi!\":\"hi!\",\"[1]\":\"4\"}", (java.lang.Throwable)malformedJsonException26);
    java.lang.reflect.Type type28 = null;
    java.lang.Appendable appendable29 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)"{\"com.google.gson.stream.MalformedJsonException: hi!\":\"hi!\",\"[1]\":\"4\"}", type28, appendable29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder15);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test079"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    int[] i_array11 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder6.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder6.setDateFormat((int)(byte)0);
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    java.math.BigInteger bigInteger31 = jsonArray16.getAsBigInteger();
    int i32 = jsonArray16.getAsInt();
    com.google.gson.JsonNull jsonNull33 = new com.google.gson.JsonNull();
    boolean b34 = jsonArray16.contains((com.google.gson.JsonElement)jsonNull33);
    com.google.gson.LongSerializationPolicy longSerializationPolicy35 = com.google.gson.LongSerializationPolicy.DEFAULT;
    boolean b36 = jsonNull33.equals((java.lang.Object)longSerializationPolicy35);
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder15.setLongSerializationPolicy(longSerializationPolicy35);
    com.google.gson.Gson gson38 = gsonBuilder37.create();
    com.google.gson.JsonNull jsonNull39 = new com.google.gson.JsonNull();
    com.google.gson.GsonBuilder gsonBuilder40 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder40.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder40.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy43 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder40.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy43);
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder40.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder45.setPrettyPrinting();
    boolean b47 = jsonNull39.equals((java.lang.Object)gsonBuilder46);
    com.google.gson.GsonBuilder gsonBuilder48 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder48.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder48.setLenient();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder48.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder48.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder53.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder53.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder53.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder53.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder59 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder59.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder59.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy62 = null;
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder61.addSerializationExclusionStrategy(exclusionStrategy62);
    com.google.gson.ExclusionStrategy exclusionStrategy64 = null;
    com.google.gson.GsonBuilder gsonBuilder65 = gsonBuilder61.addSerializationExclusionStrategy(exclusionStrategy64);
    com.google.gson.Gson gson66 = gsonBuilder61.create();
    com.google.gson.JsonPrimitive jsonPrimitive68 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b69 = jsonPrimitive68.isString();
    boolean b70 = jsonPrimitive68.isBoolean();
    java.lang.String str71 = jsonPrimitive68.getAsString();
    boolean b72 = jsonPrimitive68.isJsonObject();
    java.math.BigDecimal bigDecimal73 = jsonPrimitive68.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement74 = gson66.toJsonTree((java.lang.Object)jsonPrimitive68);
    com.google.gson.internal.Excluder excluder75 = gson66.excluder();
    com.google.gson.GsonBuilder gsonBuilder76 = gsonBuilder53.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder75);
    com.google.gson.GsonBuilder gsonBuilder77 = gsonBuilder46.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder75);
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder37.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "1"+ "'", str71.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test080"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder8.setDateFormat(2);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.serializeSpecialFloatingPointValues();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test081"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    com.google.gson.JsonPrimitive jsonPrimitive3 = jsonPrimitive1.getAsJsonPrimitive();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray4 = jsonPrimitive1.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive3);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test082"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    short s23 = jsonArray6.getAsShort();
    com.google.gson.JsonArray jsonArray24 = new com.google.gson.JsonArray();
    jsonArray24.add((java.lang.Boolean)true);
    jsonArray6.add((com.google.gson.JsonElement)jsonArray24);
    java.lang.String str28 = jsonArray24.getAsString();
    com.google.gson.JsonArray jsonArray29 = jsonArray24.getAsJsonArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s23 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "true"+ "'", str28.equals("true"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray29);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test083"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    java.lang.String str11 = gson7.toString();
    com.google.gson.JsonElement jsonElement12 = null;
    java.lang.String str13 = gson7.toJson(jsonElement12);
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy17 = null;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.addSerializationExclusionStrategy(exclusionStrategy17);
    com.google.gson.ExclusionStrategy exclusionStrategy19 = null;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder16.addSerializationExclusionStrategy(exclusionStrategy19);
    com.google.gson.Gson gson21 = gsonBuilder16.create();
    boolean b22 = gson21.serializeNulls();
    boolean b23 = gson21.serializeNulls();
    boolean b24 = gson21.serializeNulls();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str25 = gson7.toJson((java.lang.Object)b24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null"+ "'", str13.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test084"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException1 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable3 = null;
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("", throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException4);
    malformedJsonException1.addSuppressed((java.lang.Throwable)jsonParseException4);
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException4);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test085"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    com.google.gson.JsonObject jsonObject53 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray55 = jsonObject53.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray57 = jsonObject53.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement58 = jsonObject53.entrySet();
    java.lang.String str59 = gson7.toJson((com.google.gson.JsonElement)jsonObject53);
    boolean b60 = jsonObject53.isJsonNull();
    boolean b61 = jsonObject53.isJsonNull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "{}"+ "'", str59.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test086"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.math.BigDecimal bigDecimal51 = jsonArray32.getAsBigDecimal();
    short s52 = jsonArray32.getAsShort();
    byte byte53 = jsonArray32.getAsByte();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement54 = jsonArray32.iterator();
    char char55 = jsonArray32.getAsCharacter();
    com.google.gson.JsonNull jsonNull56 = new com.google.gson.JsonNull();
    boolean b58 = jsonNull56.equals((java.lang.Object)(-1L));
    com.google.gson.JsonObject jsonObject59 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray61 = jsonObject59.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray63 = jsonObject59.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive66 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b67 = jsonPrimitive66.isString();
    java.lang.Number number68 = jsonPrimitive66.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive69 = jsonPrimitive66.getAsJsonPrimitive();
    jsonObject59.add("hi!", (com.google.gson.JsonElement)jsonPrimitive69);
    boolean b71 = jsonObject59.isJsonArray();
    com.google.gson.JsonElement jsonElement73 = jsonObject59.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive75 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d76 = jsonPrimitive75.getAsDouble();
    boolean b77 = jsonPrimitive75.isBoolean();
    boolean b78 = jsonObject59.equals((java.lang.Object)b77);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement79 = jsonObject59.entrySet();
    com.google.gson.JsonArray jsonArray81 = jsonObject59.getAsJsonArray("1");
    int i82 = jsonObject59.size();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement83 = jsonObject59.entrySet();
    boolean b84 = jsonNull56.equals((java.lang.Object)set_entry_str_jsonElement83);
    com.google.gson.JsonPrimitive jsonPrimitive86 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b87 = jsonPrimitive86.isString();
    java.lang.Number number88 = jsonPrimitive86.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive89 = jsonPrimitive86.getAsJsonPrimitive();
    boolean b90 = jsonPrimitive89.isString();
    boolean b91 = jsonPrimitive89.isNumber();
    java.math.BigDecimal bigDecimal92 = jsonPrimitive89.getAsBigDecimal();
    boolean b93 = jsonNull56.equals((java.lang.Object)jsonPrimitive89);
    boolean b94 = jsonArray32.contains((com.google.gson.JsonElement)jsonNull56);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement95 = jsonArray32.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s52 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte53 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number68 + "' != '" + 1+ "'", number68.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d76 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number88 + "' != '" + 1+ "'", number88.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement95);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test087"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    int[] i_array13 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder10.excludeFieldsWithModifiers(i_array13);
    int[] i_array19 = new int[] { '1', ' ', (short)1, '4' };
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder14.excludeFieldsWithModifiers(i_array19);
    com.google.gson.LongSerializationPolicy longSerializationPolicy21 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement23 = longSerializationPolicy21.serialize((java.lang.Long)(-1L));
    com.google.gson.JsonElement jsonElement25 = longSerializationPolicy21.serialize((java.lang.Long)10L);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder14.setLongSerializationPolicy(longSerializationPolicy21);
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy30 = null;
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.addSerializationExclusionStrategy(exclusionStrategy30);
    com.google.gson.ExclusionStrategy exclusionStrategy32 = null;
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder29.addSerializationExclusionStrategy(exclusionStrategy32);
    com.google.gson.Gson gson34 = gsonBuilder29.create();
    com.google.gson.internal.Excluder excluder35 = gson34.excluder();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder26.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder35);
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder7.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test088"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonPrimitive jsonPrimitive29 = jsonElement27.getAsJsonPrimitive();
    short s30 = jsonPrimitive29.getAsShort();
    java.math.BigInteger bigInteger31 = jsonPrimitive29.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s30 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger31);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test089"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy7 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder11 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy18 = null;
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.addSerializationExclusionStrategy(exclusionStrategy18);
    com.google.gson.ExclusionStrategy exclusionStrategy20 = null;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder17.addSerializationExclusionStrategy(exclusionStrategy20);
    com.google.gson.Gson gson22 = gsonBuilder17.create();
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    boolean b26 = jsonPrimitive24.isBoolean();
    java.lang.String str27 = jsonPrimitive24.getAsString();
    boolean b28 = jsonPrimitive24.isJsonObject();
    java.math.BigDecimal bigDecimal29 = jsonPrimitive24.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement30 = gson22.toJsonTree((java.lang.Object)jsonPrimitive24);
    com.google.gson.internal.Excluder excluder31 = gson22.excluder();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder14.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder31);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder14.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy34 = null;
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder14.addSerializationExclusionStrategy(exclusionStrategy34);
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array36 = new com.google.gson.ExclusionStrategy[] {  };
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder35.setExclusionStrategies(exclusionStrategy_array36);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder10.setExclusionStrategies(exclusionStrategy_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1"+ "'", str27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test090"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    double d6 = jsonPrimitive1.getAsDouble();
    double d7 = jsonPrimitive1.getAsDouble();
    short s8 = jsonPrimitive1.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)1);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test091"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy7 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.setPrettyPrinting();
    java.lang.reflect.Type type10 = null;
    com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    boolean b16 = jsonArray11.equals((java.lang.Object)gsonBuilder12);
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    int i23 = jsonPrimitive18.getAsInt();
    boolean b24 = jsonPrimitive18.getAsBoolean();
    jsonArray11.add((com.google.gson.JsonElement)jsonPrimitive18);
    int i26 = jsonArray11.size();
    short s27 = jsonArray11.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b30 = jsonPrimitive29.isString();
    java.lang.Number number31 = jsonPrimitive29.getAsNumber();
    boolean b32 = jsonPrimitive29.isBoolean();
    boolean b33 = jsonArray11.remove((com.google.gson.JsonElement)jsonPrimitive29);
    boolean b34 = jsonArray11.isJsonNull();
    int i35 = jsonArray11.size();
    com.google.gson.JsonObject jsonObject36 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray38 = jsonObject36.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray40 = jsonObject36.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive43 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b44 = jsonPrimitive43.isString();
    java.lang.Number number45 = jsonPrimitive43.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive46 = jsonPrimitive43.getAsJsonPrimitive();
    jsonObject36.add("hi!", (com.google.gson.JsonElement)jsonPrimitive46);
    jsonObject36.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive52 = jsonObject36.getAsJsonPrimitive("null");
    jsonArray11.add((com.google.gson.JsonElement)jsonObject36);
    jsonArray11.add("{}");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder6.registerTypeAdapter(type10, (java.lang.Object)"{}");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s27 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number31 + "' != '" + 1+ "'", number31.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number45 + "' != '" + 1+ "'", number45.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive52);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test092"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    java.io.Writer writer53 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter54 = gson7.newJsonWriter(writer53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test093"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    jsonArray0.add((java.lang.Character)'#');
    jsonArray0.add((java.lang.Boolean)true);
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Boolean)false);
    boolean b38 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive37);
    jsonArray0.add("");
    com.google.gson.JsonArray jsonArray41 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder42 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder42.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder42.setLenient();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder42.excludeFieldsWithoutExposeAnnotation();
    boolean b46 = jsonArray41.equals((java.lang.Object)gsonBuilder42);
    com.google.gson.JsonArray jsonArray47 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder48 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder48.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder48.setLenient();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder48.excludeFieldsWithoutExposeAnnotation();
    boolean b52 = jsonArray47.equals((java.lang.Object)gsonBuilder48);
    com.google.gson.JsonPrimitive jsonPrimitive54 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b55 = jsonPrimitive54.isString();
    boolean b56 = jsonPrimitive54.isBoolean();
    java.lang.String str57 = jsonPrimitive54.getAsString();
    boolean b58 = jsonPrimitive54.isJsonObject();
    int i59 = jsonPrimitive54.getAsInt();
    boolean b60 = jsonPrimitive54.getAsBoolean();
    jsonArray47.add((com.google.gson.JsonElement)jsonPrimitive54);
    jsonArray41.addAll(jsonArray47);
    java.math.BigInteger bigInteger63 = jsonArray47.getAsBigInteger();
    java.math.BigInteger bigInteger64 = jsonArray47.getAsBigInteger();
    float f65 = jsonArray47.getAsFloat();
    jsonArray47.add("");
    com.google.gson.JsonArray jsonArray68 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder69 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder70 = gsonBuilder69.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder71 = gsonBuilder69.setLenient();
    com.google.gson.GsonBuilder gsonBuilder72 = gsonBuilder69.excludeFieldsWithoutExposeAnnotation();
    boolean b73 = jsonArray68.equals((java.lang.Object)gsonBuilder69);
    com.google.gson.JsonPrimitive jsonPrimitive75 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b76 = jsonPrimitive75.isString();
    boolean b77 = jsonPrimitive75.isBoolean();
    java.lang.String str78 = jsonPrimitive75.getAsString();
    boolean b79 = jsonPrimitive75.isJsonObject();
    int i80 = jsonPrimitive75.getAsInt();
    boolean b81 = jsonPrimitive75.getAsBoolean();
    jsonArray68.add((com.google.gson.JsonElement)jsonPrimitive75);
    int i83 = jsonPrimitive75.getAsInt();
    java.math.BigDecimal bigDecimal84 = jsonPrimitive75.getAsBigDecimal();
    jsonArray47.add((java.lang.Number)bigDecimal84);
    boolean b86 = jsonArray0.remove((com.google.gson.JsonElement)jsonArray47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "1"+ "'", str57.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f65 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "1"+ "'", str78.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test094"); }


    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException4);
    java.lang.Throwable[] throwable_array6 = jsonParseException2.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException2);
    java.lang.String str8 = malformedJsonException7.toString();
    com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "com.google.gson.stream.MalformedJsonException: "+ "'", str8.equals("com.google.gson.stream.MalformedJsonException: "));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test095"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    float f3 = jsonPrimitive1.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f3 == 1.0f);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test096"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("{\"hi!\":1}");
    // The following exception was thrown during execution in test generation
    try {
    byte byte2 = jsonPrimitive1.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test097"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.remove("{\"hi!\":1}");
    int i23 = jsonObject0.size();
    com.google.gson.JsonPrimitive jsonPrimitive25 = jsonObject0.getAsJsonPrimitive("null");
    com.google.gson.JsonElement jsonElement27 = jsonObject0.get("com.google.gson.JsonParseException: ");
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject("com.google.gson.stream.MalformedJsonException: {\"hi!\":1}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject29);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test098"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonElement jsonElement36 = jsonArray0.remove((int)(short)0);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonPrimitive38.getAsJsonPrimitive();
    int i40 = jsonPrimitive39.getAsInt();
    boolean b41 = jsonArray0.contains((com.google.gson.JsonElement)jsonPrimitive39);
    boolean b42 = jsonPrimitive39.isBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test099"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.math.BigDecimal bigDecimal51 = jsonArray32.getAsBigDecimal();
    short s52 = jsonArray32.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive54 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b55 = jsonPrimitive54.isString();
    java.lang.String str56 = jsonPrimitive54.getAsString();
    byte byte57 = jsonPrimitive54.getAsByte();
    boolean b58 = jsonPrimitive54.getAsBoolean();
    short s59 = jsonPrimitive54.getAsShort();
    boolean b60 = jsonArray32.contains((com.google.gson.JsonElement)jsonPrimitive54);
    int i61 = jsonArray32.size();
    java.lang.String str62 = jsonArray32.toString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement64 = jsonArray32.remove((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s52 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "1"+ "'", str56.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte57 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s59 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "[1]"+ "'", str62.equals("[1]"));

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test100"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.math.BigDecimal bigDecimal51 = jsonArray32.getAsBigDecimal();
    short s52 = jsonArray32.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive54 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d55 = jsonPrimitive54.getAsDouble();
    boolean b56 = jsonPrimitive54.isJsonObject();
    float f57 = jsonPrimitive54.getAsFloat();
    java.math.BigInteger bigInteger58 = jsonPrimitive54.getAsBigInteger();
    boolean b59 = jsonPrimitive54.isString();
    short s60 = jsonPrimitive54.getAsShort();
    boolean b61 = jsonArray32.contains((com.google.gson.JsonElement)jsonPrimitive54);
    boolean b62 = jsonPrimitive54.isJsonPrimitive();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s52 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d55 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f57 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s60 == (short)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test101"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.remove("{\"hi!\":1}");
    int i23 = jsonObject0.size();
    com.google.gson.JsonElement jsonElement25 = jsonObject0.get("{\"hi!\":1}");
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy29 = null;
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.addSerializationExclusionStrategy(exclusionStrategy29);
    com.google.gson.ExclusionStrategy exclusionStrategy31 = null;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder28.addSerializationExclusionStrategy(exclusionStrategy31);
    com.google.gson.Gson gson33 = gsonBuilder28.create();
    boolean b34 = gson33.serializeNulls();
    boolean b35 = gson33.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b38 = jsonPrimitive37.isString();
    boolean b39 = jsonPrimitive37.isBoolean();
    java.lang.String str40 = jsonPrimitive37.getAsString();
    java.lang.Number number41 = jsonPrimitive37.getAsNumber();
    long long42 = jsonPrimitive37.getAsLong();
    java.lang.String str43 = gson33.toJson((java.lang.Object)jsonPrimitive37);
    com.google.gson.JsonObject jsonObject44 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray46 = jsonObject44.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray48 = jsonObject44.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive51 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b52 = jsonPrimitive51.isString();
    java.lang.Number number53 = jsonPrimitive51.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive54 = jsonPrimitive51.getAsJsonPrimitive();
    jsonObject44.add("hi!", (com.google.gson.JsonElement)jsonPrimitive54);
    boolean b56 = jsonObject44.isJsonArray();
    com.google.gson.JsonElement jsonElement58 = jsonObject44.get("hi!");
    java.lang.String str59 = gson33.toJson((com.google.gson.JsonElement)jsonObject44);
    com.google.gson.JsonElement jsonElement61 = jsonObject44.remove("");
    jsonObject44.addProperty("com.google.gson.stream.MalformedJsonException: 0", "");
    int i65 = jsonObject44.size();
    boolean b66 = jsonObject44.isJsonObject();
    com.google.gson.JsonNull jsonNull68 = new com.google.gson.JsonNull();
    jsonObject44.add("null", (com.google.gson.JsonElement)jsonNull68);
    boolean b70 = jsonObject0.equals((java.lang.Object)"null");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "1"+ "'", str40.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number41 + "' != '" + 1+ "'", number41.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "1"+ "'", str43.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number53 + "' != '" + 1+ "'", number53.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "{\"hi!\":1}"+ "'", str59.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test102"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    com.google.gson.JsonObject jsonObject19 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray21 = jsonObject19.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray23 = jsonObject19.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    java.lang.Number number28 = jsonPrimitive26.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive29 = jsonPrimitive26.getAsJsonPrimitive();
    jsonObject19.add("hi!", (com.google.gson.JsonElement)jsonPrimitive29);
    jsonObject19.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive35 = jsonObject19.getAsJsonPrimitive("null");
    boolean b36 = jsonNull17.equals((java.lang.Object)jsonObject19);
    com.google.gson.JsonArray jsonArray38 = jsonObject19.getAsJsonArray("com.google.gson.stream.MalformedJsonException");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement39 = jsonObject19.entrySet();
    boolean b40 = jsonObject19.isJsonNull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number28 + "' != '" + 1+ "'", number28.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test103"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    int i23 = jsonArray8.size();
    short s24 = jsonArray8.getAsShort();
    int i25 = jsonArray8.getAsInt();
    com.google.gson.JsonElement jsonElement26 = gson6.toJsonTree((java.lang.Object)jsonArray8);
    java.io.Reader reader27 = null;
    java.lang.Class<int[]> cls28 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array29 = gson6.fromJson(reader27, cls28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test104"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = jsonArray32.getAsJsonArray();
    char char52 = jsonArray32.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '1');

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test105"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    java.math.BigDecimal bigDecimal3 = jsonPrimitive2.getAsBigDecimal();
    byte byte4 = jsonPrimitive2.getAsByte();
    boolean b5 = jsonPrimitive2.isBoolean();
    short s6 = jsonPrimitive2.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test106"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive2 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d3 = jsonPrimitive2.getAsDouble();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive2);
    java.lang.String str5 = jsonArray0.getAsString();
    int i6 = jsonArray0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "4"+ "'", str5.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test107"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonArray jsonArray52 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder53 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder53.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder53.setLenient();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder53.excludeFieldsWithoutExposeAnnotation();
    boolean b57 = jsonArray52.equals((java.lang.Object)gsonBuilder53);
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    boolean b61 = jsonPrimitive59.isBoolean();
    java.lang.String str62 = jsonPrimitive59.getAsString();
    boolean b63 = jsonPrimitive59.isJsonObject();
    int i64 = jsonPrimitive59.getAsInt();
    boolean b65 = jsonPrimitive59.getAsBoolean();
    jsonArray52.add((com.google.gson.JsonElement)jsonPrimitive59);
    int i67 = jsonArray52.size();
    short s68 = jsonArray52.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive70 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b71 = jsonPrimitive70.isString();
    java.lang.Number number72 = jsonPrimitive70.getAsNumber();
    boolean b73 = jsonPrimitive70.isBoolean();
    boolean b74 = jsonArray52.remove((com.google.gson.JsonElement)jsonPrimitive70);
    com.google.gson.JsonArray jsonArray75 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder76 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder77 = gsonBuilder76.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder76.setLenient();
    com.google.gson.GsonBuilder gsonBuilder79 = gsonBuilder76.excludeFieldsWithoutExposeAnnotation();
    boolean b80 = jsonArray75.equals((java.lang.Object)gsonBuilder76);
    com.google.gson.JsonPrimitive jsonPrimitive82 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b83 = jsonPrimitive82.isString();
    boolean b84 = jsonPrimitive82.isBoolean();
    java.lang.String str85 = jsonPrimitive82.getAsString();
    boolean b86 = jsonPrimitive82.isJsonObject();
    int i87 = jsonPrimitive82.getAsInt();
    boolean b88 = jsonPrimitive82.getAsBoolean();
    jsonArray75.add((com.google.gson.JsonElement)jsonPrimitive82);
    int i90 = jsonArray75.size();
    short s91 = jsonArray75.getAsShort();
    int i92 = jsonArray75.getAsInt();
    jsonArray52.addAll(jsonArray75);
    int i94 = jsonArray75.getAsInt();
    boolean b95 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray75);
    java.lang.Number number96 = jsonArray75.getAsNumber();
    jsonArray75.add((java.lang.Character)' ');
    // The following exception was thrown during execution in test generation
    try {
    byte byte99 = jsonArray75.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "1"+ "'", str62.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s68 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number72 + "' != '" + 1+ "'", number72.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "1"+ "'", str85.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s91 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number96 + "' != '" + 1+ "'", number96.equals(1));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test108"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)'1');
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    java.lang.String str10 = gson9.toString();
    com.google.gson.internal.Excluder excluder11 = gson9.excluder();
    com.google.gson.JsonArray jsonArray12 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLenient();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    boolean b17 = jsonArray12.equals((java.lang.Object)gsonBuilder13);
    com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    boolean b23 = jsonArray18.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    int i30 = jsonPrimitive25.getAsInt();
    boolean b31 = jsonPrimitive25.getAsBoolean();
    jsonArray18.add((com.google.gson.JsonElement)jsonPrimitive25);
    jsonArray12.addAll(jsonArray18);
    java.math.BigInteger bigInteger34 = jsonArray18.getAsBigInteger();
    java.math.BigInteger bigInteger35 = jsonArray18.getAsBigInteger();
    java.math.BigInteger bigInteger36 = jsonArray18.getAsBigInteger();
    java.lang.String str37 = gson9.toJson((java.lang.Object)bigInteger36);
    com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder39 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.setLenient();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder39.excludeFieldsWithoutExposeAnnotation();
    boolean b43 = jsonArray38.equals((java.lang.Object)gsonBuilder39);
    com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b46 = jsonPrimitive45.isString();
    boolean b47 = jsonPrimitive45.isBoolean();
    java.lang.String str48 = jsonPrimitive45.getAsString();
    boolean b49 = jsonPrimitive45.isJsonObject();
    int i50 = jsonPrimitive45.getAsInt();
    boolean b51 = jsonPrimitive45.getAsBoolean();
    jsonArray38.add((com.google.gson.JsonElement)jsonPrimitive45);
    int i53 = jsonArray38.size();
    short s54 = jsonArray38.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    java.lang.Number number58 = jsonPrimitive56.getAsNumber();
    boolean b59 = jsonPrimitive56.isBoolean();
    boolean b60 = jsonArray38.remove((com.google.gson.JsonElement)jsonPrimitive56);
    jsonArray38.add((java.lang.Number)(byte)10);
    com.google.gson.JsonArray jsonArray63 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder64 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder65 = gsonBuilder64.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder66 = gsonBuilder64.setLenient();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder64.excludeFieldsWithoutExposeAnnotation();
    boolean b68 = jsonArray63.equals((java.lang.Object)gsonBuilder64);
    com.google.gson.JsonPrimitive jsonPrimitive70 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b71 = jsonPrimitive70.isString();
    boolean b72 = jsonPrimitive70.isBoolean();
    java.lang.String str73 = jsonPrimitive70.getAsString();
    boolean b74 = jsonPrimitive70.isJsonObject();
    int i75 = jsonPrimitive70.getAsInt();
    boolean b76 = jsonPrimitive70.getAsBoolean();
    jsonArray63.add((com.google.gson.JsonElement)jsonPrimitive70);
    int i78 = jsonArray63.size();
    int i79 = jsonArray63.getAsInt();
    boolean b80 = jsonArray63.isJsonPrimitive();
    boolean b81 = jsonArray38.remove((com.google.gson.JsonElement)jsonArray63);
    java.lang.Number number82 = jsonArray63.getAsNumber();
    int i83 = jsonArray63.size();
    com.google.gson.stream.JsonWriter jsonWriter84 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson9.toJson((com.google.gson.JsonElement)jsonArray63, jsonWriter84);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "1"+ "'", str48.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s54 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number58 + "' != '" + 1+ "'", number58.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "1"+ "'", str73.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number82 + "' != '" + 1+ "'", number82.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test109"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject14 = jsonObject0.getAsJsonObject("0");
    boolean b15 = jsonObject0.isJsonArray();
    boolean b17 = jsonObject0.has("0");
    com.google.gson.JsonElement jsonElement19 = jsonObject0.remove("null");
    int i20 = jsonObject0.size();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: ");
    com.google.gson.JsonObject jsonObject24 = jsonObject0.getAsJsonObject("[1,1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject24);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test110"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    float f24 = jsonArray6.getAsFloat();
    java.lang.Number number25 = jsonArray6.getAsNumber();
    boolean b26 = jsonArray6.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f24 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number25 + "' != '" + 1+ "'", number25.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test111"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    boolean b5 = jsonPrimitive1.getAsBoolean();
    java.math.BigInteger bigInteger6 = jsonPrimitive1.getAsBigInteger();
    long long7 = jsonPrimitive1.getAsLong();
    java.math.BigDecimal bigDecimal8 = jsonPrimitive1.getAsBigDecimal();
    short s9 = jsonPrimitive1.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test112"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder52 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setLenient();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithoutExposeAnnotation();
    boolean b56 = jsonArray51.equals((java.lang.Object)gsonBuilder52);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    jsonArray51.addAll(jsonArray57);
    java.math.BigInteger bigInteger73 = jsonArray57.getAsBigInteger();
    boolean b74 = jsonArray57.isJsonPrimitive();
    jsonArray57.add((java.lang.Character)'#');
    boolean b77 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray57);
    int i78 = jsonArray32.getAsInt();
    java.lang.String str79 = jsonArray32.getAsString();
    com.google.gson.JsonParseException jsonParseException81 = new com.google.gson.JsonParseException("\"a\"");
    boolean b82 = jsonArray32.equals((java.lang.Object)jsonParseException81);
    int i83 = jsonArray32.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "1"+ "'", str79.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test113"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.lang.Number number20 = jsonArray0.getAsNumber();
    boolean b21 = jsonArray0.isJsonObject();
    boolean b22 = jsonArray0.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test114"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    boolean b34 = gson7.serializeNulls();
    com.google.gson.internal.Excluder excluder35 = gson7.excluder();
    com.google.gson.internal.Excluder excluder36 = gson7.excluder();
    com.google.gson.LongSerializationPolicy longSerializationPolicy37 = com.google.gson.LongSerializationPolicy.STRING;
    java.lang.reflect.Type type38 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement39 = gson7.toJsonTree((java.lang.Object)longSerializationPolicy37, type38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy37);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test115"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.JsonElement jsonElement35 = jsonObject18.remove("");
    jsonObject18.addProperty("com.google.gson.stream.MalformedJsonException: 0", "");
    boolean b40 = jsonObject18.has("com.google.gson.stream.MalformedJsonException: hi!");
    com.google.gson.JsonPrimitive jsonPrimitive42 = jsonObject18.getAsJsonPrimitive("{}");
    // The following exception was thrown during execution in test generation
    try {
    boolean b43 = jsonPrimitive42.isJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive42);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test116"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder8.excludeFieldsWithModifiers(i_array14);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder8.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    int[] i_array24 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder21.excludeFieldsWithModifiers(i_array24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder8.excludeFieldsWithModifiers(i_array24);
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array27 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder8.setExclusionStrategies(exclusionStrategy_array27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test117"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array7 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy6 };
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder0.setExclusionStrategies(exclusionStrategy_array7);
    com.google.gson.Gson gson9 = gsonBuilder8.create();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test118"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.String str9 = gson7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test119"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("null");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("0");
    com.google.gson.stream.JsonReader jsonReader5 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse(jsonReader5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test120"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.disableHtmlEscaping();
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls7 = null;
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    char char23 = jsonArray8.getAsCharacter();
    com.google.gson.JsonElement jsonElement24 = null;
    jsonArray8.add(jsonElement24);
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b29 = jsonPrimitive28.isString();
    java.lang.Number number30 = jsonPrimitive28.getAsNumber();
    com.google.gson.JsonElement jsonElement31 = jsonArray8.set(0, (com.google.gson.JsonElement)jsonPrimitive28);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder6.registerTypeHierarchyAdapter(cls7, (java.lang.Object)jsonElement31);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number30 + "' != '" + 1+ "'", number30.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement31);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test121"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat(10, 0);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("\"4\"");
    com.google.gson.GsonBuilder gsonBuilder11 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    int[] i_array16 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder13.excludeFieldsWithModifiers(i_array16);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder8.excludeFieldsWithModifiers(i_array16);
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder19.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy26 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.setFieldNamingPolicy(fieldNamingPolicy26);
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy31 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder28.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy31);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder28.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder28.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy35 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder28.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy35);
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder25.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy35);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder8.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test122"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonArray jsonArray10 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder11 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.setLenient();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder11.excludeFieldsWithoutExposeAnnotation();
    boolean b15 = jsonArray10.equals((java.lang.Object)gsonBuilder11);
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b18 = jsonPrimitive17.isString();
    boolean b19 = jsonPrimitive17.isBoolean();
    java.lang.String str20 = jsonPrimitive17.getAsString();
    boolean b21 = jsonPrimitive17.isJsonObject();
    int i22 = jsonPrimitive17.getAsInt();
    boolean b23 = jsonPrimitive17.getAsBoolean();
    jsonArray10.add((com.google.gson.JsonElement)jsonPrimitive17);
    int i25 = jsonArray10.size();
    int i26 = jsonArray10.getAsInt();
    float f27 = jsonArray10.getAsFloat();
    java.lang.String str28 = jsonArray10.getAsString();
    java.lang.reflect.Type type29 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement30 = gson7.toJsonTree((java.lang.Object)str28, type29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "1"+ "'", str20.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f27 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test123"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    boolean b53 = jsonArray13.isJsonObject();
    boolean b54 = jsonArray13.isJsonObject();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number55 = jsonArray13.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test124"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    float f4 = jsonPrimitive1.getAsFloat();
    byte byte5 = jsonPrimitive1.getAsByte();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte5 == (byte)1);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test125"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException1 = new com.google.gson.stream.MalformedJsonException("hi!");
    java.lang.String str2 = malformedJsonException1.toString();
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException1);
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "com.google.gson.stream.MalformedJsonException: hi!"+ "'", str2.equals("com.google.gson.stream.MalformedJsonException: hi!"));

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test126"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.Gson gson5 = gsonBuilder4.create();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.excludeFieldsWithoutExposeAnnotation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test127"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    com.google.gson.JsonObject jsonObject26 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray28 = jsonObject26.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray30 = jsonObject26.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive33.getAsJsonPrimitive();
    jsonObject26.add("hi!", (com.google.gson.JsonElement)jsonPrimitive36);
    boolean b38 = jsonObject26.isJsonArray();
    com.google.gson.JsonElement jsonElement40 = jsonObject26.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive42 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d43 = jsonPrimitive42.getAsDouble();
    boolean b44 = jsonPrimitive42.isBoolean();
    boolean b45 = jsonObject26.equals((java.lang.Object)b44);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement46 = jsonObject26.entrySet();
    jsonObject26.addProperty("1", (java.lang.Character)'4');
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement50 = jsonObject26.entrySet();
    boolean b51 = jsonArray6.equals((java.lang.Object)jsonObject26);
    com.google.gson.JsonElement jsonElement53 = jsonObject26.remove("100");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray54 = jsonObject26.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement53);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test128"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy16 = gson7.fieldNamingStrategy();
    boolean b17 = gson7.serializeNulls();
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive("");
    boolean b20 = jsonPrimitive19.isJsonPrimitive();
    com.google.gson.JsonElement jsonElement21 = gson7.toJsonTree((java.lang.Object)jsonPrimitive19);
    com.google.gson.JsonObject jsonObject22 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray24 = jsonObject22.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray26 = jsonObject22.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b30 = jsonPrimitive29.isString();
    java.lang.Number number31 = jsonPrimitive29.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive32 = jsonPrimitive29.getAsJsonPrimitive();
    jsonObject22.add("hi!", (com.google.gson.JsonElement)jsonPrimitive32);
    boolean b34 = jsonObject22.isJsonArray();
    com.google.gson.JsonElement jsonElement36 = jsonObject22.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d39 = jsonPrimitive38.getAsDouble();
    boolean b40 = jsonPrimitive38.isBoolean();
    boolean b41 = jsonObject22.equals((java.lang.Object)b40);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement42 = jsonObject22.entrySet();
    com.google.gson.JsonArray jsonArray44 = jsonObject22.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement46 = jsonObject22.remove("hi!");
    java.lang.String str47 = gson7.toJson((java.lang.Object)jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number31 + "' != '" + 1+ "'", number31.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d39 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "1"+ "'", str47.equals("1"));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test129"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    boolean b4 = jsonPrimitive1.isNumber();
    boolean b5 = jsonPrimitive1.isBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test130"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("{\"hi!\":1}");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("com.google.gson.stream.MalformedJsonException");
    com.google.gson.stream.JsonReader jsonReader7 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse(jsonReader7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test131"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException1 = new com.google.gson.stream.MalformedJsonException("com.google.gson.stream.MalformedJsonException: hi!");

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test132"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    boolean b13 = jsonObject0.isJsonNull();
    com.google.gson.JsonObject jsonObject15 = jsonObject0.getAsJsonObject("{\"hi!\":1}");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject16 = jsonObject15.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject15);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test133"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder5.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test134"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    java.lang.String str15 = gson7.toString();
    boolean b16 = gson7.htmlSafe();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test135"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonArray jsonArray19 = jsonObject0.getAsJsonArray("null");
    com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder22 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.setLenient();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.excludeFieldsWithoutExposeAnnotation();
    boolean b26 = jsonArray21.equals((java.lang.Object)gsonBuilder22);
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b29 = jsonPrimitive28.isString();
    boolean b30 = jsonPrimitive28.isBoolean();
    java.lang.String str31 = jsonPrimitive28.getAsString();
    boolean b32 = jsonPrimitive28.isJsonObject();
    int i33 = jsonPrimitive28.getAsInt();
    boolean b34 = jsonPrimitive28.getAsBoolean();
    jsonArray21.add((com.google.gson.JsonElement)jsonPrimitive28);
    java.math.BigInteger bigInteger36 = jsonArray21.getAsBigInteger();
    com.google.gson.JsonArray jsonArray37 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder38 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder38.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.setLenient();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder38.excludeFieldsWithoutExposeAnnotation();
    boolean b42 = jsonArray37.equals((java.lang.Object)gsonBuilder38);
    com.google.gson.JsonPrimitive jsonPrimitive44 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b45 = jsonPrimitive44.isString();
    boolean b46 = jsonPrimitive44.isBoolean();
    java.lang.String str47 = jsonPrimitive44.getAsString();
    boolean b48 = jsonPrimitive44.isJsonObject();
    int i49 = jsonPrimitive44.getAsInt();
    boolean b50 = jsonPrimitive44.getAsBoolean();
    jsonArray37.add((com.google.gson.JsonElement)jsonPrimitive44);
    char char52 = jsonArray37.getAsCharacter();
    com.google.gson.JsonArray jsonArray53 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder54 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder54.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder54.setLenient();
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder54.excludeFieldsWithoutExposeAnnotation();
    boolean b58 = jsonArray53.equals((java.lang.Object)gsonBuilder54);
    com.google.gson.JsonPrimitive jsonPrimitive60 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b61 = jsonPrimitive60.isString();
    boolean b62 = jsonPrimitive60.isBoolean();
    java.lang.String str63 = jsonPrimitive60.getAsString();
    boolean b64 = jsonPrimitive60.isJsonObject();
    int i65 = jsonPrimitive60.getAsInt();
    boolean b66 = jsonPrimitive60.getAsBoolean();
    jsonArray53.add((com.google.gson.JsonElement)jsonPrimitive60);
    jsonArray37.addAll(jsonArray53);
    double d69 = jsonArray53.getAsDouble();
    jsonArray21.addAll(jsonArray53);
    short s71 = jsonArray53.getAsShort();
    java.lang.String str72 = jsonArray53.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive74 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d75 = jsonPrimitive74.getAsDouble();
    boolean b76 = jsonPrimitive74.isJsonObject();
    byte byte77 = jsonPrimitive74.getAsByte();
    int i78 = jsonPrimitive74.getAsInt();
    java.math.BigInteger bigInteger79 = jsonPrimitive74.getAsBigInteger();
    jsonArray53.add((java.lang.Number)bigInteger79);
    jsonObject0.addProperty("hi!", (java.lang.Number)bigInteger79);
    com.google.gson.JsonElement jsonElement83 = null;
    jsonObject0.add("{\"hi!\":1,\"{\\\"hi!\\\":1}\":\"1\"}", jsonElement83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "1"+ "'", str31.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "1"+ "'", str47.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "1"+ "'", str63.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d69 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s71 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "1"+ "'", str72.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d75 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte77 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger79);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test136"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    float f17 = jsonArray0.getAsFloat();
    java.lang.String str18 = jsonArray0.getAsString();
    double d19 = jsonArray0.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f17 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 1.0d);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test137"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    com.google.gson.LongSerializationPolicy longSerializationPolicy19 = com.google.gson.LongSerializationPolicy.DEFAULT;
    boolean b20 = jsonNull17.equals((java.lang.Object)longSerializationPolicy19);
    com.google.gson.JsonElement jsonElement22 = longSerializationPolicy19.serialize((java.lang.Long)(-1L));
    com.google.gson.JsonElement jsonElement24 = longSerializationPolicy19.serialize((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test138"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    java.lang.Number number26 = jsonPrimitive24.getAsNumber();
    long long27 = jsonPrimitive24.getAsLong();
    java.math.BigDecimal bigDecimal28 = jsonPrimitive24.getAsBigDecimal();
    jsonArray0.add((java.lang.Number)bigDecimal28);
    short s30 = jsonArray0.getAsShort();
    java.math.BigInteger bigInteger31 = jsonArray0.getAsBigInteger();
    java.math.BigDecimal bigDecimal32 = jsonArray0.getAsBigDecimal();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement33 = jsonArray0.iterator();
    com.google.gson.JsonObject jsonObject34 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray36 = jsonObject34.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray38 = jsonObject34.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive41 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b42 = jsonPrimitive41.isString();
    java.lang.Number number43 = jsonPrimitive41.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive44 = jsonPrimitive41.getAsJsonPrimitive();
    jsonObject34.add("hi!", (com.google.gson.JsonElement)jsonPrimitive44);
    jsonObject34.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject34.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive53 = jsonObject34.getAsJsonPrimitive("1");
    boolean b55 = jsonObject34.has("com.google.gson.stream.MalformedJsonException: hi!");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement56 = jsonObject34.entrySet();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement57 = jsonObject34.entrySet();
    jsonObject34.addProperty("com.google.gson.stream.MalformedJsonException: ", "");
    jsonArray0.add((com.google.gson.JsonElement)jsonObject34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number26 + "' != '" + 1+ "'", number26.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long27 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s30 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number43 + "' != '" + 1+ "'", number43.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement57);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test139"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject14 = jsonObject0.getAsJsonObject("0");
    boolean b15 = jsonObject0.isJsonArray();
    boolean b17 = jsonObject0.has("0");
    com.google.gson.JsonElement jsonElement19 = jsonObject0.remove("null");
    boolean b21 = jsonObject0.has("com.google.gson.stream.MalformedJsonException");
    com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setLenient();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.excludeFieldsWithoutExposeAnnotation();
    boolean b27 = jsonArray22.equals((java.lang.Object)gsonBuilder23);
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b30 = jsonPrimitive29.isString();
    boolean b31 = jsonPrimitive29.isBoolean();
    java.lang.String str32 = jsonPrimitive29.getAsString();
    boolean b33 = jsonPrimitive29.isJsonObject();
    int i34 = jsonPrimitive29.getAsInt();
    boolean b35 = jsonPrimitive29.getAsBoolean();
    jsonArray22.add((com.google.gson.JsonElement)jsonPrimitive29);
    java.math.BigInteger bigInteger37 = jsonArray22.getAsBigInteger();
    int i38 = jsonArray22.getAsInt();
    com.google.gson.JsonNull jsonNull39 = new com.google.gson.JsonNull();
    boolean b40 = jsonArray22.contains((com.google.gson.JsonElement)jsonNull39);
    boolean b41 = jsonObject0.equals((java.lang.Object)jsonNull39);
    boolean b43 = jsonObject0.has("100.0");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "1"+ "'", str32.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test140"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    java.lang.Number number13 = jsonPrimitive11.getAsNumber();
    long long14 = jsonPrimitive11.getAsLong();
    java.math.BigInteger bigInteger15 = jsonPrimitive11.getAsBigInteger();
    float f16 = jsonPrimitive11.getAsFloat();
    boolean b17 = jsonPrimitive11.getAsBoolean();
    java.lang.reflect.Type type18 = null;
    com.google.gson.stream.JsonWriter jsonWriter19 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson9.toJson((java.lang.Object)b17, type18, jsonWriter19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number13 + "' != '" + 1+ "'", number13.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f16 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test141"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    boolean b16 = jsonArray11.equals((java.lang.Object)gsonBuilder12);
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    int i23 = jsonPrimitive18.getAsInt();
    boolean b24 = jsonPrimitive18.getAsBoolean();
    jsonArray11.add((com.google.gson.JsonElement)jsonPrimitive18);
    boolean b26 = jsonArray11.getAsBoolean();
    java.lang.String str27 = jsonArray11.getAsString();
    int i28 = jsonArray11.getAsInt();
    java.lang.Appendable appendable29 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonArray11, appendable29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1"+ "'", str27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test142"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    java.io.Writer writer17 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter18 = gson7.newJsonWriter(writer17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test143"); }


    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException("{\"com.google.gson.stream.MalformedJsonException: hi!\":\"hi!\",\"[1]\":\"4\"}");

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test144"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonObject0.getAsJsonPrimitive("{\"hi!\":1}");
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive2);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test145"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.JsonArray jsonArray2 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder3 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.setLenient();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder3.excludeFieldsWithoutExposeAnnotation();
    boolean b7 = jsonArray2.equals((java.lang.Object)gsonBuilder3);
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy11 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement13 = longSerializationPolicy11.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder10.setLongSerializationPolicy(longSerializationPolicy11);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder3.setLongSerializationPolicy(longSerializationPolicy11);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder0.setLongSerializationPolicy(longSerializationPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test146"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    java.lang.Object obj17 = null;
    java.lang.reflect.Type type18 = null;
    com.google.gson.stream.JsonWriter jsonWriter19 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(obj17, type18, jsonWriter19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test147"); }


    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException("{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}");

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test148"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)'1');
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    java.lang.String str10 = gson9.toString();
    com.google.gson.internal.Excluder excluder11 = gson9.excluder();
    com.google.gson.JsonArray jsonArray12 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLenient();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    boolean b17 = jsonArray12.equals((java.lang.Object)gsonBuilder13);
    com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    boolean b23 = jsonArray18.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    int i30 = jsonPrimitive25.getAsInt();
    boolean b31 = jsonPrimitive25.getAsBoolean();
    jsonArray18.add((com.google.gson.JsonElement)jsonPrimitive25);
    jsonArray12.addAll(jsonArray18);
    java.math.BigInteger bigInteger34 = jsonArray18.getAsBigInteger();
    java.math.BigInteger bigInteger35 = jsonArray18.getAsBigInteger();
    java.math.BigInteger bigInteger36 = jsonArray18.getAsBigInteger();
    java.lang.String str37 = gson9.toJson((java.lang.Object)bigInteger36);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b40 = jsonPrimitive39.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder41 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder41.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder41.setLenient();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder41.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder41.disableInnerClassSerialization();
    boolean b46 = jsonPrimitive39.equals((java.lang.Object)gsonBuilder45);
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder45.setVersion((double)(short)10);
    java.lang.reflect.Type type49 = null;
    java.lang.Appendable appendable50 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson9.toJson((java.lang.Object)gsonBuilder48, type49, appendable50);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test149"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    boolean b24 = jsonObject0.isJsonObject();
    boolean b25 = jsonObject0.isJsonPrimitive();
    com.google.gson.JsonElement jsonElement27 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonPrimitive jsonPrimitive29 = jsonObject0.getAsJsonPrimitive("com.google.gson.JsonParseException: ");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive29);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test150"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    int i31 = jsonObject29.size();
    int i32 = jsonObject29.size();
    com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive35.getAsJsonPrimitive();
    int i37 = jsonPrimitive36.getAsInt();
    jsonObject29.add("{\"hi!\":1}", (com.google.gson.JsonElement)jsonPrimitive36);
    com.google.gson.JsonElement jsonElement40 = jsonObject29.remove("[10]");
    com.google.gson.JsonPrimitive jsonPrimitive42 = jsonObject29.getAsJsonPrimitive("10");
    com.google.gson.JsonElement jsonElement44 = jsonObject29.remove("\"4\"");
    com.google.gson.JsonElement jsonElement46 = jsonObject29.remove("1");
    // The following exception was thrown during execution in test generation
    try {
    byte byte47 = jsonObject29.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement46);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test151"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive32 = jsonObject29.getAsJsonPrimitive("0");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement33 = jsonObject29.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement33);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test152"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.JsonObject jsonObject16 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray18 = jsonObject16.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray20 = jsonObject16.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    java.lang.Number number25 = jsonPrimitive23.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive26 = jsonPrimitive23.getAsJsonPrimitive();
    jsonObject16.add("hi!", (com.google.gson.JsonElement)jsonPrimitive26);
    boolean b28 = jsonObject16.isJsonArray();
    com.google.gson.JsonElement jsonElement30 = jsonObject16.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d33 = jsonPrimitive32.getAsDouble();
    boolean b34 = jsonPrimitive32.isBoolean();
    boolean b35 = jsonObject16.equals((java.lang.Object)b34);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement36 = jsonObject16.entrySet();
    jsonObject16.addProperty("1", (java.lang.Character)'4');
    com.google.gson.JsonElement jsonElement41 = jsonObject16.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive43 = jsonObject16.getAsJsonPrimitive("[10]");
    java.lang.Appendable appendable44 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive43, appendable44);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number25 + "' != '" + 1+ "'", number25.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d33 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive43);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test153"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.addDeserializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy10 = null;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy10);
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy12);
    com.google.gson.Gson gson14 = gsonBuilder9.create();
    boolean b15 = gson14.htmlSafe();
    com.google.gson.JsonNull jsonNull16 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str17 = gson14.toJson((com.google.gson.JsonElement)jsonNull16);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy18 = gson14.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder19 = gson14.excluder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder0.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "null"+ "'", str17.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test154"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    java.lang.String str11 = gson7.toString();
    boolean b12 = gson7.htmlSafe();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    java.math.BigInteger bigInteger28 = jsonArray13.getAsBigInteger();
    int i29 = jsonArray13.getAsInt();
    com.google.gson.JsonNull jsonNull30 = new com.google.gson.JsonNull();
    boolean b31 = jsonArray13.contains((com.google.gson.JsonElement)jsonNull30);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement32 = jsonArray13.iterator();
    java.lang.Number number33 = jsonArray13.getAsNumber();
    float f34 = jsonArray13.getAsFloat();
    com.google.gson.JsonArray jsonArray35 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.setLenient();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder36.excludeFieldsWithoutExposeAnnotation();
    boolean b40 = jsonArray35.equals((java.lang.Object)gsonBuilder36);
    com.google.gson.JsonArray jsonArray41 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder42 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder42.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder42.setLenient();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder42.excludeFieldsWithoutExposeAnnotation();
    boolean b46 = jsonArray41.equals((java.lang.Object)gsonBuilder42);
    com.google.gson.JsonPrimitive jsonPrimitive48 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b49 = jsonPrimitive48.isString();
    boolean b50 = jsonPrimitive48.isBoolean();
    java.lang.String str51 = jsonPrimitive48.getAsString();
    boolean b52 = jsonPrimitive48.isJsonObject();
    int i53 = jsonPrimitive48.getAsInt();
    boolean b54 = jsonPrimitive48.getAsBoolean();
    jsonArray41.add((com.google.gson.JsonElement)jsonPrimitive48);
    jsonArray35.addAll(jsonArray41);
    java.math.BigInteger bigInteger57 = jsonArray41.getAsBigInteger();
    java.math.BigInteger bigInteger58 = jsonArray41.getAsBigInteger();
    java.math.BigInteger bigInteger59 = jsonArray41.getAsBigInteger();
    boolean b60 = jsonArray13.equals((java.lang.Object)bigInteger59);
    java.lang.String str61 = gson7.toJson((java.lang.Object)jsonArray13);
    com.google.gson.GsonBuilder gsonBuilder62 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder62.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder62.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy65 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder66 = gsonBuilder62.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy65);
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder62.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder62.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder70 = gsonBuilder68.setDateFormat(100);
    com.google.gson.ExclusionStrategy exclusionStrategy71 = null;
    com.google.gson.GsonBuilder gsonBuilder72 = gsonBuilder70.addSerializationExclusionStrategy(exclusionStrategy71);
    com.google.gson.GsonBuilder gsonBuilder73 = gsonBuilder72.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder74 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder75 = gsonBuilder74.serializeNulls();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy76 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder77 = gsonBuilder75.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy76);
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder73.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy76);
    java.lang.reflect.Type type79 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str80 = gson7.toJson((java.lang.Object)gsonBuilder73, type79);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number33 + "' != '" + 1+ "'", number33.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f34 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "[1]"+ "'", str61.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test155"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i2 = jsonPrimitive1.getAsInt();
    boolean b3 = jsonPrimitive1.getAsBoolean();
    char char4 = jsonPrimitive1.getAsCharacter();
    int i5 = jsonPrimitive1.getAsInt();
    long long6 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1L);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test156"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.serializeSpecialFloatingPointValues();
    com.google.gson.JsonElement jsonElement17 = gson6.toJsonTree((java.lang.Object)gsonBuilder16);
    com.google.gson.stream.JsonReader jsonReader18 = null;
    java.lang.reflect.Type type19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array20 = gson6.fromJson(jsonReader18, type19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement17);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test157"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    byte byte24 = jsonArray6.getAsByte();
    jsonArray6.add((java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    char char27 = jsonArray6.getAsCharacter();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte24 == (byte)1);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test158"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    int i17 = jsonArray0.getAsInt();
    short s18 = jsonArray0.getAsShort();
    com.google.gson.JsonObject jsonObject19 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray21 = jsonObject19.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray23 = jsonObject19.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    java.lang.Number number28 = jsonPrimitive26.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive29 = jsonPrimitive26.getAsJsonPrimitive();
    jsonObject19.add("hi!", (com.google.gson.JsonElement)jsonPrimitive29);
    boolean b31 = jsonObject19.isJsonArray();
    com.google.gson.JsonElement jsonElement33 = jsonObject19.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d36 = jsonPrimitive35.getAsDouble();
    boolean b37 = jsonPrimitive35.isBoolean();
    boolean b38 = jsonObject19.equals((java.lang.Object)b37);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement39 = jsonObject19.entrySet();
    com.google.gson.JsonArray jsonArray41 = jsonObject19.getAsJsonArray("1");
    int i42 = jsonObject19.size();
    boolean b43 = jsonObject19.isJsonObject();
    boolean b44 = jsonObject19.isJsonPrimitive();
    com.google.gson.JsonElement jsonElement46 = jsonObject19.remove("com.google.gson.stream.MalformedJsonException: 0");
    boolean b47 = jsonArray0.contains((com.google.gson.JsonElement)jsonObject19);
    com.google.gson.JsonElement jsonElement48 = null;
    boolean b49 = jsonArray0.remove(jsonElement48);
    float f50 = jsonArray0.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s18 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number28 + "' != '" + 1+ "'", number28.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d36 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f50 == 1.0f);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test159"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("{\"hi!\":1}");
    java.io.Reader reader5 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse(reader5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test160"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive16 = jsonPrimitive15.getAsJsonPrimitive();
    jsonObject0.add("com.google.gson.stream.MalformedJsonException: 0", (com.google.gson.JsonElement)jsonPrimitive16);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Boolean)false);
    com.google.gson.JsonElement jsonElement22 = jsonObject0.get("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement22);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test161"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy15 = null;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.addSerializationExclusionStrategy(exclusionStrategy15);
    com.google.gson.ExclusionStrategy exclusionStrategy17 = null;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder14.addSerializationExclusionStrategy(exclusionStrategy17);
    com.google.gson.Gson gson19 = gsonBuilder14.create();
    boolean b20 = gson19.serializeNulls();
    boolean b21 = gson19.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    java.lang.Number number27 = jsonPrimitive23.getAsNumber();
    long long28 = jsonPrimitive23.getAsLong();
    java.lang.String str29 = gson19.toJson((java.lang.Object)jsonPrimitive23);
    com.google.gson.JsonObject jsonObject30 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray32 = jsonObject30.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray34 = jsonObject30.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b38 = jsonPrimitive37.isString();
    java.lang.Number number39 = jsonPrimitive37.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive40 = jsonPrimitive37.getAsJsonPrimitive();
    jsonObject30.add("hi!", (com.google.gson.JsonElement)jsonPrimitive40);
    boolean b42 = jsonObject30.isJsonArray();
    com.google.gson.JsonElement jsonElement44 = jsonObject30.get("hi!");
    java.lang.String str45 = gson19.toJson((com.google.gson.JsonElement)jsonObject30);
    boolean b46 = gson19.serializeNulls();
    com.google.gson.internal.Excluder excluder47 = gson19.excluder();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str48 = gson7.toJson((java.lang.Object)gson19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long28 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number39 + "' != '" + 1+ "'", number39.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "{\"hi!\":1}"+ "'", str45.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder47);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test162"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    int i29 = jsonObject0.size();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject0.entrySet();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull31 = jsonObject0.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test163"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.remove("hi!");
    int i25 = jsonObject0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test164"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive4 = jsonPrimitive1.getAsJsonPrimitive();
    byte byte5 = jsonPrimitive1.getAsByte();
    float f6 = jsonPrimitive1.getAsFloat();
    int i7 = jsonPrimitive1.getAsInt();
    float f8 = jsonPrimitive1.getAsFloat();
    java.lang.String str9 = jsonPrimitive1.toString();
    boolean b10 = jsonPrimitive1.isJsonPrimitive();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte5 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f6 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f8 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1"+ "'", str9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test165"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    boolean b15 = jsonArray0.getAsBoolean();
    java.lang.String str16 = jsonArray0.getAsString();
    com.google.gson.JsonArray jsonArray17 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setLenient();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.excludeFieldsWithoutExposeAnnotation();
    boolean b22 = jsonArray17.equals((java.lang.Object)gsonBuilder18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    boolean b26 = jsonPrimitive24.isBoolean();
    java.lang.String str27 = jsonPrimitive24.getAsString();
    boolean b28 = jsonPrimitive24.isJsonObject();
    int i29 = jsonPrimitive24.getAsInt();
    boolean b30 = jsonPrimitive24.getAsBoolean();
    jsonArray17.add((com.google.gson.JsonElement)jsonPrimitive24);
    boolean b32 = jsonPrimitive24.isJsonArray();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive24);
    java.lang.String str34 = jsonPrimitive24.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1"+ "'", str27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "1"+ "'", str34.equals("1"));

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test166"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder52 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setLenient();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithoutExposeAnnotation();
    boolean b56 = jsonArray51.equals((java.lang.Object)gsonBuilder52);
    com.google.gson.JsonPrimitive jsonPrimitive58 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b59 = jsonPrimitive58.isString();
    boolean b60 = jsonPrimitive58.isBoolean();
    java.lang.String str61 = jsonPrimitive58.getAsString();
    boolean b62 = jsonPrimitive58.isJsonObject();
    int i63 = jsonPrimitive58.getAsInt();
    boolean b64 = jsonPrimitive58.getAsBoolean();
    jsonArray51.add((com.google.gson.JsonElement)jsonPrimitive58);
    char char66 = jsonArray51.getAsCharacter();
    byte byte67 = jsonArray51.getAsByte();
    java.math.BigDecimal bigDecimal68 = jsonArray51.getAsBigDecimal();
    boolean b69 = jsonArray32.equals((java.lang.Object)jsonArray51);
    java.math.BigDecimal bigDecimal70 = jsonArray32.getAsBigDecimal();
    int i71 = jsonArray32.getAsInt();
    byte byte72 = jsonArray32.getAsByte();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "1"+ "'", str61.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char66 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte67 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte72 == (byte)1);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test167"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy10 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder7.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy10);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy14 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.setFieldNamingPolicy(fieldNamingPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setFieldNamingPolicy(fieldNamingPolicy14);
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder6.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy21);
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy23);
    com.google.gson.Gson gson25 = gsonBuilder20.create();
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b28 = jsonPrimitive27.isString();
    boolean b29 = jsonPrimitive27.isBoolean();
    java.lang.String str30 = jsonPrimitive27.getAsString();
    boolean b31 = jsonPrimitive27.isJsonObject();
    java.math.BigDecimal bigDecimal32 = jsonPrimitive27.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement33 = gson25.toJsonTree((java.lang.Object)jsonPrimitive27);
    boolean b34 = gson25.serializeNulls();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy35 = gson25.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy36 = gson25.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder6.setFieldNamingStrategy(fieldNamingStrategy36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "1"+ "'", str30.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test168"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    byte byte16 = jsonArray0.getAsByte();
    char char17 = jsonArray0.getAsCharacter();
    jsonArray0.add("10");
    jsonArray0.add((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte16 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '1');

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test169"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive52 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d53 = jsonPrimitive52.getAsDouble();
    boolean b54 = jsonPrimitive52.isJsonObject();
    float f55 = jsonPrimitive52.getAsFloat();
    java.math.BigInteger bigInteger56 = jsonPrimitive52.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive57 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger56);
    jsonArray32.add((java.lang.Number)bigInteger56);
    jsonArray32.add((java.lang.Boolean)false);
    jsonArray32.add((java.lang.Character)'h');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d53 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f55 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger56);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test170"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    int i31 = jsonObject29.size();
    int i32 = jsonObject29.size();
    com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive35.getAsJsonPrimitive();
    int i37 = jsonPrimitive36.getAsInt();
    jsonObject29.add("{\"hi!\":1}", (com.google.gson.JsonElement)jsonPrimitive36);
    com.google.gson.JsonElement jsonElement40 = jsonObject29.remove("[10]");
    com.google.gson.JsonPrimitive jsonPrimitive42 = jsonObject29.getAsJsonPrimitive("10");
    com.google.gson.JsonPrimitive jsonPrimitive44 = jsonObject29.getAsJsonPrimitive("[1,1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive44);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test171"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    int[] i_array11 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder6.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder6.setDateFormat((int)(byte)0);
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    java.math.BigInteger bigInteger31 = jsonArray16.getAsBigInteger();
    int i32 = jsonArray16.getAsInt();
    com.google.gson.JsonNull jsonNull33 = new com.google.gson.JsonNull();
    boolean b34 = jsonArray16.contains((com.google.gson.JsonElement)jsonNull33);
    com.google.gson.LongSerializationPolicy longSerializationPolicy35 = com.google.gson.LongSerializationPolicy.DEFAULT;
    boolean b36 = jsonNull33.equals((java.lang.Object)longSerializationPolicy35);
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder15.setLongSerializationPolicy(longSerializationPolicy35);
    com.google.gson.Gson gson38 = gsonBuilder37.create();
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b41 = jsonPrimitive40.isString();
    boolean b42 = jsonPrimitive40.isBoolean();
    java.lang.String str43 = jsonPrimitive40.getAsString();
    boolean b44 = jsonPrimitive40.isJsonObject();
    java.math.BigDecimal bigDecimal45 = jsonPrimitive40.getAsBigDecimal();
    java.lang.String str46 = gson38.toJson((com.google.gson.JsonElement)jsonPrimitive40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "1"+ "'", str43.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "1"+ "'", str46.equals("1"));

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test172"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingPolicy(fieldNamingPolicy11);
    com.google.gson.Gson gson13 = gsonBuilder10.create();
    java.lang.String str14 = gson13.toString();
    java.lang.reflect.Type type16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable17 = gson13.fromJson("com.google.gson.JsonParseException: {\"hi!\":1}", type16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test173"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.getAsBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test174"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    boolean b21 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: hi!");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement22 = jsonObject0.entrySet();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement23 = jsonObject0.entrySet();
    com.google.gson.JsonObject jsonObject25 = jsonObject0.getAsJsonObject("com.google.gson.JsonParseException: {\"hi!\":1}");
    com.google.gson.JsonArray jsonArray26 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setLenient();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder27.excludeFieldsWithoutExposeAnnotation();
    boolean b31 = jsonArray26.equals((java.lang.Object)gsonBuilder27);
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    boolean b35 = jsonPrimitive33.isBoolean();
    java.lang.String str36 = jsonPrimitive33.getAsString();
    boolean b37 = jsonPrimitive33.isJsonObject();
    int i38 = jsonPrimitive33.getAsInt();
    boolean b39 = jsonPrimitive33.getAsBoolean();
    jsonArray26.add((com.google.gson.JsonElement)jsonPrimitive33);
    java.math.BigInteger bigInteger41 = jsonArray26.getAsBigInteger();
    int i42 = jsonArray26.getAsInt();
    com.google.gson.JsonNull jsonNull43 = new com.google.gson.JsonNull();
    boolean b44 = jsonArray26.contains((com.google.gson.JsonElement)jsonNull43);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement45 = jsonArray26.iterator();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement46 = jsonArray26.iterator();
    boolean b47 = jsonArray26.getAsBoolean();
    // The following exception was thrown during execution in test generation
    try {
    boolean b48 = jsonObject25.equals((java.lang.Object)b47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "1"+ "'", str36.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test175"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.setDateFormat((int)(byte)4, 0);
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.addSerializationExclusionStrategy(exclusionStrategy13);
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy26 = null;
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.addSerializationExclusionStrategy(exclusionStrategy26);
    com.google.gson.ExclusionStrategy exclusionStrategy28 = null;
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder25.addSerializationExclusionStrategy(exclusionStrategy28);
    com.google.gson.Gson gson30 = gsonBuilder25.create();
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    java.math.BigDecimal bigDecimal37 = jsonPrimitive32.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement38 = gson30.toJsonTree((java.lang.Object)jsonPrimitive32);
    com.google.gson.internal.Excluder excluder39 = gson30.excluder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder22.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder39);
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder15.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder39);
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder12.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder39);
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder9.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder39);
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder9.setLenient();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test176"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    int i6 = jsonPrimitive1.getAsInt();
    boolean b7 = jsonPrimitive1.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder8.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder13.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeSpecialFloatingPointValues();
    boolean b20 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder19.setDateFormat((int)'#', (int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test177"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable6 = null;
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("", throwable6);
    com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException7);
    malformedJsonException4.addSuppressed((java.lang.Throwable)jsonParseException7);
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException11 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException10);
    com.google.gson.JsonParseException jsonParseException12 = new com.google.gson.JsonParseException("10", (java.lang.Throwable)malformedJsonException11);
    com.google.gson.stream.MalformedJsonException malformedJsonException13 = new com.google.gson.stream.MalformedJsonException("[1,1]", (java.lang.Throwable)jsonParseException12);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test178"); }


    com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
    boolean b2 = jsonNull0.equals((java.lang.Object)(-1L));
    com.google.gson.JsonObject jsonObject3 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray5 = jsonObject3.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray7 = jsonObject3.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b11 = jsonPrimitive10.isString();
    java.lang.Number number12 = jsonPrimitive10.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive13 = jsonPrimitive10.getAsJsonPrimitive();
    jsonObject3.add("hi!", (com.google.gson.JsonElement)jsonPrimitive13);
    boolean b15 = jsonObject3.isJsonArray();
    com.google.gson.JsonElement jsonElement17 = jsonObject3.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d20 = jsonPrimitive19.getAsDouble();
    boolean b21 = jsonPrimitive19.isBoolean();
    boolean b22 = jsonObject3.equals((java.lang.Object)b21);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement23 = jsonObject3.entrySet();
    com.google.gson.JsonArray jsonArray25 = jsonObject3.getAsJsonArray("1");
    int i26 = jsonObject3.size();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement27 = jsonObject3.entrySet();
    boolean b28 = jsonNull0.equals((java.lang.Object)set_entry_str_jsonElement27);
    boolean b30 = jsonNull0.equals((java.lang.Object)0L);
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    double d37 = jsonPrimitive32.getAsDouble();
    boolean b38 = jsonPrimitive32.isString();
    byte byte39 = jsonPrimitive32.getAsByte();
    boolean b40 = jsonPrimitive32.isJsonPrimitive();
    boolean b41 = jsonNull0.equals((java.lang.Object)b40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number12 + "' != '" + 1+ "'", number12.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d37 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte39 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test179"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    int i31 = jsonObject29.size();
    jsonObject29.addProperty("1", "{\"hi!\":1}");
    com.google.gson.JsonArray jsonArray36 = jsonObject29.getAsJsonArray("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive40 = jsonPrimitive39.getAsJsonPrimitive();
    java.math.BigDecimal bigDecimal41 = jsonPrimitive40.getAsBigDecimal();
    jsonObject29.addProperty("{\"hi!\":1}", (java.lang.Number)bigDecimal41);
    com.google.gson.JsonPrimitive jsonPrimitive43 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test180"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)'1');
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    com.google.gson.stream.JsonReader jsonReader10 = null;
    java.lang.reflect.Type type11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array12 = gson9.fromJson(jsonReader10, type11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test181"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement20 = jsonArray0.iterator();
    boolean b21 = jsonArray0.getAsBoolean();
    com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setLenient();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.excludeFieldsWithoutExposeAnnotation();
    boolean b27 = jsonArray22.equals((java.lang.Object)gsonBuilder23);
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b30 = jsonPrimitive29.isString();
    boolean b31 = jsonPrimitive29.isBoolean();
    java.lang.String str32 = jsonPrimitive29.getAsString();
    boolean b33 = jsonPrimitive29.isJsonObject();
    int i34 = jsonPrimitive29.getAsInt();
    boolean b35 = jsonPrimitive29.getAsBoolean();
    jsonArray22.add((com.google.gson.JsonElement)jsonPrimitive29);
    java.math.BigInteger bigInteger37 = jsonArray22.getAsBigInteger();
    com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder39 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.setLenient();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder39.excludeFieldsWithoutExposeAnnotation();
    boolean b43 = jsonArray38.equals((java.lang.Object)gsonBuilder39);
    com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b46 = jsonPrimitive45.isString();
    boolean b47 = jsonPrimitive45.isBoolean();
    java.lang.String str48 = jsonPrimitive45.getAsString();
    boolean b49 = jsonPrimitive45.isJsonObject();
    int i50 = jsonPrimitive45.getAsInt();
    boolean b51 = jsonPrimitive45.getAsBoolean();
    jsonArray38.add((com.google.gson.JsonElement)jsonPrimitive45);
    char char53 = jsonArray38.getAsCharacter();
    com.google.gson.JsonArray jsonArray54 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder55 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder55.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder55.setLenient();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder55.excludeFieldsWithoutExposeAnnotation();
    boolean b59 = jsonArray54.equals((java.lang.Object)gsonBuilder55);
    com.google.gson.JsonPrimitive jsonPrimitive61 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b62 = jsonPrimitive61.isString();
    boolean b63 = jsonPrimitive61.isBoolean();
    java.lang.String str64 = jsonPrimitive61.getAsString();
    boolean b65 = jsonPrimitive61.isJsonObject();
    int i66 = jsonPrimitive61.getAsInt();
    boolean b67 = jsonPrimitive61.getAsBoolean();
    jsonArray54.add((com.google.gson.JsonElement)jsonPrimitive61);
    jsonArray38.addAll(jsonArray54);
    double d70 = jsonArray54.getAsDouble();
    jsonArray22.addAll(jsonArray54);
    java.lang.Number number72 = jsonArray54.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive74 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d75 = jsonPrimitive74.getAsDouble();
    boolean b76 = jsonPrimitive74.isJsonObject();
    float f77 = jsonPrimitive74.getAsFloat();
    java.math.BigInteger bigInteger78 = jsonPrimitive74.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive79 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger78);
    jsonArray54.add((java.lang.Number)bigInteger78);
    jsonArray54.add((java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive84 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b85 = jsonPrimitive84.getAsBoolean();
    java.lang.String str86 = jsonPrimitive84.getAsString();
    java.math.BigInteger bigInteger87 = jsonPrimitive84.getAsBigInteger();
    jsonArray54.add((java.lang.Number)bigInteger87);
    com.google.gson.JsonArray jsonArray89 = new com.google.gson.JsonArray();
    jsonArray54.addAll(jsonArray89);
    jsonArray0.addAll(jsonArray89);
    // The following exception was thrown during execution in test generation
    try {
    long long92 = jsonArray89.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "1"+ "'", str32.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "1"+ "'", str48.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "1"+ "'", str64.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d70 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number72 + "' != '" + 1+ "'", number72.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d75 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f77 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "1"+ "'", str86.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger87);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test182"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement5 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    boolean b12 = jsonArray7.equals((java.lang.Object)gsonBuilder8);
    com.google.gson.JsonPrimitive jsonPrimitive14 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b15 = jsonPrimitive14.isString();
    boolean b16 = jsonPrimitive14.isBoolean();
    java.lang.String str17 = jsonPrimitive14.getAsString();
    boolean b18 = jsonPrimitive14.isJsonObject();
    int i19 = jsonPrimitive14.getAsInt();
    boolean b20 = jsonPrimitive14.getAsBoolean();
    jsonArray7.add((com.google.gson.JsonElement)jsonPrimitive14);
    int i22 = jsonArray7.size();
    short s23 = jsonArray7.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    boolean b28 = jsonPrimitive25.isBoolean();
    boolean b29 = jsonArray7.remove((com.google.gson.JsonElement)jsonPrimitive25);
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b32 = jsonPrimitive31.isString();
    java.lang.Number number33 = jsonPrimitive31.getAsNumber();
    long long34 = jsonPrimitive31.getAsLong();
    java.math.BigDecimal bigDecimal35 = jsonPrimitive31.getAsBigDecimal();
    jsonArray7.add((java.lang.Number)bigDecimal35);
    jsonObject0.addProperty("{\"hi!\":1}", (java.lang.Number)bigDecimal35);
    jsonObject0.addProperty("com.google.gson.JsonParseException: {\"hi!\":1}", "0");
    com.google.gson.JsonPrimitive jsonPrimitive42 = jsonObject0.getAsJsonPrimitive("[1]");
    jsonObject0.addProperty("\"4\"", "4");
    com.google.gson.GsonBuilder gsonBuilder46 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder46.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder46.setLenient();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder48.setLenient();
    boolean b50 = jsonObject0.equals((java.lang.Object)gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s23 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number33 + "' != '" + 1+ "'", number33.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test183"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.serializeNulls();
    boolean b17 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    long long20 = jsonPrimitive19.getAsLong();
    java.lang.String str21 = jsonPrimitive19.getAsString();
    java.math.BigInteger bigInteger22 = jsonPrimitive19.getAsBigInteger();
    java.lang.String str23 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive19);
    com.google.gson.internal.Excluder excluder24 = gson7.excluder();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 4L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "4"+ "'", str21.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "\"4\""+ "'", str23.equals("\"4\""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder24);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test184"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    byte byte4 = jsonPrimitive1.getAsByte();
    int i5 = jsonPrimitive1.getAsInt();
    java.math.BigInteger bigInteger6 = jsonPrimitive1.getAsBigInteger();
    boolean b7 = jsonPrimitive1.isJsonPrimitive();
    long long8 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 4L);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test185"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1L);
    boolean b2 = jsonPrimitive1.isNumber();
    java.math.BigDecimal bigDecimal3 = jsonPrimitive1.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test186"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    boolean b24 = jsonObject0.isJsonObject();
    boolean b25 = jsonObject0.isJsonPrimitive();
    java.lang.String str26 = jsonObject0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "{\"hi!\":1}"+ "'", str26.equals("{\"hi!\":1}"));

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test187"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.lang.Number number20 = jsonArray0.getAsNumber();
    java.lang.String str21 = jsonArray0.toString();
    java.lang.Number number22 = jsonArray0.getAsNumber();
    boolean b23 = jsonArray0.isJsonNull();
    com.google.gson.JsonObject jsonObject24 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray26 = jsonObject24.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray28 = jsonObject24.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b32 = jsonPrimitive31.isString();
    java.lang.Number number33 = jsonPrimitive31.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive34 = jsonPrimitive31.getAsJsonPrimitive();
    jsonObject24.add("hi!", (com.google.gson.JsonElement)jsonPrimitive34);
    boolean b36 = jsonObject24.isJsonArray();
    com.google.gson.JsonElement jsonElement38 = jsonObject24.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d41 = jsonPrimitive40.getAsDouble();
    boolean b42 = jsonPrimitive40.isBoolean();
    boolean b43 = jsonObject24.equals((java.lang.Object)b42);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement44 = jsonObject24.entrySet();
    com.google.gson.JsonElement jsonElement46 = jsonObject24.remove("{\"hi!\":1}");
    int i47 = jsonObject24.size();
    com.google.gson.JsonPrimitive jsonPrimitive49 = jsonObject24.getAsJsonPrimitive("null");
    com.google.gson.JsonElement jsonElement51 = jsonObject24.get("com.google.gson.JsonParseException: ");
    jsonArray0.add(jsonElement51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[1]"+ "'", str21.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number33 + "' != '" + 1+ "'", number33.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d41 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement51);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test188"); }


    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException5 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException3.addSuppressed((java.lang.Throwable)jsonParseException5);
    java.lang.Throwable[] throwable_array7 = jsonParseException3.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException3);
    com.google.gson.stream.MalformedJsonException malformedJsonException11 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable13 = null;
    com.google.gson.JsonParseException jsonParseException14 = new com.google.gson.JsonParseException("", throwable13);
    com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException14);
    malformedJsonException11.addSuppressed((java.lang.Throwable)jsonParseException14);
    com.google.gson.stream.MalformedJsonException malformedJsonException17 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException11);
    malformedJsonException8.addSuppressed((java.lang.Throwable)malformedJsonException11);
    com.google.gson.JsonParseException jsonParseException19 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException8);
    com.google.gson.stream.MalformedJsonException malformedJsonException20 = new com.google.gson.stream.MalformedJsonException("true", (java.lang.Throwable)malformedJsonException8);
    java.lang.Throwable throwable22 = null;
    com.google.gson.JsonParseException jsonParseException23 = new com.google.gson.JsonParseException("", throwable22);
    java.lang.Throwable[] throwable_array24 = jsonParseException23.getSuppressed();
    malformedJsonException8.addSuppressed((java.lang.Throwable)jsonParseException23);
    com.google.gson.stream.MalformedJsonException malformedJsonException27 = new com.google.gson.stream.MalformedJsonException("com.google.gson.stream.MalformedJsonException: ");
    malformedJsonException8.addSuppressed((java.lang.Throwable)malformedJsonException27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array24);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test189"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setDateFormat(100);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("{\"hi!\":1}");
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder8.setDateFormat("{}");
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setDateFormat("\"4\"");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test190"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement20 = jsonArray0.iterator();
    int i21 = jsonArray0.getAsInt();
    com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
    jsonArray22.add((java.lang.Boolean)true);
    char char25 = jsonArray22.getAsCharacter();
    jsonArray0.addAll(jsonArray22);
    int i27 = jsonArray0.size();
    // The following exception was thrown during execution in test generation
    try {
    char char28 = jsonArray0.getAsCharacter();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == 't');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 2);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test191"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    com.google.gson.JsonElement jsonElement25 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: 0");
    jsonObject0.addProperty("1", "com.google.gson.stream.MalformedJsonException: hi!");
    com.google.gson.GsonBuilder gsonBuilder29 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy32 = null;
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder31.addSerializationExclusionStrategy(exclusionStrategy32);
    com.google.gson.ExclusionStrategy exclusionStrategy34 = null;
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder31.addSerializationExclusionStrategy(exclusionStrategy34);
    com.google.gson.Gson gson36 = gsonBuilder31.create();
    java.lang.String str37 = gson36.toString();
    java.lang.reflect.Type type39 = null;
    java.lang.Appendable appendable40 = gson36.fromJson("", type39);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy41 = gson36.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray42 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder43 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder43.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder43.setLenient();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder43.excludeFieldsWithoutExposeAnnotation();
    boolean b47 = jsonArray42.equals((java.lang.Object)gsonBuilder43);
    com.google.gson.JsonPrimitive jsonPrimitive49 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b50 = jsonPrimitive49.isString();
    boolean b51 = jsonPrimitive49.isBoolean();
    java.lang.String str52 = jsonPrimitive49.getAsString();
    boolean b53 = jsonPrimitive49.isJsonObject();
    int i54 = jsonPrimitive49.getAsInt();
    boolean b55 = jsonPrimitive49.getAsBoolean();
    jsonArray42.add((com.google.gson.JsonElement)jsonPrimitive49);
    int i57 = jsonArray42.size();
    com.google.gson.JsonArray jsonArray58 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder59 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder59.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder59.setLenient();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder59.excludeFieldsWithoutExposeAnnotation();
    boolean b63 = jsonArray58.equals((java.lang.Object)gsonBuilder59);
    com.google.gson.JsonPrimitive jsonPrimitive65 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b66 = jsonPrimitive65.isString();
    boolean b67 = jsonPrimitive65.isBoolean();
    java.lang.String str68 = jsonPrimitive65.getAsString();
    boolean b69 = jsonPrimitive65.isJsonObject();
    int i70 = jsonPrimitive65.getAsInt();
    boolean b71 = jsonPrimitive65.getAsBoolean();
    jsonArray58.add((com.google.gson.JsonElement)jsonPrimitive65);
    char char73 = jsonArray58.getAsCharacter();
    com.google.gson.JsonElement jsonElement74 = null;
    jsonArray58.add(jsonElement74);
    jsonArray42.addAll(jsonArray58);
    com.google.gson.JsonArray jsonArray77 = new com.google.gson.JsonArray();
    jsonArray77.add((java.lang.Boolean)true);
    jsonArray42.addAll(jsonArray77);
    com.google.gson.JsonElement jsonElement81 = gson36.toJsonTree((java.lang.Object)jsonArray42);
    com.google.gson.JsonArray jsonArray82 = jsonElement81.getAsJsonArray();
    boolean b83 = jsonObject0.equals((java.lang.Object)jsonArray82);
    jsonArray82.add((java.lang.Character)'h');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "1"+ "'", str52.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "1"+ "'", str68.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test192"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    int i17 = jsonArray0.getAsInt();
    short s18 = jsonArray0.getAsShort();
    java.lang.Number number19 = jsonArray0.getAsNumber();
    java.lang.String str20 = jsonArray0.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s18 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number19 + "' != '" + 1+ "'", number19.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "1"+ "'", str20.equals("1"));

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test193"); }


    java.lang.Throwable throwable3 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException(throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException4);
    java.lang.String str7 = malformedJsonException6.toString();
    com.google.gson.JsonParseException jsonParseException8 = new com.google.gson.JsonParseException("com.google.gson.stream.MalformedJsonException", (java.lang.Throwable)malformedJsonException6);
    com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException8);
    com.google.gson.JsonParseException jsonParseException10 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "com.google.gson.stream.MalformedJsonException: "+ "'", str7.equals("com.google.gson.stream.MalformedJsonException: "));

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test194"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive16 = jsonPrimitive15.getAsJsonPrimitive();
    jsonObject0.add("com.google.gson.stream.MalformedJsonException: 0", (com.google.gson.JsonElement)jsonPrimitive16);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("");
    boolean b20 = jsonObject0.isJsonObject();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test195"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    com.google.gson.JsonArray jsonArray17 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setLenient();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.excludeFieldsWithoutExposeAnnotation();
    boolean b22 = jsonArray17.equals((java.lang.Object)gsonBuilder18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    boolean b26 = jsonPrimitive24.isBoolean();
    java.lang.String str27 = jsonPrimitive24.getAsString();
    boolean b28 = jsonPrimitive24.isJsonObject();
    int i29 = jsonPrimitive24.getAsInt();
    boolean b30 = jsonPrimitive24.getAsBoolean();
    jsonArray17.add((com.google.gson.JsonElement)jsonPrimitive24);
    int i32 = jsonArray17.size();
    short s33 = jsonArray17.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b36 = jsonPrimitive35.isString();
    java.lang.Number number37 = jsonPrimitive35.getAsNumber();
    boolean b38 = jsonPrimitive35.isBoolean();
    boolean b39 = jsonArray17.remove((com.google.gson.JsonElement)jsonPrimitive35);
    com.google.gson.JsonPrimitive jsonPrimitive41 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b42 = jsonPrimitive41.isString();
    java.lang.Number number43 = jsonPrimitive41.getAsNumber();
    long long44 = jsonPrimitive41.getAsLong();
    java.math.BigDecimal bigDecimal45 = jsonPrimitive41.getAsBigDecimal();
    jsonArray17.add((java.lang.Number)bigDecimal45);
    short s47 = jsonArray17.getAsShort();
    java.math.BigInteger bigInteger48 = jsonArray17.getAsBigInteger();
    java.math.BigDecimal bigDecimal49 = jsonArray17.getAsBigDecimal();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement50 = jsonArray17.iterator();
    java.lang.reflect.Type type51 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException52 = gson7.fromJson((com.google.gson.JsonElement)jsonArray17, type51);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1"+ "'", str27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s33 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number37 + "' != '" + 1+ "'", number37.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number43 + "' != '" + 1+ "'", number43.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long44 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s47 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement50);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test196"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d54 = jsonPrimitive53.getAsDouble();
    boolean b55 = jsonPrimitive53.isJsonObject();
    byte byte56 = jsonPrimitive53.getAsByte();
    int i57 = jsonPrimitive53.getAsInt();
    java.math.BigInteger bigInteger58 = jsonPrimitive53.getAsBigInteger();
    jsonArray32.add((java.lang.Number)bigInteger58);
    com.google.gson.JsonArray jsonArray60 = jsonArray32.getAsJsonArray();
    com.google.gson.JsonObject jsonObject61 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray63 = jsonObject61.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray65 = jsonObject61.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive68 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b69 = jsonPrimitive68.isString();
    java.lang.Number number70 = jsonPrimitive68.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive71 = jsonPrimitive68.getAsJsonPrimitive();
    jsonObject61.add("hi!", (com.google.gson.JsonElement)jsonPrimitive71);
    boolean b73 = jsonObject61.isJsonArray();
    com.google.gson.JsonElement jsonElement75 = jsonObject61.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive77 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d78 = jsonPrimitive77.getAsDouble();
    boolean b79 = jsonPrimitive77.isBoolean();
    boolean b80 = jsonObject61.equals((java.lang.Object)b79);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement81 = jsonObject61.entrySet();
    com.google.gson.JsonArray jsonArray83 = jsonObject61.getAsJsonArray("1");
    int i84 = jsonObject61.size();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement85 = jsonObject61.entrySet();
    boolean b86 = jsonArray32.remove((com.google.gson.JsonElement)jsonObject61);
    java.lang.String str87 = jsonObject61.toString();
    com.google.gson.JsonElement jsonElement89 = jsonObject61.get("{}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte56 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number70 + "' != '" + 1+ "'", number70.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d78 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "{\"hi!\":1}"+ "'", str87.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement89);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test197"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isString();
    boolean b4 = jsonPrimitive1.isJsonObject();
    long long5 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1L);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test198"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    java.lang.String str13 = gson7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test199"); }


    java.lang.Throwable throwable3 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException(throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.JsonParseException jsonParseException8 = new com.google.gson.JsonParseException("");
    com.google.gson.JsonParseException jsonParseException9 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException8);
    malformedJsonException6.addSuppressed((java.lang.Throwable)jsonParseException8);
    com.google.gson.stream.MalformedJsonException malformedJsonException11 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException6);
    com.google.gson.stream.MalformedJsonException malformedJsonException12 = new com.google.gson.stream.MalformedJsonException("{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}", (java.lang.Throwable)malformedJsonException11);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test200"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = jsonArray32.getAsJsonArray();
    java.lang.String str52 = jsonArray32.getAsString();
    jsonArray32.add((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "1"+ "'", str52.equals("1"));

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test201"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d21 = jsonPrimitive20.getAsDouble();
    boolean b22 = jsonPrimitive20.isBoolean();
    boolean b23 = jsonNull17.equals((java.lang.Object)jsonPrimitive20);
    short s24 = jsonPrimitive20.getAsShort();
    boolean b25 = jsonPrimitive20.isJsonPrimitive();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test202"); }


    java.lang.Throwable throwable3 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException(throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException6);
    com.google.gson.JsonParseException jsonParseException8 = new com.google.gson.JsonParseException("[1,\"#\"]", (java.lang.Throwable)malformedJsonException6);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test203"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    boolean b19 = jsonArray0.isJsonNull();
    com.google.gson.JsonNull jsonNull20 = new com.google.gson.JsonNull();
    boolean b22 = jsonNull20.equals((java.lang.Object)(-1L));
    com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithoutExposeAnnotation();
    boolean b28 = jsonArray23.equals((java.lang.Object)gsonBuilder24);
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b31 = jsonPrimitive30.isString();
    boolean b32 = jsonPrimitive30.isBoolean();
    java.lang.String str33 = jsonPrimitive30.getAsString();
    boolean b34 = jsonPrimitive30.isJsonObject();
    int i35 = jsonPrimitive30.getAsInt();
    boolean b36 = jsonPrimitive30.getAsBoolean();
    jsonArray23.add((com.google.gson.JsonElement)jsonPrimitive30);
    int i38 = jsonArray23.size();
    jsonArray23.add((java.lang.Boolean)false);
    int i41 = jsonArray23.size();
    boolean b42 = jsonNull20.equals((java.lang.Object)jsonArray23);
    jsonArray0.addAll(jsonArray23);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger44 = jsonArray0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test204"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder2.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy8 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array9 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy8 };
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder2.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder1.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableHtmlEscaping();
    com.google.gson.Gson gson13 = gsonBuilder11.create();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test205"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    java.math.BigDecimal bigDecimal16 = jsonPrimitive9.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test206"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    int i34 = jsonObject18.size();
    int i35 = jsonObject18.size();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonObject18.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test207"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.serializeSpecialFloatingPointValues();
    com.google.gson.JsonElement jsonElement17 = gson6.toJsonTree((java.lang.Object)gsonBuilder16);
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setLenient();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder18.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder18.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder25 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.setLenient();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder25.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder25.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy31 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array32 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy31 };
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder25.setExclusionStrategies(exclusionStrategy_array32);
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder24.setExclusionStrategies(exclusionStrategy_array32);
    java.lang.reflect.Type type35 = null;
    java.lang.Appendable appendable36 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson6.toJson((java.lang.Object)exclusionStrategy_array32, type35, appendable36);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test208"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    int i23 = jsonArray8.size();
    short s24 = jsonArray8.getAsShort();
    int i25 = jsonArray8.getAsInt();
    com.google.gson.JsonElement jsonElement26 = gson6.toJsonTree((java.lang.Object)jsonArray8);
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d29 = jsonPrimitive28.getAsDouble();
    boolean b30 = jsonPrimitive28.isBoolean();
    boolean b31 = jsonPrimitive28.isJsonArray();
    java.lang.String str32 = gson6.toJson((com.google.gson.JsonElement)jsonPrimitive28);
    long long33 = jsonPrimitive28.getAsLong();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject34 = jsonPrimitive28.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\"4\""+ "'", str32.equals("\"4\""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 4L);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test209"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    com.google.gson.JsonObject jsonObject53 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray55 = jsonObject53.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray57 = jsonObject53.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement58 = jsonObject53.entrySet();
    java.lang.String str59 = gson7.toJson((com.google.gson.JsonElement)jsonObject53);
    boolean b60 = jsonObject53.isJsonNull();
    com.google.gson.GsonBuilder gsonBuilder61 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder61.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder61.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy64 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder65 = gsonBuilder61.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy64);
    com.google.gson.GsonBuilder gsonBuilder66 = gsonBuilder61.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder61.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder67.setDateFormat(100);
    com.google.gson.ExclusionStrategy exclusionStrategy70 = null;
    com.google.gson.GsonBuilder gsonBuilder71 = gsonBuilder69.addSerializationExclusionStrategy(exclusionStrategy70);
    com.google.gson.GsonBuilder gsonBuilder72 = gsonBuilder71.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder73 = gsonBuilder71.disableHtmlEscaping();
    boolean b74 = jsonObject53.equals((java.lang.Object)gsonBuilder73);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive75 = jsonObject53.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "{}"+ "'", str59.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test210"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    boolean b12 = gson7.htmlSafe();
    com.google.gson.JsonElement jsonElement13 = null;
    java.lang.Appendable appendable14 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(jsonElement13, appendable14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test211"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.disableHtmlEscaping();
    com.google.gson.ExclusionStrategy exclusionStrategy7 = null;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.addSerializationExclusionStrategy(exclusionStrategy7);
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.addDeserializationExclusionStrategy(exclusionStrategy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder8.setVersion((double)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test212"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    int[] i_array12 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.excludeFieldsWithModifiers(i_array12);
    int[] i_array18 = new int[] { '1', ' ', (short)1, '4' };
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder13.excludeFieldsWithModifiers(i_array18);
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder6.excludeFieldsWithModifiers(i_array18);
    com.google.gson.Gson gson21 = gsonBuilder20.create();
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive24 = jsonPrimitive23.getAsJsonPrimitive();
    boolean b25 = jsonPrimitive24.isJsonNull();
    boolean b26 = jsonPrimitive24.isString();
    java.math.BigInteger bigInteger27 = jsonPrimitive24.getAsBigInteger();
    java.lang.reflect.Type type28 = null;
    java.lang.Appendable appendable29 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson21.toJson((java.lang.Object)jsonPrimitive24, type28, appendable29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger27);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test213"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isBoolean();
    boolean b4 = jsonPrimitive1.isJsonArray();
    boolean b5 = jsonPrimitive1.isJsonObject();
    java.lang.Throwable throwable9 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException(throwable9);
    com.google.gson.stream.MalformedJsonException malformedJsonException11 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException10);
    com.google.gson.JsonParseException jsonParseException12 = new com.google.gson.JsonParseException("hi!", (java.lang.Throwable)malformedJsonException10);
    com.google.gson.stream.MalformedJsonException malformedJsonException13 = new com.google.gson.stream.MalformedJsonException("com.google.gson.JsonParseException: {\"hi!\":1}", (java.lang.Throwable)jsonParseException12);
    boolean b14 = jsonPrimitive1.equals((java.lang.Object)"com.google.gson.JsonParseException: {\"hi!\":1}");
    short s15 = jsonPrimitive1.getAsShort();
    boolean b16 = jsonPrimitive1.isBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s15 == (short)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test214"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    java.lang.String str17 = gson7.toString();
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    jsonObject18.addProperty("hi!", "1");
    com.google.gson.JsonArray jsonArray23 = jsonObject18.getAsJsonArray("0");
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls24 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException25 = gson7.fromJson((com.google.gson.JsonElement)jsonObject18, cls24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray23);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test215"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    com.google.gson.JsonPrimitive jsonPrimitive5 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal4);
    boolean b6 = jsonPrimitive5.isJsonObject();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive5.getAsBigDecimal();
    byte byte8 = jsonPrimitive5.getAsByte();
    boolean b9 = jsonPrimitive5.isString();
    short s10 = jsonPrimitive5.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte8 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s10 == (short)1);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test216"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonPrimitive();
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.disableInnerClassSerialization();
    boolean b17 = jsonObject0.equals((java.lang.Object)gsonBuilder13);
    boolean b19 = jsonObject0.has("[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test217"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.lang.Number number20 = jsonArray0.getAsNumber();
    java.lang.String str21 = jsonArray0.toString();
    java.lang.Number number22 = jsonArray0.getAsNumber();
    boolean b23 = jsonArray0.isJsonNull();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement24 = jsonArray0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[1]"+ "'", str21.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement24);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test218"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement20 = jsonArray0.iterator();
    int i21 = jsonArray0.getAsInt();
    com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
    jsonArray22.add((java.lang.Boolean)true);
    char char25 = jsonArray22.getAsCharacter();
    jsonArray0.addAll(jsonArray22);
    int i27 = jsonArray22.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == 't');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test219"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    jsonObject29.addProperty("0", (java.lang.Number)1.0f);
    com.google.gson.JsonArray jsonArray34 = jsonObject29.getAsJsonArray("{}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray34);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test220"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy7 = null;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.addSerializationExclusionStrategy(exclusionStrategy7);
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.addSerializationExclusionStrategy(exclusionStrategy9);
    com.google.gson.Gson gson11 = gsonBuilder6.create();
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    java.math.BigDecimal bigDecimal18 = jsonPrimitive13.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement19 = gson11.toJsonTree((java.lang.Object)jsonPrimitive13);
    com.google.gson.internal.Excluder excluder20 = gson11.excluder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder3.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder20);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder3.generateNonExecutableJson();
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.addDeserializationExclusionStrategy(exclusionStrategy23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test221"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.remove("{\"hi!\":1}");
    int i23 = jsonObject0.size();
    com.google.gson.JsonElement jsonElement25 = jsonObject0.get("1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement25);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test222"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    float f24 = jsonArray6.getAsFloat();
    int i25 = jsonArray6.getAsInt();
    char char26 = jsonArray6.getAsCharacter();
    int i27 = jsonArray6.size();
    com.google.gson.JsonObject jsonObject28 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray30 = jsonObject28.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray32 = jsonObject28.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b36 = jsonPrimitive35.isString();
    java.lang.Number number37 = jsonPrimitive35.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive38 = jsonPrimitive35.getAsJsonPrimitive();
    jsonObject28.add("hi!", (com.google.gson.JsonElement)jsonPrimitive38);
    jsonObject28.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject28.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive47 = jsonObject28.getAsJsonPrimitive("1");
    boolean b49 = jsonObject28.has("com.google.gson.stream.MalformedJsonException: hi!");
    int i50 = jsonObject28.size();
    com.google.gson.JsonElement jsonElement52 = jsonObject28.remove("4");
    boolean b53 = jsonArray6.contains(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f24 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number37 + "' != '" + 1+ "'", number37.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test223"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    java.lang.Number number18 = jsonArray0.getAsNumber();
    int i19 = jsonArray0.getAsInt();
    int i20 = jsonArray0.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number18 + "' != '" + 1+ "'", number18.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test224"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("com.google.gson.JsonParseException: com.google.gson.JsonParseException: ");

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test225"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    float f4 = jsonPrimitive1.getAsFloat();
    byte byte5 = jsonPrimitive1.getAsByte();
    short s6 = jsonPrimitive1.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte5 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test226"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    int[] i_array11 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy14 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLongSerializationPolicy(longSerializationPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy14);
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy21 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.setFieldNamingPolicy(fieldNamingPolicy21);
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.excludeFieldsWithoutExposeAnnotation();
    int[] i_array24 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.excludeFieldsWithModifiers(i_array24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder16.excludeFieldsWithModifiers(i_array24);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableHtmlEscaping();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test227"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    float f24 = jsonArray6.getAsFloat();
    java.math.BigInteger bigInteger25 = jsonArray6.getAsBigInteger();
    char char26 = jsonArray6.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f24 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '1');

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test228"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.setDateFormat((int)(byte)4, 0);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder6.setDateFormat((int)(byte)4, (int)'t');
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setDateFormat("{\"hi!\":1,\"com.google.gson.stream.MalformedJsonException: \":\"4\",\"null\":false}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test229"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    int i23 = jsonArray8.size();
    short s24 = jsonArray8.getAsShort();
    int i25 = jsonArray8.getAsInt();
    com.google.gson.JsonElement jsonElement26 = gson6.toJsonTree((java.lang.Object)jsonArray8);
    jsonArray8.add("{\"hi!\":1,\"com.google.gson.stream.MalformedJsonException: \":\"4\",\"null\":false}");
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    int i44 = jsonArray29.size();
    short s45 = jsonArray29.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b48 = jsonPrimitive47.isString();
    java.lang.Number number49 = jsonPrimitive47.getAsNumber();
    boolean b50 = jsonPrimitive47.isBoolean();
    boolean b51 = jsonArray29.remove((com.google.gson.JsonElement)jsonPrimitive47);
    com.google.gson.JsonArray jsonArray52 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder53 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder53.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder53.setLenient();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder53.excludeFieldsWithoutExposeAnnotation();
    boolean b57 = jsonArray52.equals((java.lang.Object)gsonBuilder53);
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    boolean b61 = jsonPrimitive59.isBoolean();
    java.lang.String str62 = jsonPrimitive59.getAsString();
    boolean b63 = jsonPrimitive59.isJsonObject();
    int i64 = jsonPrimitive59.getAsInt();
    boolean b65 = jsonPrimitive59.getAsBoolean();
    jsonArray52.add((com.google.gson.JsonElement)jsonPrimitive59);
    int i67 = jsonArray52.size();
    short s68 = jsonArray52.getAsShort();
    int i69 = jsonArray52.getAsInt();
    jsonArray29.addAll(jsonArray52);
    int i71 = jsonArray52.getAsInt();
    long long72 = jsonArray52.getAsLong();
    java.math.BigInteger bigInteger73 = jsonArray52.getAsBigInteger();
    boolean b74 = jsonArray8.remove((com.google.gson.JsonElement)jsonArray52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s45 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number49 + "' != '" + 1+ "'", number49.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "1"+ "'", str62.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s68 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long72 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test230"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    com.google.gson.JsonElement jsonElement19 = null;
    jsonObject0.add("[true]", jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test231"); }


    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException4);
    java.lang.String str6 = jsonParseException4.toString();
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("true", (java.lang.Throwable)jsonParseException4);
    java.lang.Throwable throwable12 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException13 = new com.google.gson.stream.MalformedJsonException(throwable12);
    com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException13);
    com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException13);
    com.google.gson.JsonParseException jsonParseException16 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException15);
    com.google.gson.stream.MalformedJsonException malformedJsonException17 = new com.google.gson.stream.MalformedJsonException("false", (java.lang.Throwable)jsonParseException16);
    com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("true", (java.lang.Throwable)malformedJsonException17);
    jsonParseException7.addSuppressed((java.lang.Throwable)malformedJsonException17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "com.google.gson.JsonParseException: {\"hi!\":1}"+ "'", str6.equals("com.google.gson.JsonParseException: {\"hi!\":1}"));

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test232"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)'1');
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    java.lang.String str10 = gson9.toString();
    com.google.gson.internal.Excluder excluder11 = gson9.excluder();
    com.google.gson.JsonArray jsonArray12 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLenient();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    boolean b17 = jsonArray12.equals((java.lang.Object)gsonBuilder13);
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b20 = jsonPrimitive19.isString();
    boolean b21 = jsonPrimitive19.isBoolean();
    java.lang.String str22 = jsonPrimitive19.getAsString();
    boolean b23 = jsonPrimitive19.isJsonObject();
    int i24 = jsonPrimitive19.getAsInt();
    boolean b25 = jsonPrimitive19.getAsBoolean();
    jsonArray12.add((com.google.gson.JsonElement)jsonPrimitive19);
    int i27 = jsonArray12.size();
    short s28 = jsonArray12.getAsShort();
    java.lang.Appendable appendable29 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson9.toJson((com.google.gson.JsonElement)jsonArray12, appendable29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "1"+ "'", str22.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s28 == (short)1);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test233"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    boolean b12 = gson7.htmlSafe();
    boolean b13 = gson7.htmlSafe();
    com.google.gson.JsonObject jsonObject14 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray16 = jsonObject14.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray18 = jsonObject14.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    java.lang.Number number23 = jsonPrimitive21.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive24 = jsonPrimitive21.getAsJsonPrimitive();
    jsonObject14.add("hi!", (com.google.gson.JsonElement)jsonPrimitive24);
    boolean b26 = jsonObject14.isJsonArray();
    com.google.gson.JsonObject jsonObject27 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray29 = jsonObject27.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray31 = jsonObject27.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    java.lang.Number number36 = jsonPrimitive34.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive37 = jsonPrimitive34.getAsJsonPrimitive();
    jsonObject27.add("hi!", (com.google.gson.JsonElement)jsonPrimitive37);
    boolean b39 = jsonObject27.isJsonArray();
    com.google.gson.JsonElement jsonElement41 = jsonObject27.get("hi!");
    boolean b42 = jsonObject14.equals((java.lang.Object)jsonElement41);
    com.google.gson.JsonObject jsonObject43 = jsonObject14.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement44 = jsonObject43.entrySet();
    int i45 = jsonObject43.size();
    int i46 = jsonObject43.size();
    com.google.gson.JsonPrimitive jsonPrimitive49 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive50 = jsonPrimitive49.getAsJsonPrimitive();
    int i51 = jsonPrimitive50.getAsInt();
    jsonObject43.add("{\"hi!\":1}", (com.google.gson.JsonElement)jsonPrimitive50);
    com.google.gson.JsonElement jsonElement53 = gson7.toJsonTree((java.lang.Object)jsonObject43);
    java.lang.String str54 = gson7.toString();
    boolean b55 = gson7.htmlSafe();
    com.google.gson.stream.JsonReader jsonReader56 = null;
    java.lang.reflect.Type type57 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array58 = gson7.fromJson(jsonReader56, type57);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number23 + "' != '" + 1+ "'", number23.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number36 + "' != '" + 1+ "'", number36.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test234"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    boolean b23 = jsonArray6.isJsonPrimitive();
    short s24 = jsonArray6.getAsShort();
    java.math.BigDecimal bigDecimal25 = jsonArray6.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test235"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy7 = gson6.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)(byte)1);
    java.lang.Appendable appendable10 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson6.toJson((com.google.gson.JsonElement)jsonPrimitive9, appendable10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy7);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test236"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    boolean b21 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: hi!");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement22 = jsonObject0.entrySet();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement23 = jsonObject0.entrySet();
    jsonObject0.addProperty("[true]", (java.lang.Character)'h');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement23);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test237"); }


    com.google.gson.JsonNull jsonNull0 = com.google.gson.JsonNull.INSTANCE;
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException5 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException3.addSuppressed((java.lang.Throwable)jsonParseException5);
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("null", (java.lang.Throwable)jsonParseException3);
    java.lang.String str8 = jsonParseException3.toString();
    boolean b9 = jsonNull0.equals((java.lang.Object)str8);
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setLenient();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder12.setPrettyPrinting();
    boolean b17 = jsonNull0.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    boolean b23 = jsonArray18.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    int i30 = jsonPrimitive25.getAsInt();
    boolean b31 = jsonPrimitive25.getAsBoolean();
    jsonArray18.add((com.google.gson.JsonElement)jsonPrimitive25);
    int i33 = jsonArray18.size();
    com.google.gson.JsonArray jsonArray34 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder35 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder35.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder35.setLenient();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder35.excludeFieldsWithoutExposeAnnotation();
    boolean b39 = jsonArray34.equals((java.lang.Object)gsonBuilder35);
    com.google.gson.JsonPrimitive jsonPrimitive41 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b42 = jsonPrimitive41.isString();
    boolean b43 = jsonPrimitive41.isBoolean();
    java.lang.String str44 = jsonPrimitive41.getAsString();
    boolean b45 = jsonPrimitive41.isJsonObject();
    int i46 = jsonPrimitive41.getAsInt();
    boolean b47 = jsonPrimitive41.getAsBoolean();
    jsonArray34.add((com.google.gson.JsonElement)jsonPrimitive41);
    char char49 = jsonArray34.getAsCharacter();
    com.google.gson.JsonElement jsonElement50 = null;
    jsonArray34.add(jsonElement50);
    jsonArray18.addAll(jsonArray34);
    com.google.gson.JsonElement jsonElement54 = jsonArray18.remove((int)(short)0);
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive57 = jsonPrimitive56.getAsJsonPrimitive();
    int i58 = jsonPrimitive57.getAsInt();
    boolean b59 = jsonArray18.contains((com.google.gson.JsonElement)jsonPrimitive57);
    int i60 = jsonArray18.size();
    boolean b61 = jsonNull0.equals((java.lang.Object)jsonArray18);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement62 = jsonArray18.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "com.google.gson.JsonParseException: hi!"+ "'", str8.equals("com.google.gson.JsonParseException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "1"+ "'", str44.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char49 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement62);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test238"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy11 = null;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.addSerializationExclusionStrategy(exclusionStrategy11);
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder10.addSerializationExclusionStrategy(exclusionStrategy13);
    com.google.gson.Gson gson15 = gsonBuilder10.create();
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b18 = jsonPrimitive17.isString();
    boolean b19 = jsonPrimitive17.isBoolean();
    java.lang.String str20 = jsonPrimitive17.getAsString();
    boolean b21 = jsonPrimitive17.isJsonObject();
    java.math.BigDecimal bigDecimal22 = jsonPrimitive17.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement23 = gson15.toJsonTree((java.lang.Object)jsonPrimitive17);
    com.google.gson.internal.Excluder excluder24 = gson15.excluder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder7.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder0.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder24);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy33 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setFieldNamingPolicy(fieldNamingPolicy33);
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder27.setFieldNamingPolicy(fieldNamingPolicy33);
    com.google.gson.LongSerializationPolicy longSerializationPolicy36 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement38 = longSerializationPolicy36.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder35.setLongSerializationPolicy(longSerializationPolicy36);
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder35.setVersion((double)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "1"+ "'", str20.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test239"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'t');
    boolean b2 = jsonPrimitive1.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test240"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    boolean b21 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: hi!");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement22 = jsonObject0.entrySet();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement23 = jsonObject0.entrySet();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull24 = jsonObject0.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement23);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test241"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    int i17 = jsonArray0.getAsInt();
    short s18 = jsonArray0.getAsShort();
    com.google.gson.JsonObject jsonObject19 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray21 = jsonObject19.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray23 = jsonObject19.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    java.lang.Number number28 = jsonPrimitive26.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive29 = jsonPrimitive26.getAsJsonPrimitive();
    jsonObject19.add("hi!", (com.google.gson.JsonElement)jsonPrimitive29);
    boolean b31 = jsonObject19.isJsonArray();
    com.google.gson.JsonElement jsonElement33 = jsonObject19.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d36 = jsonPrimitive35.getAsDouble();
    boolean b37 = jsonPrimitive35.isBoolean();
    boolean b38 = jsonObject19.equals((java.lang.Object)b37);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement39 = jsonObject19.entrySet();
    com.google.gson.JsonArray jsonArray41 = jsonObject19.getAsJsonArray("1");
    int i42 = jsonObject19.size();
    boolean b43 = jsonObject19.isJsonObject();
    boolean b44 = jsonObject19.isJsonPrimitive();
    com.google.gson.JsonElement jsonElement46 = jsonObject19.remove("com.google.gson.stream.MalformedJsonException: 0");
    boolean b47 = jsonArray0.contains((com.google.gson.JsonElement)jsonObject19);
    boolean b49 = jsonObject19.has("{\"hi!\":1,\"{\\\"hi!\\\":1}\":\"1\"}");
    com.google.gson.JsonElement jsonElement51 = jsonObject19.remove("10");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s18 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number28 + "' != '" + 1+ "'", number28.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d36 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement51);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test242"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException("false", (java.lang.Throwable)malformedJsonException2);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test243"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.setLenient();
    com.google.gson.Gson gson4 = gsonBuilder3.create();
    java.lang.Throwable throwable6 = null;
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("", throwable6);
    com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException7);
    java.lang.Throwable[] throwable_array9 = jsonParseException7.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException7);
    com.google.gson.JsonParseException jsonParseException11 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException7);
    java.lang.Appendable appendable12 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson4.toJson((java.lang.Object)jsonParseException7, appendable12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array9);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test244"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement5 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    boolean b12 = jsonArray7.equals((java.lang.Object)gsonBuilder8);
    com.google.gson.JsonPrimitive jsonPrimitive14 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b15 = jsonPrimitive14.isString();
    boolean b16 = jsonPrimitive14.isBoolean();
    java.lang.String str17 = jsonPrimitive14.getAsString();
    boolean b18 = jsonPrimitive14.isJsonObject();
    int i19 = jsonPrimitive14.getAsInt();
    boolean b20 = jsonPrimitive14.getAsBoolean();
    jsonArray7.add((com.google.gson.JsonElement)jsonPrimitive14);
    int i22 = jsonArray7.size();
    short s23 = jsonArray7.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    boolean b28 = jsonPrimitive25.isBoolean();
    boolean b29 = jsonArray7.remove((com.google.gson.JsonElement)jsonPrimitive25);
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b32 = jsonPrimitive31.isString();
    java.lang.Number number33 = jsonPrimitive31.getAsNumber();
    long long34 = jsonPrimitive31.getAsLong();
    java.math.BigDecimal bigDecimal35 = jsonPrimitive31.getAsBigDecimal();
    jsonArray7.add((java.lang.Number)bigDecimal35);
    jsonObject0.addProperty("{\"hi!\":1}", (java.lang.Number)bigDecimal35);
    com.google.gson.JsonArray jsonArray39 = jsonObject0.getAsJsonArray("com.google.gson.JsonParseException: [1,1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s23 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number33 + "' != '" + 1+ "'", number33.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray39);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test245"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException1 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable3 = null;
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("", throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException4);
    malformedJsonException1.addSuppressed((java.lang.Throwable)jsonParseException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException4);
    java.lang.String str8 = malformedJsonException7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "com.google.gson.stream.MalformedJsonException"+ "'", str8.equals("com.google.gson.stream.MalformedJsonException"));

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test246"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    boolean b24 = jsonObject0.isJsonObject();
    boolean b25 = jsonObject0.isJsonPrimitive();
    com.google.gson.JsonElement jsonElement27 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonArray jsonArray29 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    java.lang.Number number34 = jsonPrimitive32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive35 = jsonPrimitive32.getAsJsonPrimitive();
    byte byte36 = jsonPrimitive32.getAsByte();
    float f37 = jsonPrimitive32.getAsFloat();
    int i38 = jsonPrimitive32.getAsInt();
    boolean b39 = jsonPrimitive32.getAsBoolean();
    java.math.BigDecimal bigDecimal40 = jsonPrimitive32.getAsBigDecimal();
    jsonObject0.addProperty("{\"hi!\":1,\"com.google.gson.stream.MalformedJsonException: \":\"4\",\"null\":false}", (java.lang.Number)bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number34 + "' != '" + 1+ "'", number34.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte36 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f37 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test247"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder5.setFieldNamingPolicy(fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy19 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder16.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy19);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder16.disableHtmlEscaping();
    com.google.gson.ExclusionStrategy exclusionStrategy22 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array23 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy22 };
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder16.setExclusionStrategies(exclusionStrategy_array23);
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder5.setExclusionStrategies(exclusionStrategy_array23);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.disableHtmlEscaping();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test248"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder5.setFieldNamingPolicy(fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.serializeNulls();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy19 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy19);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder16.setFieldNamingPolicy(fieldNamingPolicy19);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.enableComplexMapKeySerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy24 = null;
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.addDeserializationExclusionStrategy(exclusionStrategy24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test249"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    boolean b18 = jsonArray0.getAsBoolean();
    com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    boolean b24 = jsonArray19.equals((java.lang.Object)gsonBuilder20);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    int i31 = jsonPrimitive26.getAsInt();
    boolean b32 = jsonPrimitive26.getAsBoolean();
    jsonArray19.add((com.google.gson.JsonElement)jsonPrimitive26);
    java.math.BigInteger bigInteger34 = jsonArray19.getAsBigInteger();
    int i35 = jsonArray19.getAsInt();
    com.google.gson.JsonNull jsonNull36 = new com.google.gson.JsonNull();
    boolean b37 = jsonArray19.contains((com.google.gson.JsonElement)jsonNull36);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement38 = jsonArray19.iterator();
    java.lang.Number number39 = jsonArray19.getAsNumber();
    jsonArray0.addAll(jsonArray19);
    java.math.BigInteger bigInteger41 = jsonArray19.getAsBigInteger();
    int i42 = jsonArray19.size();
    java.math.BigDecimal bigDecimal43 = jsonArray19.getAsBigDecimal();
    boolean b45 = jsonArray19.equals((java.lang.Object)10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number39 + "' != '" + 1+ "'", number39.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test250"); }


    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException("false");
    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException1);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test251"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.disableInnerClassSerialization();
    java.lang.reflect.Type type4 = null;
    com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    boolean b10 = jsonArray5.equals((java.lang.Object)gsonBuilder6);
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b13 = jsonPrimitive12.isString();
    boolean b14 = jsonPrimitive12.isBoolean();
    java.lang.String str15 = jsonPrimitive12.getAsString();
    boolean b16 = jsonPrimitive12.isJsonObject();
    int i17 = jsonPrimitive12.getAsInt();
    boolean b18 = jsonPrimitive12.getAsBoolean();
    jsonArray5.add((com.google.gson.JsonElement)jsonPrimitive12);
    int i20 = jsonArray5.size();
    com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder22 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.setLenient();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.excludeFieldsWithoutExposeAnnotation();
    boolean b26 = jsonArray21.equals((java.lang.Object)gsonBuilder22);
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b29 = jsonPrimitive28.isString();
    boolean b30 = jsonPrimitive28.isBoolean();
    java.lang.String str31 = jsonPrimitive28.getAsString();
    boolean b32 = jsonPrimitive28.isJsonObject();
    int i33 = jsonPrimitive28.getAsInt();
    boolean b34 = jsonPrimitive28.getAsBoolean();
    jsonArray21.add((com.google.gson.JsonElement)jsonPrimitive28);
    char char36 = jsonArray21.getAsCharacter();
    com.google.gson.JsonElement jsonElement37 = null;
    jsonArray21.add(jsonElement37);
    jsonArray5.addAll(jsonArray21);
    com.google.gson.GsonBuilder gsonBuilder41 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder41.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder41.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy44 = null;
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder43.addSerializationExclusionStrategy(exclusionStrategy44);
    com.google.gson.ExclusionStrategy exclusionStrategy46 = null;
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder43.addSerializationExclusionStrategy(exclusionStrategy46);
    com.google.gson.Gson gson48 = gsonBuilder43.create();
    java.lang.String str49 = gson48.toString();
    java.lang.reflect.Type type51 = null;
    java.lang.Appendable appendable52 = gson48.fromJson("", type51);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy53 = gson48.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray54 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder55 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder55.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder55.setLenient();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder55.excludeFieldsWithoutExposeAnnotation();
    boolean b59 = jsonArray54.equals((java.lang.Object)gsonBuilder55);
    com.google.gson.JsonPrimitive jsonPrimitive61 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b62 = jsonPrimitive61.isString();
    boolean b63 = jsonPrimitive61.isBoolean();
    java.lang.String str64 = jsonPrimitive61.getAsString();
    boolean b65 = jsonPrimitive61.isJsonObject();
    int i66 = jsonPrimitive61.getAsInt();
    boolean b67 = jsonPrimitive61.getAsBoolean();
    jsonArray54.add((com.google.gson.JsonElement)jsonPrimitive61);
    int i69 = jsonArray54.size();
    com.google.gson.JsonArray jsonArray70 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder71 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder72 = gsonBuilder71.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder73 = gsonBuilder71.setLenient();
    com.google.gson.GsonBuilder gsonBuilder74 = gsonBuilder71.excludeFieldsWithoutExposeAnnotation();
    boolean b75 = jsonArray70.equals((java.lang.Object)gsonBuilder71);
    com.google.gson.JsonPrimitive jsonPrimitive77 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b78 = jsonPrimitive77.isString();
    boolean b79 = jsonPrimitive77.isBoolean();
    java.lang.String str80 = jsonPrimitive77.getAsString();
    boolean b81 = jsonPrimitive77.isJsonObject();
    int i82 = jsonPrimitive77.getAsInt();
    boolean b83 = jsonPrimitive77.getAsBoolean();
    jsonArray70.add((com.google.gson.JsonElement)jsonPrimitive77);
    char char85 = jsonArray70.getAsCharacter();
    com.google.gson.JsonElement jsonElement86 = null;
    jsonArray70.add(jsonElement86);
    jsonArray54.addAll(jsonArray70);
    com.google.gson.JsonArray jsonArray89 = new com.google.gson.JsonArray();
    jsonArray89.add((java.lang.Boolean)true);
    jsonArray54.addAll(jsonArray89);
    com.google.gson.JsonElement jsonElement93 = gson48.toJsonTree((java.lang.Object)jsonArray54);
    com.google.gson.JsonElement jsonElement94 = jsonArray5.set((int)(byte)0, (com.google.gson.JsonElement)jsonArray54);
    com.google.gson.JsonArray jsonArray95 = jsonArray54.getAsJsonArray();
    com.google.gson.JsonElement jsonElement97 = jsonArray54.get((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder98 = gsonBuilder3.registerTypeAdapter(type4, (java.lang.Object)jsonArray54);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "1"+ "'", str31.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "1"+ "'", str64.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "1"+ "'", str80.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char85 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement97);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test252"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    boolean b51 = jsonArray32.isJsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b54 = jsonPrimitive53.isString();
    boolean b55 = jsonPrimitive53.isBoolean();
    java.lang.String str56 = jsonPrimitive53.getAsString();
    java.lang.Number number57 = jsonPrimitive53.getAsNumber();
    long long58 = jsonPrimitive53.getAsLong();
    java.lang.Number number59 = jsonPrimitive53.getAsNumber();
    java.math.BigInteger bigInteger60 = jsonPrimitive53.getAsBigInteger();
    float f61 = jsonPrimitive53.getAsFloat();
    boolean b62 = jsonArray32.equals((java.lang.Object)jsonPrimitive53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "1"+ "'", str56.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number57 + "' != '" + 1+ "'", number57.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long58 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number59 + "' != '" + 1+ "'", number59.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f61 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test253"); }


    java.lang.Throwable throwable1 = null;
    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("", throwable1);
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException2);
    java.lang.Throwable[] throwable_array4 = jsonParseException2.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException2);
    java.lang.String str6 = malformedJsonException5.toString();
    java.lang.Throwable throwable8 = null;
    com.google.gson.JsonParseException jsonParseException9 = new com.google.gson.JsonParseException("", throwable8);
    com.google.gson.JsonParseException jsonParseException10 = new com.google.gson.JsonParseException(throwable8);
    com.google.gson.JsonParseException jsonParseException11 = new com.google.gson.JsonParseException(throwable8);
    malformedJsonException5.addSuppressed((java.lang.Throwable)jsonParseException11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "com.google.gson.stream.MalformedJsonException"+ "'", str6.equals("com.google.gson.stream.MalformedJsonException"));

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test254"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.lang.Number number20 = jsonArray0.getAsNumber();
    boolean b21 = jsonArray0.isJsonObject();
    java.lang.String str22 = jsonArray0.getAsString();
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setLenient();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder23.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    int[] i_array34 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithModifiers(i_array34);
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder29.excludeFieldsWithModifiers(i_array34);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder29.setDateFormat((int)(byte)0);
    com.google.gson.JsonArray jsonArray39 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder40 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder40.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder40.setLenient();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder40.excludeFieldsWithoutExposeAnnotation();
    boolean b44 = jsonArray39.equals((java.lang.Object)gsonBuilder40);
    com.google.gson.JsonPrimitive jsonPrimitive46 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b47 = jsonPrimitive46.isString();
    boolean b48 = jsonPrimitive46.isBoolean();
    java.lang.String str49 = jsonPrimitive46.getAsString();
    boolean b50 = jsonPrimitive46.isJsonObject();
    int i51 = jsonPrimitive46.getAsInt();
    boolean b52 = jsonPrimitive46.getAsBoolean();
    jsonArray39.add((com.google.gson.JsonElement)jsonPrimitive46);
    java.math.BigInteger bigInteger54 = jsonArray39.getAsBigInteger();
    int i55 = jsonArray39.getAsInt();
    com.google.gson.JsonNull jsonNull56 = new com.google.gson.JsonNull();
    boolean b57 = jsonArray39.contains((com.google.gson.JsonElement)jsonNull56);
    com.google.gson.LongSerializationPolicy longSerializationPolicy58 = com.google.gson.LongSerializationPolicy.DEFAULT;
    boolean b59 = jsonNull56.equals((java.lang.Object)longSerializationPolicy58);
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder38.setLongSerializationPolicy(longSerializationPolicy58);
    boolean b61 = jsonArray0.equals((java.lang.Object)longSerializationPolicy58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "1"+ "'", str22.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "1"+ "'", str49.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test255"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    com.google.gson.JsonElement jsonElement25 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: 0");
    boolean b27 = jsonObject0.has("4");
    boolean b28 = jsonObject0.isJsonObject();
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger29 = jsonObject0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test256"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive("\"\"");
    java.lang.String str11 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\"\\\"\\\"\""+ "'", str11.equals("\"\\\"\\\"\""));

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test257"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    jsonObject0.addProperty("{\"hi!\":1}", "1");
    com.google.gson.JsonElement jsonElement19 = jsonObject0.remove("4");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setLenient();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder21.setDateFormat((int)'1', (int)'4');
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setDateFormat((int)'#');
    boolean b30 = jsonObject0.equals((java.lang.Object)gsonBuilder27);
    java.lang.String str31 = jsonObject0.toString();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement32 = jsonObject0.entrySet();
    // The following exception was thrown during execution in test generation
    try {
    short s33 = jsonObject0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "{\"hi!\":1,\"{\\\"hi!\\\":1}\":\"1\"}"+ "'", str31.equals("{\"hi!\":1,\"{\\\"hi!\\\":1}\":\"1\"}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement32);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test258"); }


    java.lang.Throwable throwable3 = null;
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("", throwable3);
    java.lang.Throwable[] throwable_array5 = jsonParseException4.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("{\"hi!\":1}", (java.lang.Throwable)jsonParseException4);
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException4);
    java.lang.Throwable[] throwable_array8 = jsonParseException7.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}", (java.lang.Throwable)jsonParseException7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array8);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test259"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonObject jsonObject1 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray3 = jsonObject1.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray5 = jsonObject1.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b9 = jsonPrimitive8.isString();
    java.lang.Number number10 = jsonPrimitive8.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive11 = jsonPrimitive8.getAsJsonPrimitive();
    jsonObject1.add("hi!", (com.google.gson.JsonElement)jsonPrimitive11);
    boolean b13 = jsonObject1.isJsonArray();
    boolean b14 = jsonObject0.equals((java.lang.Object)b13);
    com.google.gson.JsonObject jsonObject16 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray18 = jsonObject16.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray20 = jsonObject16.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    java.lang.Number number25 = jsonPrimitive23.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive26 = jsonPrimitive23.getAsJsonPrimitive();
    jsonObject16.add("hi!", (com.google.gson.JsonElement)jsonPrimitive26);
    boolean b28 = jsonObject16.isJsonArray();
    com.google.gson.JsonElement jsonElement30 = jsonObject16.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d33 = jsonPrimitive32.getAsDouble();
    boolean b34 = jsonPrimitive32.isBoolean();
    boolean b35 = jsonObject16.equals((java.lang.Object)b34);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement36 = jsonObject16.entrySet();
    com.google.gson.JsonArray jsonArray38 = jsonObject16.getAsJsonArray("1");
    int i39 = jsonObject16.size();
    boolean b40 = jsonObject16.isJsonObject();
    jsonObject16.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Number)1L);
    com.google.gson.JsonPrimitive jsonPrimitive46 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b47 = jsonPrimitive46.isString();
    java.lang.Number number48 = jsonPrimitive46.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive49 = jsonPrimitive46.getAsJsonPrimitive();
    boolean b50 = jsonPrimitive49.isString();
    java.math.BigDecimal bigDecimal51 = jsonPrimitive49.getAsBigDecimal();
    jsonObject16.addProperty("hi!", (java.lang.Number)bigDecimal51);
    jsonObject0.addProperty("com.google.gson.JsonParseException: hi!", (java.lang.Number)bigDecimal51);
    com.google.gson.GsonBuilder gsonBuilder54 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder54.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder54.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy57 = null;
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder56.addSerializationExclusionStrategy(exclusionStrategy57);
    com.google.gson.ExclusionStrategy exclusionStrategy59 = null;
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder56.addSerializationExclusionStrategy(exclusionStrategy59);
    com.google.gson.Gson gson61 = gsonBuilder56.create();
    java.lang.String str62 = gson61.toString();
    java.lang.reflect.Type type64 = null;
    java.lang.Appendable appendable65 = gson61.fromJson("", type64);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy66 = gson61.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder67 = gson61.excluder();
    boolean b68 = jsonObject0.equals((java.lang.Object)excluder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number10 + "' != '" + 1+ "'", number10.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number25 + "' != '" + 1+ "'", number25.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d33 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number48 + "' != '" + 1+ "'", number48.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test260"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setPrettyPrinting();
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder7.setDateFormat((int)'1', (int)'4');
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy17 = null;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.addSerializationExclusionStrategy(exclusionStrategy17);
    com.google.gson.ExclusionStrategy exclusionStrategy19 = null;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder16.addSerializationExclusionStrategy(exclusionStrategy19);
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setLenient();
    int[] i_array25 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.excludeFieldsWithModifiers(i_array25);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder23.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy28 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setLongSerializationPolicy(longSerializationPolicy28);
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder20.setLongSerializationPolicy(longSerializationPolicy28);
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder13.setLongSerializationPolicy(longSerializationPolicy28);
    com.google.gson.JsonElement jsonElement33 = longSerializationPolicy28.serialize((java.lang.Long)1L);
    com.google.gson.JsonElement jsonElement35 = longSerializationPolicy28.serialize((java.lang.Long)(-1L));
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder2.setLongSerializationPolicy(longSerializationPolicy28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test261"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    byte byte16 = jsonArray0.getAsByte();
    boolean b17 = jsonArray0.getAsBoolean();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject18 = jsonArray0.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte16 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test262"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isBoolean();
    boolean b4 = jsonPrimitive1.isJsonArray();
    boolean b5 = jsonPrimitive1.isJsonObject();
    java.lang.Throwable throwable9 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException(throwable9);
    com.google.gson.stream.MalformedJsonException malformedJsonException11 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException10);
    com.google.gson.JsonParseException jsonParseException12 = new com.google.gson.JsonParseException("hi!", (java.lang.Throwable)malformedJsonException10);
    com.google.gson.stream.MalformedJsonException malformedJsonException13 = new com.google.gson.stream.MalformedJsonException("com.google.gson.JsonParseException: {\"hi!\":1}", (java.lang.Throwable)jsonParseException12);
    boolean b14 = jsonPrimitive1.equals((java.lang.Object)"com.google.gson.JsonParseException: {\"hi!\":1}");
    java.lang.Number number15 = jsonPrimitive1.getAsNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number15);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test263"); }


    com.google.gson.LongSerializationPolicy longSerializationPolicy0 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement2 = longSerializationPolicy0.serialize((java.lang.Long)(-1L));
    com.google.gson.JsonElement jsonElement4 = longSerializationPolicy0.serialize((java.lang.Long)4L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test264"); }


    java.lang.Throwable throwable4 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException(throwable4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException5);
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException5);
    com.google.gson.JsonParseException jsonParseException8 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException7);
    com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("false", (java.lang.Throwable)jsonParseException8);
    java.lang.Throwable[] throwable_array10 = malformedJsonException9.getSuppressed();
    com.google.gson.JsonParseException jsonParseException11 = new com.google.gson.JsonParseException("100", (java.lang.Throwable)malformedJsonException9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array10);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test265"); }


    java.lang.Throwable throwable3 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException(throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException4);
    java.lang.String str7 = malformedJsonException6.toString();
    com.google.gson.JsonParseException jsonParseException8 = new com.google.gson.JsonParseException("com.google.gson.stream.MalformedJsonException", (java.lang.Throwable)malformedJsonException6);
    java.lang.Throwable[] throwable_array9 = malformedJsonException6.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "com.google.gson.stream.MalformedJsonException: "+ "'", str7.equals("com.google.gson.stream.MalformedJsonException: "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array9);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test266"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.JsonArray jsonArray12 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLenient();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    boolean b17 = jsonArray12.equals((java.lang.Object)gsonBuilder13);
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b20 = jsonPrimitive19.isString();
    boolean b21 = jsonPrimitive19.isBoolean();
    java.lang.String str22 = jsonPrimitive19.getAsString();
    boolean b23 = jsonPrimitive19.isJsonObject();
    int i24 = jsonPrimitive19.getAsInt();
    boolean b25 = jsonPrimitive19.getAsBoolean();
    jsonArray12.add((com.google.gson.JsonElement)jsonPrimitive19);
    java.math.BigInteger bigInteger27 = jsonArray12.getAsBigInteger();
    com.google.gson.JsonArray jsonArray28 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder29 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.setLenient();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.excludeFieldsWithoutExposeAnnotation();
    boolean b33 = jsonArray28.equals((java.lang.Object)gsonBuilder29);
    com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b36 = jsonPrimitive35.isString();
    boolean b37 = jsonPrimitive35.isBoolean();
    java.lang.String str38 = jsonPrimitive35.getAsString();
    boolean b39 = jsonPrimitive35.isJsonObject();
    int i40 = jsonPrimitive35.getAsInt();
    boolean b41 = jsonPrimitive35.getAsBoolean();
    jsonArray28.add((com.google.gson.JsonElement)jsonPrimitive35);
    char char43 = jsonArray28.getAsCharacter();
    com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder45 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder45.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder45.setLenient();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder45.excludeFieldsWithoutExposeAnnotation();
    boolean b49 = jsonArray44.equals((java.lang.Object)gsonBuilder45);
    com.google.gson.JsonPrimitive jsonPrimitive51 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b52 = jsonPrimitive51.isString();
    boolean b53 = jsonPrimitive51.isBoolean();
    java.lang.String str54 = jsonPrimitive51.getAsString();
    boolean b55 = jsonPrimitive51.isJsonObject();
    int i56 = jsonPrimitive51.getAsInt();
    boolean b57 = jsonPrimitive51.getAsBoolean();
    jsonArray44.add((com.google.gson.JsonElement)jsonPrimitive51);
    jsonArray28.addAll(jsonArray44);
    double d60 = jsonArray44.getAsDouble();
    jsonArray12.addAll(jsonArray44);
    short s62 = jsonArray44.getAsShort();
    java.lang.String str63 = jsonArray44.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive65 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d66 = jsonPrimitive65.getAsDouble();
    java.lang.Number number67 = jsonPrimitive65.getAsNumber();
    jsonArray44.add(number67);
    com.google.gson.JsonElement jsonElement70 = jsonArray44.get((int)(byte)1);
    com.google.gson.JsonElement jsonElement71 = gson7.toJsonTree((java.lang.Object)jsonElement70);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy72 = gson7.fieldNamingStrategy();
    java.lang.Class<java.lang.reflect.Type> cls73 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type74 = gson7.getAdapter(cls73);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "1"+ "'", str22.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "1"+ "'", str38.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "1"+ "'", str54.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d60 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s62 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "1"+ "'", str63.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d66 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy72);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test267"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy3 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement5 = longSerializationPolicy3.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.setLongSerializationPolicy(longSerializationPolicy3);
    com.google.gson.JsonElement jsonElement8 = longSerializationPolicy3.serialize((java.lang.Long)0L);
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy3.serialize((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test268"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("hi!");
    char char2 = jsonPrimitive1.getAsCharacter();
    java.lang.Object obj3 = null;
    boolean b4 = jsonPrimitive1.equals(obj3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char2 == 'h');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test269"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    int i17 = jsonArray0.getAsInt();
    short s18 = jsonArray0.getAsShort();
    int i19 = jsonArray0.size();
    short s20 = jsonArray0.getAsShort();
    java.lang.Number number21 = jsonArray0.getAsNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s18 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s20 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number21 + "' != '" + 1+ "'", number21.equals(1));

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test270"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive33.getAsJsonPrimitive();
    float f37 = jsonPrimitive36.getAsFloat();
    float f38 = jsonPrimitive36.getAsFloat();
    jsonObject29.add("hi!", (com.google.gson.JsonElement)jsonPrimitive36);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal40 = jsonObject29.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f37 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f38 == 1.0f);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test271"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    long long4 = jsonPrimitive1.getAsLong();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    float f6 = jsonPrimitive1.getAsFloat();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive1.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f6 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test272"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    boolean b3 = jsonPrimitive2.isJsonNull();
    java.lang.String str4 = jsonPrimitive2.getAsString();
    byte byte5 = jsonPrimitive2.getAsByte();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte5 == (byte)1);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test273"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    long long4 = jsonPrimitive1.getAsLong();
    java.math.BigDecimal bigDecimal5 = jsonPrimitive1.getAsBigDecimal();
    com.google.gson.JsonPrimitive jsonPrimitive6 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test274"); }


    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException4);
    java.lang.Throwable[] throwable_array6 = jsonParseException2.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException2);
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable12 = null;
    com.google.gson.JsonParseException jsonParseException13 = new com.google.gson.JsonParseException("", throwable12);
    com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException13);
    malformedJsonException10.addSuppressed((java.lang.Throwable)jsonParseException13);
    com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException10);
    malformedJsonException7.addSuppressed((java.lang.Throwable)malformedJsonException10);
    com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException10);
    java.lang.Throwable throwable22 = null;
    com.google.gson.JsonParseException jsonParseException23 = new com.google.gson.JsonParseException("", throwable22);
    java.lang.Throwable[] throwable_array24 = jsonParseException23.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException25 = new com.google.gson.stream.MalformedJsonException("{\"hi!\":1}", (java.lang.Throwable)jsonParseException23);
    com.google.gson.stream.MalformedJsonException malformedJsonException26 = new com.google.gson.stream.MalformedJsonException("[10]", (java.lang.Throwable)jsonParseException23);
    malformedJsonException18.addSuppressed((java.lang.Throwable)jsonParseException23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array24);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test275"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy5 = com.google.gson.LongSerializationPolicy.STRING;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setLongSerializationPolicy(longSerializationPolicy5);
    com.google.gson.JsonElement jsonElement8 = longSerializationPolicy5.serialize((java.lang.Long)0L);
    java.math.BigInteger bigInteger9 = jsonElement8.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger9);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test276"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder2.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy8 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array9 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy8 };
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder2.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder1.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder1.setFieldNamingStrategy(fieldNamingStrategy12);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls14 = null;
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy22 = null;
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.addSerializationExclusionStrategy(exclusionStrategy22);
    com.google.gson.ExclusionStrategy exclusionStrategy24 = null;
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder21.addSerializationExclusionStrategy(exclusionStrategy24);
    com.google.gson.Gson gson26 = gsonBuilder21.create();
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b29 = jsonPrimitive28.isString();
    boolean b30 = jsonPrimitive28.isBoolean();
    java.lang.String str31 = jsonPrimitive28.getAsString();
    boolean b32 = jsonPrimitive28.isJsonObject();
    java.math.BigDecimal bigDecimal33 = jsonPrimitive28.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement34 = gson26.toJsonTree((java.lang.Object)jsonPrimitive28);
    com.google.gson.internal.Excluder excluder35 = gson26.excluder();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder18.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder35);
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder18.serializeNulls();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder13.registerTypeHierarchyAdapter(cls14, (java.lang.Object)gsonBuilder18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "1"+ "'", str31.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test277"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive32 = jsonObject29.getAsJsonPrimitive("0");
    com.google.gson.JsonArray jsonArray34 = jsonObject29.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b38 = jsonPrimitive37.isString();
    boolean b39 = jsonPrimitive37.isJsonArray();
    boolean b40 = jsonPrimitive37.getAsBoolean();
    java.math.BigInteger bigInteger41 = jsonPrimitive37.getAsBigInteger();
    jsonObject29.addProperty("[10]", (java.lang.Number)bigInteger41);
    com.google.gson.GsonBuilder gsonBuilder44 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder44.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder44.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy47 = null;
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder46.addSerializationExclusionStrategy(exclusionStrategy47);
    com.google.gson.ExclusionStrategy exclusionStrategy49 = null;
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder46.addSerializationExclusionStrategy(exclusionStrategy49);
    com.google.gson.Gson gson51 = gsonBuilder46.create();
    boolean b52 = gson51.serializeNulls();
    boolean b53 = gson51.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy54 = gson51.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy55 = gson51.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive57 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b58 = jsonPrimitive57.isString();
    boolean b59 = jsonPrimitive57.isBoolean();
    java.lang.String str60 = jsonPrimitive57.getAsString();
    char char61 = jsonPrimitive57.getAsCharacter();
    long long62 = jsonPrimitive57.getAsLong();
    com.google.gson.JsonElement jsonElement63 = gson51.toJsonTree((java.lang.Object)jsonPrimitive57);
    jsonObject29.add("true", jsonElement63);
    boolean b65 = jsonObject29.isJsonPrimitive();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "1"+ "'", str60.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char61 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long62 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test278"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.math.BigDecimal bigDecimal51 = jsonArray32.getAsBigDecimal();
    short s52 = jsonArray32.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive54 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive55 = jsonPrimitive54.getAsJsonPrimitive();
    java.math.BigDecimal bigDecimal56 = jsonPrimitive55.getAsBigDecimal();
    byte byte57 = jsonPrimitive55.getAsByte();
    boolean b58 = jsonArray32.remove((com.google.gson.JsonElement)jsonPrimitive55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s52 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte57 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test279"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setDateFormat("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.generateNonExecutableJson();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test280"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i2 = jsonPrimitive1.getAsInt();
    boolean b3 = jsonPrimitive1.getAsBoolean();
    short s4 = jsonPrimitive1.getAsShort();
    com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    boolean b10 = jsonArray5.equals((java.lang.Object)gsonBuilder6);
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b13 = jsonPrimitive12.isString();
    boolean b14 = jsonPrimitive12.isBoolean();
    java.lang.String str15 = jsonPrimitive12.getAsString();
    boolean b16 = jsonPrimitive12.isJsonObject();
    int i17 = jsonPrimitive12.getAsInt();
    boolean b18 = jsonPrimitive12.getAsBoolean();
    jsonArray5.add((com.google.gson.JsonElement)jsonPrimitive12);
    int i20 = jsonArray5.size();
    int i21 = jsonArray5.getAsInt();
    boolean b22 = jsonArray5.isJsonPrimitive();
    boolean b23 = jsonPrimitive1.equals((java.lang.Object)b22);
    java.lang.Number number24 = jsonPrimitive1.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive(number24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number24);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test281"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.math.BigDecimal bigDecimal51 = jsonArray32.getAsBigDecimal();
    short s52 = jsonArray32.getAsShort();
    byte byte53 = jsonArray32.getAsByte();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement54 = jsonArray32.iterator();
    double d55 = jsonArray32.getAsDouble();
    boolean b56 = jsonArray32.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s52 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte53 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d55 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test282"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    boolean b51 = jsonArray32.isJsonPrimitive();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b54 = jsonPrimitive53.isString();
    boolean b55 = jsonPrimitive53.isBoolean();
    java.lang.String str56 = jsonPrimitive53.getAsString();
    boolean b57 = jsonPrimitive53.isJsonObject();
    double d58 = jsonPrimitive53.getAsDouble();
    java.math.BigDecimal bigDecimal59 = jsonPrimitive53.getAsBigDecimal();
    jsonArray32.add((java.lang.Number)bigDecimal59);
    com.google.gson.GsonBuilder gsonBuilder61 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder61.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder61.setLenient();
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder61.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson65 = gsonBuilder61.create();
    com.google.gson.GsonBuilder gsonBuilder66 = gsonBuilder61.enableComplexMapKeySerialization();
    boolean b67 = jsonArray32.equals((java.lang.Object)gsonBuilder66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "1"+ "'", str56.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d58 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test283"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    long long2 = jsonPrimitive1.getAsLong();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    boolean b4 = jsonPrimitive1.isJsonPrimitive();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 4L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "4"+ "'", str3.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test284"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    boolean b22 = jsonArray0.getAsBoolean();
    boolean b23 = jsonArray0.isJsonPrimitive();
    com.google.gson.JsonArray jsonArray24 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder25 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.setLenient();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder25.excludeFieldsWithoutExposeAnnotation();
    boolean b29 = jsonArray24.equals((java.lang.Object)gsonBuilder25);
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b32 = jsonPrimitive31.isString();
    boolean b33 = jsonPrimitive31.isBoolean();
    java.lang.String str34 = jsonPrimitive31.getAsString();
    boolean b35 = jsonPrimitive31.isJsonObject();
    int i36 = jsonPrimitive31.getAsInt();
    boolean b37 = jsonPrimitive31.getAsBoolean();
    jsonArray24.add((com.google.gson.JsonElement)jsonPrimitive31);
    java.math.BigInteger bigInteger39 = jsonArray24.getAsBigInteger();
    int i40 = jsonArray24.getAsInt();
    com.google.gson.JsonNull jsonNull41 = new com.google.gson.JsonNull();
    boolean b42 = jsonArray24.contains((com.google.gson.JsonElement)jsonNull41);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement43 = jsonArray24.iterator();
    java.math.BigDecimal bigDecimal44 = jsonArray24.getAsBigDecimal();
    jsonArray24.add((java.lang.Boolean)true);
    com.google.gson.JsonPrimitive jsonPrimitive48 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b49 = jsonPrimitive48.isString();
    boolean b50 = jsonPrimitive48.isBoolean();
    java.math.BigDecimal bigDecimal51 = jsonPrimitive48.getAsBigDecimal();
    jsonArray24.add((java.lang.Number)bigDecimal51);
    jsonArray0.add((java.lang.Number)bigDecimal51);
    com.google.gson.JsonObject jsonObject54 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray56 = jsonObject54.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray58 = jsonObject54.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive61 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b62 = jsonPrimitive61.isString();
    java.lang.Number number63 = jsonPrimitive61.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive64 = jsonPrimitive61.getAsJsonPrimitive();
    jsonObject54.add("hi!", (com.google.gson.JsonElement)jsonPrimitive64);
    jsonObject54.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject54.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    boolean b72 = jsonObject54.isJsonObject();
    com.google.gson.JsonElement jsonElement74 = jsonObject54.get("{}");
    boolean b75 = jsonArray0.contains((com.google.gson.JsonElement)jsonObject54);
    java.lang.Number number77 = null;
    jsonObject54.addProperty("true", number77);
    jsonObject54.addProperty("com.google.gson.JsonParseException: com.google.gson.JsonParseException: ", "true");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "1"+ "'", str34.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number63 + "' != '" + 1+ "'", number63.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test285"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i2 = jsonPrimitive1.getAsInt();
    boolean b3 = jsonPrimitive1.isString();
    boolean b4 = jsonPrimitive1.getAsBoolean();
    byte byte5 = jsonPrimitive1.getAsByte();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte5 == (byte)1);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test286"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)(byte)1, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test287"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.setVersion((double)'#');
    com.google.gson.Gson gson12 = gsonBuilder11.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder11.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    int[] i_array20 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder17.excludeFieldsWithModifiers(i_array20);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder14.excludeFieldsWithModifiers(i_array20);
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy31 = null;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.addSerializationExclusionStrategy(exclusionStrategy31);
    com.google.gson.ExclusionStrategy exclusionStrategy33 = null;
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder30.addSerializationExclusionStrategy(exclusionStrategy33);
    com.google.gson.Gson gson35 = gsonBuilder30.create();
    java.lang.String str36 = gson35.toString();
    java.lang.reflect.Type type38 = null;
    java.lang.Appendable appendable39 = gson35.fromJson("", type38);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy40 = gson35.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder41 = gson35.excluder();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder27.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder41);
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder5.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder41);
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder5.setLenient();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test288"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    java.lang.String str5 = gson4.toString();
    com.google.gson.JsonObject jsonObject6 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray8 = jsonObject6.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray10 = jsonObject6.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    java.lang.Number number15 = jsonPrimitive13.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive16 = jsonPrimitive13.getAsJsonPrimitive();
    jsonObject6.add("hi!", (com.google.gson.JsonElement)jsonPrimitive16);
    jsonObject6.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive22 = jsonObject6.getAsJsonPrimitive("null");
    jsonObject6.addProperty("com.google.gson.JsonParseException: hi!", (java.lang.Boolean)false);
    java.lang.String str26 = gson4.toJson((com.google.gson.JsonElement)jsonObject6);
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setLenient();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder27.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder27.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder32.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder38 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder38.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy41 = null;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder40.addSerializationExclusionStrategy(exclusionStrategy41);
    com.google.gson.ExclusionStrategy exclusionStrategy43 = null;
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder40.addSerializationExclusionStrategy(exclusionStrategy43);
    com.google.gson.Gson gson45 = gsonBuilder40.create();
    com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b48 = jsonPrimitive47.isString();
    boolean b49 = jsonPrimitive47.isBoolean();
    java.lang.String str50 = jsonPrimitive47.getAsString();
    boolean b51 = jsonPrimitive47.isJsonObject();
    java.math.BigDecimal bigDecimal52 = jsonPrimitive47.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement53 = gson45.toJsonTree((java.lang.Object)jsonPrimitive47);
    com.google.gson.internal.Excluder excluder54 = gson45.excluder();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder32.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder54);
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long56 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long57 = gson4.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder54, typetoken_long56);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}"+ "'", str26.equals("{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "1"+ "'", str50.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test289"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    com.google.gson.JsonArray jsonArray24 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder25 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.setLenient();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder25.excludeFieldsWithoutExposeAnnotation();
    boolean b29 = jsonArray24.equals((java.lang.Object)gsonBuilder25);
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b32 = jsonPrimitive31.isString();
    boolean b33 = jsonPrimitive31.isBoolean();
    java.lang.String str34 = jsonPrimitive31.getAsString();
    boolean b35 = jsonPrimitive31.isJsonObject();
    int i36 = jsonPrimitive31.getAsInt();
    boolean b37 = jsonPrimitive31.getAsBoolean();
    jsonArray24.add((com.google.gson.JsonElement)jsonPrimitive31);
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Number)0L);
    boolean b41 = jsonArray24.remove((com.google.gson.JsonElement)jsonPrimitive40);
    java.math.BigInteger bigInteger42 = jsonPrimitive40.getAsBigInteger();
    java.math.BigInteger bigInteger43 = jsonPrimitive40.getAsBigInteger();
    boolean b44 = jsonObject0.equals((java.lang.Object)bigInteger43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "1"+ "'", str34.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test290"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    char char17 = jsonPrimitive13.getAsCharacter();
    long long18 = jsonPrimitive13.getAsLong();
    com.google.gson.JsonElement jsonElement19 = gson7.toJsonTree((java.lang.Object)jsonPrimitive13);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull20 = jsonPrimitive13.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement19);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test291"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.math.BigDecimal bigDecimal51 = jsonArray32.getAsBigDecimal();
    short s52 = jsonArray32.getAsShort();
    byte byte53 = jsonArray32.getAsByte();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement54 = jsonArray32.iterator();
    int i55 = jsonArray32.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s52 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte53 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test292"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    java.math.BigDecimal bigDecimal21 = jsonPrimitive18.getAsBigDecimal();
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal21);
    boolean b23 = jsonPrimitive22.isJsonObject();
    boolean b24 = jsonArray0.contains((com.google.gson.JsonElement)jsonPrimitive22);
    byte byte25 = jsonPrimitive22.getAsByte();
    char char26 = jsonPrimitive22.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte25 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '1');

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test293"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    java.math.BigDecimal bigDecimal3 = jsonPrimitive2.getAsBigDecimal();
    com.google.gson.JsonPrimitive jsonPrimitive4 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal3);
    java.lang.Number number5 = jsonPrimitive4.getAsNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number5);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test294"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setDateFormat(100);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("{\"hi!\":1}");
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder8.setDateFormat("{}");
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder8.setLenient();
    com.google.gson.Gson gson14 = gsonBuilder13.create();
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    boolean b20 = jsonArray15.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    int i27 = jsonPrimitive22.getAsInt();
    boolean b28 = jsonPrimitive22.getAsBoolean();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive22);
    int i30 = jsonArray15.size();
    short s31 = jsonArray15.getAsShort();
    float f32 = jsonArray15.getAsFloat();
    float f33 = jsonArray15.getAsFloat();
    com.google.gson.JsonArray jsonArray34 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder35 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder35.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder35.setLenient();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder35.excludeFieldsWithoutExposeAnnotation();
    boolean b39 = jsonArray34.equals((java.lang.Object)gsonBuilder35);
    com.google.gson.JsonArray jsonArray40 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder41 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder41.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder41.setLenient();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder41.excludeFieldsWithoutExposeAnnotation();
    boolean b45 = jsonArray40.equals((java.lang.Object)gsonBuilder41);
    com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b48 = jsonPrimitive47.isString();
    boolean b49 = jsonPrimitive47.isBoolean();
    java.lang.String str50 = jsonPrimitive47.getAsString();
    boolean b51 = jsonPrimitive47.isJsonObject();
    int i52 = jsonPrimitive47.getAsInt();
    boolean b53 = jsonPrimitive47.getAsBoolean();
    jsonArray40.add((com.google.gson.JsonElement)jsonPrimitive47);
    jsonArray34.addAll(jsonArray40);
    java.math.BigInteger bigInteger56 = jsonArray40.getAsBigInteger();
    java.math.BigInteger bigInteger57 = jsonArray40.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive58 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger57);
    jsonArray15.add((java.lang.Number)bigInteger57);
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls60 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException61 = gson14.fromJson((com.google.gson.JsonElement)jsonArray15, cls60);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s31 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f32 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f33 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "1"+ "'", str50.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger57);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test295"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder4.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder4.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy11);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy15 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setFieldNamingPolicy(fieldNamingPolicy15);
    boolean b17 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder14);
    java.math.BigInteger bigInteger18 = jsonPrimitive1.getAsBigInteger();
    long long19 = jsonPrimitive1.getAsLong();
    java.math.BigInteger bigInteger20 = jsonPrimitive1.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 4L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger20);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test296"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement15 = jsonObject0.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive17 = jsonObject0.getAsJsonPrimitive("true");
    com.google.gson.JsonObject jsonObject19 = jsonObject0.getAsJsonObject("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonObject jsonObject22 = jsonObject0.getAsJsonObject("com.google.gson.JsonParseException: [1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject22);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test297"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    java.lang.String str9 = gson7.toString();
    java.lang.String str10 = gson7.toString();
    java.io.Reader reader11 = null;
    java.lang.Class<int[]> cls12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array13 = gson7.fromJson(reader11, cls12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test298"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.setVersion((double)'#');
    com.google.gson.Gson gson12 = gsonBuilder11.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder11.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    int[] i_array20 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder17.excludeFieldsWithModifiers(i_array20);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder14.excludeFieldsWithModifiers(i_array20);
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy31 = null;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.addSerializationExclusionStrategy(exclusionStrategy31);
    com.google.gson.ExclusionStrategy exclusionStrategy33 = null;
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder30.addSerializationExclusionStrategy(exclusionStrategy33);
    com.google.gson.Gson gson35 = gsonBuilder30.create();
    java.lang.String str36 = gson35.toString();
    java.lang.reflect.Type type38 = null;
    java.lang.Appendable appendable39 = gson35.fromJson("", type38);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy40 = gson35.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder41 = gson35.excluder();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder27.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder41);
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder5.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder41);
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder5.setPrettyPrinting();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test299"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder8.excludeFieldsWithModifiers(i_array14);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder8.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy23 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.setFieldNamingPolicy(fieldNamingPolicy23);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setDateFormat((-1));
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setLenient();
    int[] i_array31 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.excludeFieldsWithModifiers(i_array31);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder29.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy34 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.JsonElement jsonElement37 = longSerializationPolicy34.serialize((java.lang.Long)1L);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder26.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.JsonElement jsonElement40 = longSerializationPolicy34.serialize((java.lang.Long)10L);
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder18.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder18.setLenient();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test300"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    byte byte4 = jsonPrimitive1.getAsByte();
    int i5 = jsonPrimitive1.getAsInt();
    char char6 = jsonPrimitive1.getAsCharacter();
    boolean b7 = jsonPrimitive1.isNumber();
    double d8 = jsonPrimitive1.getAsDouble();
    boolean b9 = jsonPrimitive1.isNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test301"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = jsonArray32.getAsJsonArray();
    java.lang.Throwable throwable53 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException54 = new com.google.gson.stream.MalformedJsonException(throwable53);
    com.google.gson.stream.MalformedJsonException malformedJsonException55 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException54);
    java.lang.Throwable[] throwable_array56 = malformedJsonException54.getSuppressed();
    com.google.gson.JsonParseException jsonParseException57 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException54);
    boolean b58 = jsonArray51.equals((java.lang.Object)malformedJsonException54);
    java.math.BigInteger bigInteger59 = jsonArray51.getAsBigInteger();
    int i60 = jsonArray51.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test302"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("\"a\"");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("0");
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse("1");
    boolean b9 = jsonElement8.isJsonObject();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test303"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    float f4 = jsonPrimitive1.getAsFloat();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive6 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger5);
    java.lang.Number number7 = jsonPrimitive6.getAsNumber();
    java.lang.String str8 = jsonPrimitive6.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "4"+ "'", str8.equals("4"));

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test304"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder5.setFieldNamingPolicy(fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy19 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder16.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy19);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder16.disableHtmlEscaping();
    com.google.gson.ExclusionStrategy exclusionStrategy22 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array23 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy22 };
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder16.setExclusionStrategies(exclusionStrategy_array23);
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder5.setExclusionStrategies(exclusionStrategy_array23);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.setLenient();
    com.google.gson.ExclusionStrategy exclusionStrategy27 = null;
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.addDeserializationExclusionStrategy(exclusionStrategy27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test305"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d18 = jsonPrimitive17.getAsDouble();
    boolean b19 = jsonPrimitive17.isJsonObject();
    byte byte20 = jsonPrimitive17.getAsByte();
    int i21 = jsonPrimitive17.getAsInt();
    char char22 = jsonPrimitive17.getAsCharacter();
    boolean b23 = jsonPrimitive17.isJsonObject();
    java.lang.reflect.Type type24 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException25 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive17, type24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte20 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test306"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Character)'1');
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    boolean b23 = jsonObject0.equals((java.lang.Object)jsonPrimitive22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test307"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    boolean b24 = jsonObject0.isJsonObject();
    boolean b25 = jsonObject0.isJsonPrimitive();
    com.google.gson.JsonElement jsonElement27 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonArray jsonArray29 = jsonObject0.getAsJsonArray("1");
    jsonObject0.addProperty("{\"hi!\":1}", (java.lang.Boolean)false);
    jsonObject0.addProperty("null", (java.lang.Character)'#');
    com.google.gson.JsonArray jsonArray37 = jsonObject0.getAsJsonArray("com.google.gson.JsonParseException: hi!");
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Character)'1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray37);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test308"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    int i17 = jsonArray0.getAsInt();
    short s18 = jsonArray0.getAsShort();
    com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    boolean b24 = jsonArray19.equals((java.lang.Object)gsonBuilder20);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    int i31 = jsonPrimitive26.getAsInt();
    boolean b32 = jsonPrimitive26.getAsBoolean();
    jsonArray19.add((com.google.gson.JsonElement)jsonPrimitive26);
    int i34 = jsonArray19.size();
    jsonArray19.add((java.lang.Boolean)false);
    java.lang.Number number37 = null;
    jsonArray19.add(number37);
    com.google.gson.JsonObject jsonObject39 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray41 = jsonObject39.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray43 = jsonObject39.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive46 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b47 = jsonPrimitive46.isString();
    java.lang.Number number48 = jsonPrimitive46.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive49 = jsonPrimitive46.getAsJsonPrimitive();
    jsonObject39.add("hi!", (com.google.gson.JsonElement)jsonPrimitive49);
    boolean b51 = jsonObject39.isJsonArray();
    com.google.gson.JsonObject jsonObject52 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray54 = jsonObject52.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray56 = jsonObject52.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    java.lang.Number number61 = jsonPrimitive59.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive62 = jsonPrimitive59.getAsJsonPrimitive();
    jsonObject52.add("hi!", (com.google.gson.JsonElement)jsonPrimitive62);
    boolean b64 = jsonObject52.isJsonArray();
    com.google.gson.JsonElement jsonElement66 = jsonObject52.get("hi!");
    boolean b67 = jsonObject39.equals((java.lang.Object)jsonElement66);
    com.google.gson.JsonObject jsonObject68 = jsonObject39.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement69 = jsonObject68.entrySet();
    int i70 = jsonObject68.size();
    jsonObject68.addProperty("1", "{\"hi!\":1}");
    jsonArray19.add((com.google.gson.JsonElement)jsonObject68);
    boolean b75 = jsonArray0.contains((com.google.gson.JsonElement)jsonArray19);
    java.math.BigInteger bigInteger76 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonElement jsonElement78 = jsonArray0.get((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s18 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number48 + "' != '" + 1+ "'", number48.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number61 + "' != '" + 1+ "'", number61.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement78);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test309"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion((double)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test310"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    double d6 = jsonPrimitive1.getAsDouble();
    java.math.BigInteger bigInteger7 = jsonPrimitive1.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger7);
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger7);
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger7);
    boolean b11 = jsonPrimitive10.isBoolean();
    float f12 = jsonPrimitive10.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f12 == 1.0f);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test311"); }


    com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder3.setFieldNamingPolicy(fieldNamingPolicy5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    int[] i_array8 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithModifiers(i_array8);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.setLenient();
    boolean b12 = jsonNull0.equals((java.lang.Object)gsonBuilder10);
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder19.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy25 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array26 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy25 };
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder19.setExclusionStrategies(exclusionStrategy_array26);
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder18.setExclusionStrategies(exclusionStrategy_array26);
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder10.setExclusionStrategies(exclusionStrategy_array26);
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder10.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder31.setDateFormat((-1), (int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test312"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder52 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setLenient();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithoutExposeAnnotation();
    boolean b56 = jsonArray51.equals((java.lang.Object)gsonBuilder52);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    jsonArray51.addAll(jsonArray57);
    java.math.BigInteger bigInteger73 = jsonArray57.getAsBigInteger();
    boolean b74 = jsonArray57.isJsonPrimitive();
    jsonArray57.add((java.lang.Character)'#');
    boolean b77 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray57);
    int i78 = jsonArray32.getAsInt();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement80 = jsonArray32.get((int)'t');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test313"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException("com.google.gson.stream.MalformedJsonException: {\"hi!\":1}", (java.lang.Throwable)malformedJsonException2);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test314"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    boolean b51 = jsonArray32.isJsonPrimitive();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b54 = jsonPrimitive53.isString();
    boolean b55 = jsonPrimitive53.isBoolean();
    java.lang.String str56 = jsonPrimitive53.getAsString();
    boolean b57 = jsonPrimitive53.isJsonObject();
    double d58 = jsonPrimitive53.getAsDouble();
    java.math.BigDecimal bigDecimal59 = jsonPrimitive53.getAsBigDecimal();
    jsonArray32.add((java.lang.Number)bigDecimal59);
    // The following exception was thrown during execution in test generation
    try {
    int i61 = jsonArray32.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "1"+ "'", str56.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d58 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test315"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    boolean b34 = gson7.serializeNulls();
    boolean b35 = gson7.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.setLenient();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder36.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder36.setVersion((double)'#');
    com.google.gson.Gson gson42 = gsonBuilder41.create();
    com.google.gson.GsonBuilder gsonBuilder43 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder43.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder43.setLenient();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder43.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder43.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder48.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder48.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder51.serializeSpecialFloatingPointValues();
    com.google.gson.JsonElement jsonElement53 = gson42.toJsonTree((java.lang.Object)gsonBuilder52);
    com.google.gson.GsonBuilder gsonBuilder54 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder54.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder54.setLenient();
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder56.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy58 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder56.setFieldNamingPolicy(fieldNamingPolicy58);
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder59.excludeFieldsWithoutExposeAnnotation();
    int[] i_array61 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder59.excludeFieldsWithModifiers(i_array61);
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder59.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder65 = gsonBuilder63.setVersion((double)0.0f);
    com.google.gson.GsonBuilder gsonBuilder66 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder66.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder66.setLenient();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder66.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder70 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder71 = gsonBuilder70.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder72 = gsonBuilder70.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder73 = gsonBuilder72.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder74 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder75 = gsonBuilder74.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder76 = gsonBuilder74.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy77 = null;
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder76.addSerializationExclusionStrategy(exclusionStrategy77);
    com.google.gson.ExclusionStrategy exclusionStrategy79 = null;
    com.google.gson.GsonBuilder gsonBuilder80 = gsonBuilder76.addSerializationExclusionStrategy(exclusionStrategy79);
    com.google.gson.Gson gson81 = gsonBuilder76.create();
    com.google.gson.JsonPrimitive jsonPrimitive83 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b84 = jsonPrimitive83.isString();
    boolean b85 = jsonPrimitive83.isBoolean();
    java.lang.String str86 = jsonPrimitive83.getAsString();
    boolean b87 = jsonPrimitive83.isJsonObject();
    java.math.BigDecimal bigDecimal88 = jsonPrimitive83.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement89 = gson81.toJsonTree((java.lang.Object)jsonPrimitive83);
    com.google.gson.internal.Excluder excluder90 = gson81.excluder();
    com.google.gson.GsonBuilder gsonBuilder91 = gsonBuilder73.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder90);
    com.google.gson.GsonBuilder gsonBuilder92 = gsonBuilder66.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder90);
    com.google.gson.GsonBuilder gsonBuilder93 = gsonBuilder65.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder90);
    com.google.gson.GsonBuilder gsonBuilder94 = gsonBuilder52.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder90);
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long95 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long96 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder90, typetoken_long95);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "1"+ "'", str86.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder94);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test316"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.remove("{\"hi!\":1}");
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy27 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement29 = longSerializationPolicy27.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder26.setLongSerializationPolicy(longSerializationPolicy27);
    com.google.gson.JsonElement jsonElement32 = longSerializationPolicy27.serialize((java.lang.Long)0L);
    float f33 = jsonElement32.getAsFloat();
    boolean b34 = jsonElement32.isJsonArray();
    boolean b35 = jsonElement32.isJsonArray();
    boolean b36 = jsonElement32.getAsBoolean();
    jsonObject0.add("com.google.gson.JsonParseException: [1,1]", jsonElement32);
    com.google.gson.JsonElement jsonElement39 = jsonObject0.remove("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f33 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement39);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test317"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    jsonObject0.addProperty("{}", "com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    long long23 = jsonPrimitive20.getAsLong();
    java.math.BigInteger bigInteger24 = jsonPrimitive20.getAsBigInteger();
    jsonObject0.addProperty("", (java.lang.Number)bigInteger24);
    // The following exception was thrown during execution in test generation
    try {
    double d26 = jsonObject0.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger24);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test318"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy16 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.setFieldNamingPolicy(fieldNamingPolicy16);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    int[] i_array19 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithModifiers(i_array19);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder10.excludeFieldsWithModifiers(i_array19);
    com.google.gson.GsonBuilder gsonBuilder22 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.setLenient();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder22.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy31 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder28.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy31);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder28.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder28.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder34.setDateFormat(100);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.setDateFormat("{\"hi!\":1}");
    com.google.gson.ExclusionStrategy exclusionStrategy39 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array40 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy39 };
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder38.setExclusionStrategies(exclusionStrategy_array40);
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder22.setExclusionStrategies(exclusionStrategy_array40);
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder42.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder44 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder44.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder44.setLenient();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder44.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder44.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder49.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder51 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder51.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder51.setLenient();
    int[] i_array55 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder53.excludeFieldsWithModifiers(i_array55);
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder49.excludeFieldsWithModifiers(i_array55);
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy61 = null;
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder60.addSerializationExclusionStrategy(exclusionStrategy61);
    com.google.gson.ExclusionStrategy exclusionStrategy63 = null;
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder60.addSerializationExclusionStrategy(exclusionStrategy63);
    com.google.gson.GsonBuilder gsonBuilder65 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder66 = gsonBuilder65.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder65.setLenient();
    int[] i_array69 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder70 = gsonBuilder67.excludeFieldsWithModifiers(i_array69);
    com.google.gson.GsonBuilder gsonBuilder71 = gsonBuilder67.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy72 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder73 = gsonBuilder71.setLongSerializationPolicy(longSerializationPolicy72);
    com.google.gson.GsonBuilder gsonBuilder74 = gsonBuilder64.setLongSerializationPolicy(longSerializationPolicy72);
    com.google.gson.GsonBuilder gsonBuilder75 = gsonBuilder57.setLongSerializationPolicy(longSerializationPolicy72);
    com.google.gson.JsonElement jsonElement77 = longSerializationPolicy72.serialize((java.lang.Long)(-1L));
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder42.setLongSerializationPolicy(longSerializationPolicy72);
    com.google.gson.GsonBuilder gsonBuilder79 = gsonBuilder10.setLongSerializationPolicy(longSerializationPolicy72);
    com.google.gson.GsonBuilder gsonBuilder82 = gsonBuilder10.setDateFormat(0, (int)(byte)10);
    com.google.gson.JsonElement jsonElement83 = gson6.toJsonTree((java.lang.Object)gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement83);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test319"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonArray jsonArray19 = jsonObject0.getAsJsonArray("null");
    com.google.gson.JsonObject jsonObject21 = jsonObject0.getAsJsonObject("\"4\"");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject21);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test320"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive4 = jsonPrimitive1.getAsJsonPrimitive();
    java.lang.String str5 = jsonPrimitive4.getAsString();
    char char6 = jsonPrimitive4.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1"+ "'", str5.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '1');

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test321"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement5 = jsonObject0.entrySet();
    jsonObject0.addProperty("{\"hi!\":1}", (java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement5);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test322"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    jsonArray0.add((java.lang.Boolean)true);
    jsonArray0.add((java.lang.Character)'4');
    jsonArray0.add((java.lang.Number)(-1));
    int i25 = jsonArray0.size();
    com.google.gson.JsonObject jsonObject26 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray28 = jsonObject26.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray30 = jsonObject26.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive33.getAsJsonPrimitive();
    jsonObject26.add("hi!", (com.google.gson.JsonElement)jsonPrimitive36);
    jsonObject26.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject26.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive45 = jsonObject26.getAsJsonPrimitive("1");
    int i46 = jsonObject26.size();
    boolean b47 = jsonArray0.contains((com.google.gson.JsonElement)jsonObject26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test323"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.setLenient();
    com.google.gson.Gson gson4 = gsonBuilder3.create();
    com.google.gson.stream.JsonReader jsonReader5 = null;
    java.lang.reflect.Type type6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array7 = gson4.fromJson(jsonReader5, type6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test324"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingPolicy(fieldNamingPolicy11);
    com.google.gson.Gson gson13 = gsonBuilder10.create();
    java.lang.String str14 = gson13.toString();
    java.io.Writer writer15 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter16 = gson13.newJsonWriter(writer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test325"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    boolean b21 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: hi!");
    int i22 = jsonObject0.size();
    jsonObject0.addProperty("hi!", "com.google.gson.stream.MalformedJsonException: hi!");
    int i26 = jsonObject0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test326"); }


    java.lang.Throwable throwable2 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException(throwable2);
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException3);
    java.lang.Throwable[] throwable_array5 = malformedJsonException3.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException3);
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("", (java.lang.Throwable)malformedJsonException3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array5);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test327"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    long long5 = jsonPrimitive1.getAsLong();
    boolean b6 = jsonPrimitive1.isNumber();
    java.lang.Number number7 = jsonPrimitive1.getAsNumber();
    java.lang.String str8 = jsonPrimitive1.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number7 + "' != '" + 1+ "'", number7.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1"+ "'", str8.equals("1"));

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test328"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    double d51 = jsonArray32.getAsDouble();
    java.math.BigInteger bigInteger52 = jsonArray32.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d51 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger52);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test329"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    java.lang.String str18 = jsonArray0.toString();
    boolean b19 = jsonArray0.getAsBoolean();
    float f20 = jsonArray0.getAsFloat();
    com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder22 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.setLenient();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.excludeFieldsWithoutExposeAnnotation();
    boolean b26 = jsonArray21.equals((java.lang.Object)gsonBuilder22);
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b29 = jsonPrimitive28.isString();
    boolean b30 = jsonPrimitive28.isBoolean();
    java.lang.String str31 = jsonPrimitive28.getAsString();
    boolean b32 = jsonPrimitive28.isJsonObject();
    int i33 = jsonPrimitive28.getAsInt();
    boolean b34 = jsonPrimitive28.getAsBoolean();
    jsonArray21.add((com.google.gson.JsonElement)jsonPrimitive28);
    int i36 = jsonArray21.size();
    com.google.gson.JsonArray jsonArray37 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder38 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder38.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.setLenient();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder38.excludeFieldsWithoutExposeAnnotation();
    boolean b42 = jsonArray37.equals((java.lang.Object)gsonBuilder38);
    com.google.gson.JsonPrimitive jsonPrimitive44 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b45 = jsonPrimitive44.isString();
    boolean b46 = jsonPrimitive44.isBoolean();
    java.lang.String str47 = jsonPrimitive44.getAsString();
    boolean b48 = jsonPrimitive44.isJsonObject();
    int i49 = jsonPrimitive44.getAsInt();
    boolean b50 = jsonPrimitive44.getAsBoolean();
    jsonArray37.add((com.google.gson.JsonElement)jsonPrimitive44);
    char char52 = jsonArray37.getAsCharacter();
    com.google.gson.JsonElement jsonElement53 = null;
    jsonArray37.add(jsonElement53);
    jsonArray21.addAll(jsonArray37);
    com.google.gson.JsonElement jsonElement57 = jsonArray21.remove((int)(short)0);
    jsonArray21.add((java.lang.Boolean)false);
    com.google.gson.JsonArray jsonArray60 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder61 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder61.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder61.setLenient();
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder61.excludeFieldsWithoutExposeAnnotation();
    boolean b65 = jsonArray60.equals((java.lang.Object)gsonBuilder61);
    com.google.gson.JsonArray jsonArray66 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder67 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder67.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder67.setLenient();
    com.google.gson.GsonBuilder gsonBuilder70 = gsonBuilder67.excludeFieldsWithoutExposeAnnotation();
    boolean b71 = jsonArray66.equals((java.lang.Object)gsonBuilder67);
    com.google.gson.JsonPrimitive jsonPrimitive73 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b74 = jsonPrimitive73.isString();
    boolean b75 = jsonPrimitive73.isBoolean();
    java.lang.String str76 = jsonPrimitive73.getAsString();
    boolean b77 = jsonPrimitive73.isJsonObject();
    int i78 = jsonPrimitive73.getAsInt();
    boolean b79 = jsonPrimitive73.getAsBoolean();
    jsonArray66.add((com.google.gson.JsonElement)jsonPrimitive73);
    jsonArray60.addAll(jsonArray66);
    java.math.BigInteger bigInteger82 = jsonArray66.getAsBigInteger();
    java.math.BigInteger bigInteger83 = jsonArray66.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive84 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger83);
    jsonArray21.add((java.lang.Number)bigInteger83);
    jsonArray0.add((java.lang.Number)bigInteger83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[1]"+ "'", str18.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f20 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "1"+ "'", str31.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "1"+ "'", str47.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "1"+ "'", str76.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger83);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test330"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson7 = gsonBuilder5.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.addSerializationExclusionStrategy(exclusionStrategy12);
    com.google.gson.ExclusionStrategy exclusionStrategy14 = null;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.addSerializationExclusionStrategy(exclusionStrategy14);
    com.google.gson.Gson gson16 = gsonBuilder11.create();
    boolean b17 = gson16.serializeNulls();
    boolean b18 = gson16.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy19 = gson16.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder20 = gson16.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long21 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long22 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder20, typetoken_long21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder20);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test331"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException("[10]");
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException("1", (java.lang.Throwable)malformedJsonException2);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test332"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject14 = jsonObject0.getAsJsonObject("0");
    boolean b15 = jsonObject0.isJsonArray();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement16 = jsonObject0.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b20 = jsonPrimitive19.isString();
    java.lang.String str21 = jsonPrimitive19.getAsString();
    float f22 = jsonPrimitive19.getAsFloat();
    java.math.BigInteger bigInteger23 = jsonPrimitive19.getAsBigInteger();
    jsonObject0.addProperty("10", (java.lang.Number)bigInteger23);
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b28 = jsonPrimitive27.isString();
    boolean b29 = jsonPrimitive27.isString();
    boolean b30 = jsonPrimitive27.isJsonObject();
    char char31 = jsonPrimitive27.getAsCharacter();
    jsonObject0.add("{}", (com.google.gson.JsonElement)jsonPrimitive27);
    char char33 = jsonPrimitive27.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f22 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '1');

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test333"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    java.lang.Number number52 = jsonArray32.getAsNumber();
    int i53 = jsonArray32.getAsInt();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement54 = jsonArray32.iterator();
    com.google.gson.JsonArray jsonArray55 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder56 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder56.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder56.setLenient();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder56.excludeFieldsWithoutExposeAnnotation();
    boolean b60 = jsonArray55.equals((java.lang.Object)gsonBuilder56);
    com.google.gson.JsonPrimitive jsonPrimitive62 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b63 = jsonPrimitive62.isString();
    boolean b64 = jsonPrimitive62.isBoolean();
    java.lang.String str65 = jsonPrimitive62.getAsString();
    boolean b66 = jsonPrimitive62.isJsonObject();
    int i67 = jsonPrimitive62.getAsInt();
    boolean b68 = jsonPrimitive62.getAsBoolean();
    jsonArray55.add((com.google.gson.JsonElement)jsonPrimitive62);
    int i70 = jsonArray55.size();
    short s71 = jsonArray55.getAsShort();
    float f72 = jsonArray55.getAsFloat();
    com.google.gson.GsonBuilder gsonBuilder73 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder74 = gsonBuilder73.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy75 = null;
    com.google.gson.GsonBuilder gsonBuilder76 = gsonBuilder74.addSerializationExclusionStrategy(exclusionStrategy75);
    boolean b77 = jsonArray55.equals((java.lang.Object)exclusionStrategy75);
    java.lang.Number number78 = jsonArray55.getAsNumber();
    jsonArray32.addAll(jsonArray55);
    long long80 = jsonArray55.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number52 + "' != '" + 1+ "'", number52.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "1"+ "'", str65.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s71 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f72 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number78 + "' != '" + 1+ "'", number78.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long80 == 1L);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test334"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    long long4 = jsonPrimitive1.getAsLong();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    boolean b6 = jsonPrimitive1.getAsBoolean();
    boolean b7 = jsonPrimitive1.isJsonArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test335"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    jsonObject0.addProperty("1", (java.lang.Boolean)true);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d26 = jsonPrimitive25.getAsDouble();
    boolean b27 = jsonPrimitive25.isJsonObject();
    byte byte28 = jsonPrimitive25.getAsByte();
    java.lang.Number number29 = jsonPrimitive25.getAsNumber();
    com.google.gson.stream.MalformedJsonException malformedJsonException31 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable33 = null;
    com.google.gson.JsonParseException jsonParseException34 = new com.google.gson.JsonParseException("", throwable33);
    com.google.gson.stream.MalformedJsonException malformedJsonException35 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException34);
    malformedJsonException31.addSuppressed((java.lang.Throwable)jsonParseException34);
    com.google.gson.JsonParseException jsonParseException37 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException34);
    boolean b38 = jsonPrimitive25.equals((java.lang.Object)jsonParseException34);
    jsonObject0.add("{}", (com.google.gson.JsonElement)jsonPrimitive25);
    boolean b40 = jsonPrimitive25.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte28 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test336"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    int i23 = jsonArray8.size();
    short s24 = jsonArray8.getAsShort();
    int i25 = jsonArray8.getAsInt();
    com.google.gson.JsonElement jsonElement26 = gson6.toJsonTree((java.lang.Object)jsonArray8);
    jsonArray8.add("{\"hi!\":1,\"com.google.gson.stream.MalformedJsonException: \":\"4\",\"null\":false}");
    java.lang.String str29 = jsonArray8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[1,\"{\\\"hi!\\\":1,\\\"com.google.gson.stream.MalformedJsonException: \\\":\\\"4\\\",\\\"null\\\":false}\"]"+ "'", str29.equals("[1,\"{\\\"hi!\\\":1,\\\"com.google.gson.stream.MalformedJsonException: \\\":\\\"4\\\",\\\"null\\\":false}\"]"));

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test337"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    // The following exception was thrown during execution in test generation
    try {
    double d35 = jsonArray0.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test338"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    int i23 = jsonArray8.size();
    short s24 = jsonArray8.getAsShort();
    int i25 = jsonArray8.getAsInt();
    com.google.gson.JsonElement jsonElement26 = gson6.toJsonTree((java.lang.Object)jsonArray8);
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d29 = jsonPrimitive28.getAsDouble();
    boolean b30 = jsonPrimitive28.isBoolean();
    boolean b31 = jsonPrimitive28.isJsonArray();
    java.lang.String str32 = gson6.toJson((com.google.gson.JsonElement)jsonPrimitive28);
    long long33 = jsonPrimitive28.getAsLong();
    boolean b34 = jsonPrimitive28.isString();
    boolean b35 = jsonPrimitive28.isBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\"4\""+ "'", str32.equals("\"4\""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 4L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test339"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.serializeNulls();
    com.google.gson.JsonArray jsonArray17 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setLenient();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.excludeFieldsWithoutExposeAnnotation();
    boolean b22 = jsonArray17.equals((java.lang.Object)gsonBuilder18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    boolean b26 = jsonPrimitive24.isBoolean();
    java.lang.String str27 = jsonPrimitive24.getAsString();
    boolean b28 = jsonPrimitive24.isJsonObject();
    int i29 = jsonPrimitive24.getAsInt();
    boolean b30 = jsonPrimitive24.getAsBoolean();
    jsonArray17.add((com.google.gson.JsonElement)jsonPrimitive24);
    java.math.BigInteger bigInteger32 = jsonArray17.getAsBigInteger();
    com.google.gson.JsonArray jsonArray33 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder34 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder34.setLenient();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder34.excludeFieldsWithoutExposeAnnotation();
    boolean b38 = jsonArray33.equals((java.lang.Object)gsonBuilder34);
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b41 = jsonPrimitive40.isString();
    boolean b42 = jsonPrimitive40.isBoolean();
    java.lang.String str43 = jsonPrimitive40.getAsString();
    boolean b44 = jsonPrimitive40.isJsonObject();
    int i45 = jsonPrimitive40.getAsInt();
    boolean b46 = jsonPrimitive40.getAsBoolean();
    jsonArray33.add((com.google.gson.JsonElement)jsonPrimitive40);
    char char48 = jsonArray33.getAsCharacter();
    com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setLenient();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder50.excludeFieldsWithoutExposeAnnotation();
    boolean b54 = jsonArray49.equals((java.lang.Object)gsonBuilder50);
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    boolean b58 = jsonPrimitive56.isBoolean();
    java.lang.String str59 = jsonPrimitive56.getAsString();
    boolean b60 = jsonPrimitive56.isJsonObject();
    int i61 = jsonPrimitive56.getAsInt();
    boolean b62 = jsonPrimitive56.getAsBoolean();
    jsonArray49.add((com.google.gson.JsonElement)jsonPrimitive56);
    jsonArray33.addAll(jsonArray49);
    double d65 = jsonArray49.getAsDouble();
    jsonArray17.addAll(jsonArray49);
    short s67 = jsonArray49.getAsShort();
    java.lang.String str68 = jsonArray49.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive70 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d71 = jsonPrimitive70.getAsDouble();
    java.lang.Number number72 = jsonPrimitive70.getAsNumber();
    jsonArray49.add(number72);
    int i74 = jsonArray49.size();
    com.google.gson.JsonArray jsonArray75 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder76 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder77 = gsonBuilder76.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder76.setLenient();
    com.google.gson.GsonBuilder gsonBuilder79 = gsonBuilder76.excludeFieldsWithoutExposeAnnotation();
    boolean b80 = jsonArray75.equals((java.lang.Object)gsonBuilder76);
    com.google.gson.JsonPrimitive jsonPrimitive82 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b83 = jsonPrimitive82.isString();
    boolean b84 = jsonPrimitive82.isBoolean();
    java.lang.String str85 = jsonPrimitive82.getAsString();
    boolean b86 = jsonPrimitive82.isJsonObject();
    int i87 = jsonPrimitive82.getAsInt();
    boolean b88 = jsonPrimitive82.getAsBoolean();
    jsonArray75.add((com.google.gson.JsonElement)jsonPrimitive82);
    int i90 = jsonArray75.size();
    jsonArray75.add((java.lang.Boolean)false);
    com.google.gson.JsonElement jsonElement94 = jsonArray75.get(1);
    boolean b95 = jsonArray49.contains((com.google.gson.JsonElement)jsonArray75);
    com.google.gson.stream.JsonWriter jsonWriter96 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonArray75, jsonWriter96);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1"+ "'", str27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "1"+ "'", str43.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char48 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1"+ "'", str59.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d65 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s67 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "1"+ "'", str68.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d71 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "1"+ "'", str85.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test340"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion((double)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test341"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)0L);
    boolean b17 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive16);
    com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    boolean b23 = jsonArray18.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    int i30 = jsonPrimitive25.getAsInt();
    boolean b31 = jsonPrimitive25.getAsBoolean();
    jsonArray18.add((com.google.gson.JsonElement)jsonPrimitive25);
    int i33 = jsonArray18.size();
    jsonArray18.add((java.lang.Boolean)false);
    java.lang.Number number36 = null;
    jsonArray18.add(number36);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d40 = jsonPrimitive39.getAsDouble();
    boolean b41 = jsonPrimitive39.isJsonObject();
    boolean b42 = jsonPrimitive39.isNumber();
    boolean b43 = jsonArray18.remove((com.google.gson.JsonElement)jsonPrimitive39);
    int i44 = jsonArray18.size();
    jsonArray18.add((java.lang.Character)'t');
    boolean b47 = jsonArray18.isJsonPrimitive();
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder49 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder49.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder49.setLenient();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder49.excludeFieldsWithoutExposeAnnotation();
    boolean b53 = jsonArray48.equals((java.lang.Object)gsonBuilder49);
    com.google.gson.JsonPrimitive jsonPrimitive55 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b56 = jsonPrimitive55.isString();
    boolean b57 = jsonPrimitive55.isBoolean();
    java.lang.String str58 = jsonPrimitive55.getAsString();
    boolean b59 = jsonPrimitive55.isJsonObject();
    int i60 = jsonPrimitive55.getAsInt();
    boolean b61 = jsonPrimitive55.getAsBoolean();
    jsonArray48.add((com.google.gson.JsonElement)jsonPrimitive55);
    int i63 = jsonArray48.size();
    int i64 = jsonArray48.getAsInt();
    boolean b65 = jsonArray48.isJsonPrimitive();
    jsonArray18.addAll(jsonArray48);
    jsonArray0.addAll(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d40 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "1"+ "'", str58.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test342"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    com.google.gson.JsonElement jsonElement25 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonArray jsonArray27 = jsonObject0.getAsJsonArray("com.google.gson.JsonParseException: com.google.gson.JsonParseException: ");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray27);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test343"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    float f4 = jsonPrimitive1.getAsFloat();
    char char5 = jsonPrimitive1.getAsCharacter();
    boolean b6 = jsonPrimitive1.isJsonArray();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive1.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test344"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    boolean b18 = jsonArray0.getAsBoolean();
    com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    boolean b24 = jsonArray19.equals((java.lang.Object)gsonBuilder20);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    int i31 = jsonPrimitive26.getAsInt();
    boolean b32 = jsonPrimitive26.getAsBoolean();
    jsonArray19.add((com.google.gson.JsonElement)jsonPrimitive26);
    java.math.BigInteger bigInteger34 = jsonArray19.getAsBigInteger();
    int i35 = jsonArray19.getAsInt();
    com.google.gson.JsonNull jsonNull36 = new com.google.gson.JsonNull();
    boolean b37 = jsonArray19.contains((com.google.gson.JsonElement)jsonNull36);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement38 = jsonArray19.iterator();
    java.lang.Number number39 = jsonArray19.getAsNumber();
    jsonArray0.addAll(jsonArray19);
    short s41 = jsonArray19.getAsShort();
    jsonArray19.add((java.lang.Number)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number39 + "' != '" + 1+ "'", number39.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s41 == (short)1);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test345"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    float f17 = jsonArray0.getAsFloat();
    jsonArray0.add((java.lang.Character)'1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f17 == 1.0f);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test346"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat(10, 0);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("\"4\"");
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.enableComplexMapKeySerialization();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test347"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingPolicy(fieldNamingPolicy11);
    com.google.gson.Gson gson13 = gsonBuilder10.create();
    boolean b14 = gson13.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy18 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement20 = longSerializationPolicy18.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder17.setLongSerializationPolicy(longSerializationPolicy18);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.enableComplexMapKeySerialization();
    com.google.gson.JsonElement jsonElement24 = gson13.toJsonTree((java.lang.Object)gsonBuilder23);
    com.google.gson.JsonParser jsonParser25 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement27 = jsonParser25.parse("1");
    com.google.gson.JsonElement jsonElement29 = jsonParser25.parse("");
    com.google.gson.JsonElement jsonElement31 = jsonParser25.parse("");
    java.lang.Appendable appendable32 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson13.toJson(jsonElement31, appendable32);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement31);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test348"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b25 = jsonPrimitive24.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder26.disableInnerClassSerialization();
    boolean b31 = jsonPrimitive24.equals((java.lang.Object)gsonBuilder30);
    boolean b32 = jsonArray0.equals((java.lang.Object)jsonPrimitive24);
    int i33 = jsonArray0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal34 = jsonArray0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test349"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder4.setDateFormat(2);
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setLenient();
    int[] i_array14 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy20 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder17.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy20);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder17.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy24 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder15.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy24);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy24);
    com.google.gson.ExclusionStrategy exclusionStrategy28 = null;
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder4.addSerializationExclusionStrategy(exclusionStrategy28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test350"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    double d6 = jsonPrimitive1.getAsDouble();
    java.math.BigInteger bigInteger7 = jsonPrimitive1.getAsBigInteger();
    char char8 = jsonPrimitive1.getAsCharacter();
    short s9 = jsonPrimitive1.getAsShort();
    short s10 = jsonPrimitive1.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s10 == (short)1);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test351"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    com.google.gson.JsonObject jsonObject14 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray16 = jsonObject14.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray18 = jsonObject14.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    java.lang.Number number23 = jsonPrimitive21.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive24 = jsonPrimitive21.getAsJsonPrimitive();
    jsonObject14.add("hi!", (com.google.gson.JsonElement)jsonPrimitive24);
    boolean b26 = jsonObject14.isJsonArray();
    com.google.gson.JsonElement jsonElement28 = jsonObject14.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d31 = jsonPrimitive30.getAsDouble();
    boolean b32 = jsonPrimitive30.isBoolean();
    boolean b33 = jsonObject14.equals((java.lang.Object)b32);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement34 = jsonObject14.entrySet();
    com.google.gson.JsonElement jsonElement36 = jsonObject14.remove("{\"hi!\":1}");
    int i37 = jsonObject14.size();
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonObject14.getAsJsonPrimitive("null");
    com.google.gson.JsonElement jsonElement41 = jsonObject14.get("com.google.gson.JsonParseException: ");
    com.google.gson.stream.JsonWriter jsonWriter42 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonObject14, jsonWriter42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number23 + "' != '" + 1+ "'", number23.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement41);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test352"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    double d2 = jsonPrimitive1.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 1.0d);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test353"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    jsonObject29.addProperty("0", (java.lang.Number)1.0f);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement33 = jsonObject29.entrySet();
    jsonObject29.addProperty("com.google.gson.JsonParseException: ", (java.lang.Boolean)true);
    boolean b38 = jsonObject29.has("[\"4\"]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test354"); }


    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException4);
    java.lang.Throwable[] throwable_array6 = jsonParseException2.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException2);
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable12 = null;
    com.google.gson.JsonParseException jsonParseException13 = new com.google.gson.JsonParseException("", throwable12);
    com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException13);
    malformedJsonException10.addSuppressed((java.lang.Throwable)jsonParseException13);
    com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException10);
    malformedJsonException7.addSuppressed((java.lang.Throwable)malformedJsonException10);
    com.google.gson.JsonParseException jsonParseException18 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException7);
    com.google.gson.JsonParseException jsonParseException22 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException24 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException22.addSuppressed((java.lang.Throwable)jsonParseException24);
    java.lang.Throwable[] throwable_array26 = jsonParseException22.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException27 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException22);
    com.google.gson.stream.MalformedJsonException malformedJsonException30 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable32 = null;
    com.google.gson.JsonParseException jsonParseException33 = new com.google.gson.JsonParseException("", throwable32);
    com.google.gson.stream.MalformedJsonException malformedJsonException34 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException33);
    malformedJsonException30.addSuppressed((java.lang.Throwable)jsonParseException33);
    com.google.gson.stream.MalformedJsonException malformedJsonException36 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException30);
    malformedJsonException27.addSuppressed((java.lang.Throwable)malformedJsonException30);
    com.google.gson.JsonParseException jsonParseException38 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException27);
    com.google.gson.stream.MalformedJsonException malformedJsonException39 = new com.google.gson.stream.MalformedJsonException("true", (java.lang.Throwable)malformedJsonException27);
    jsonParseException18.addSuppressed((java.lang.Throwable)malformedJsonException27);
    java.lang.Throwable throwable45 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException46 = new com.google.gson.stream.MalformedJsonException(throwable45);
    com.google.gson.stream.MalformedJsonException malformedJsonException47 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException46);
    com.google.gson.stream.MalformedJsonException malformedJsonException48 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException46);
    com.google.gson.JsonParseException jsonParseException49 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException48);
    com.google.gson.stream.MalformedJsonException malformedJsonException50 = new com.google.gson.stream.MalformedJsonException("false", (java.lang.Throwable)jsonParseException49);
    com.google.gson.stream.MalformedJsonException malformedJsonException51 = new com.google.gson.stream.MalformedJsonException("true", (java.lang.Throwable)malformedJsonException50);
    malformedJsonException27.addSuppressed((java.lang.Throwable)malformedJsonException50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array26);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test355"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable6 = null;
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("", throwable6);
    com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException7);
    malformedJsonException4.addSuppressed((java.lang.Throwable)jsonParseException7);
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException("\"a\"", (java.lang.Throwable)jsonParseException7);
    com.google.gson.JsonParseException jsonParseException11 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException10);
    com.google.gson.JsonParseException jsonParseException12 = new com.google.gson.JsonParseException("\"\"", (java.lang.Throwable)malformedJsonException10);
    com.google.gson.JsonParseException jsonParseException13 = new com.google.gson.JsonParseException("[1,\"#\"]", (java.lang.Throwable)malformedJsonException10);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test356"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    java.lang.Number number26 = jsonPrimitive24.getAsNumber();
    long long27 = jsonPrimitive24.getAsLong();
    java.math.BigDecimal bigDecimal28 = jsonPrimitive24.getAsBigDecimal();
    jsonArray0.add((java.lang.Number)bigDecimal28);
    java.math.BigDecimal bigDecimal30 = jsonArray0.getAsBigDecimal();
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal30);
    boolean b32 = jsonPrimitive31.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder34.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy38 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder37.setFieldNamingPolicy(fieldNamingPolicy38);
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder37.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy41 = null;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder37.setFieldNamingPolicy(fieldNamingPolicy41);
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder37.generateNonExecutableJson();
    boolean b44 = jsonPrimitive31.equals((java.lang.Object)gsonBuilder37);
    boolean b45 = jsonPrimitive31.getAsBoolean();
    boolean b46 = jsonPrimitive31.isBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number26 + "' != '" + 1+ "'", number26.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long27 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test357"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    com.google.gson.JsonElement jsonElement25 = jsonObject0.get("hi!");
    com.google.gson.JsonArray jsonArray27 = jsonObject0.getAsJsonArray("{\"hi!\":1,\"{\\\"hi!\\\":1}\":\"1\"}");
    com.google.gson.JsonObject jsonObject29 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray31 = jsonObject29.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray33 = jsonObject29.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    java.lang.Number number38 = jsonPrimitive36.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonPrimitive36.getAsJsonPrimitive();
    jsonObject29.add("hi!", (com.google.gson.JsonElement)jsonPrimitive39);
    boolean b41 = jsonObject29.isJsonArray();
    com.google.gson.JsonElement jsonElement43 = jsonObject29.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d46 = jsonPrimitive45.getAsDouble();
    boolean b47 = jsonPrimitive45.isBoolean();
    boolean b48 = jsonObject29.equals((java.lang.Object)b47);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement49 = jsonObject29.entrySet();
    com.google.gson.JsonElement jsonElement51 = jsonObject29.remove("{\"hi!\":1}");
    int i52 = jsonObject29.size();
    com.google.gson.JsonPrimitive jsonPrimitive54 = jsonObject29.getAsJsonPrimitive("null");
    jsonObject29.addProperty("com.google.gson.stream.MalformedJsonException: ", (java.lang.Boolean)false);
    boolean b59 = jsonObject29.has("100.0");
    jsonObject0.add("{\"hi!\":1,\"com.google.gson.stream.MalformedJsonException: \":\"4\",\"null\":false}", (com.google.gson.JsonElement)jsonObject29);
    com.google.gson.JsonPrimitive jsonPrimitive62 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b63 = jsonPrimitive62.isString();
    boolean b64 = jsonPrimitive62.isBoolean();
    java.lang.String str65 = jsonPrimitive62.getAsString();
    java.lang.Number number66 = jsonPrimitive62.getAsNumber();
    long long67 = jsonPrimitive62.getAsLong();
    boolean b68 = jsonObject0.equals((java.lang.Object)long67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number38 + "' != '" + 1+ "'", number38.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d46 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "1"+ "'", str65.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number66 + "' != '" + 1+ "'", number66.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test358"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    java.lang.Number number17 = jsonArray0.getAsNumber();
    java.lang.Number number18 = jsonArray0.getAsNumber();
    float f19 = jsonArray0.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number17 + "' != '" + 1+ "'", number17.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number18 + "' != '" + 1+ "'", number18.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f19 == 1.0f);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test359"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setDateFormat((int)'1', (int)'4');
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder0.setDateFormat("{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}");
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.addDeserializationExclusionStrategy(exclusionStrategy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test360"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder4.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder4.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy11);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy15 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setFieldNamingPolicy(fieldNamingPolicy15);
    boolean b17 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder14);
    java.lang.Number number18 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal19 = jsonPrimitive1.getAsBigDecimal();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject20 = jsonPrimitive1.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test361"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    boolean b21 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: hi!");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement22 = jsonObject0.entrySet();
    boolean b24 = jsonObject0.has("null");
    com.google.gson.JsonElement jsonElement26 = jsonObject0.remove("{\"hi!\":1,\"com.google.gson.stream.MalformedJsonException: \":\"4\",\"null\":false}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement26);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test362"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    com.google.gson.JsonObject jsonObject14 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray16 = jsonObject14.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray18 = jsonObject14.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    java.lang.Number number23 = jsonPrimitive21.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive24 = jsonPrimitive21.getAsJsonPrimitive();
    jsonObject14.add("hi!", (com.google.gson.JsonElement)jsonPrimitive24);
    boolean b26 = jsonObject14.isJsonArray();
    com.google.gson.JsonObject jsonObject27 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray29 = jsonObject27.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray31 = jsonObject27.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    java.lang.Number number36 = jsonPrimitive34.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive37 = jsonPrimitive34.getAsJsonPrimitive();
    jsonObject27.add("hi!", (com.google.gson.JsonElement)jsonPrimitive37);
    boolean b39 = jsonObject27.isJsonArray();
    com.google.gson.JsonElement jsonElement41 = jsonObject27.get("hi!");
    boolean b42 = jsonObject14.equals((java.lang.Object)jsonElement41);
    com.google.gson.JsonObject jsonObject43 = jsonObject14.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement44 = jsonObject43.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b48 = jsonPrimitive47.isString();
    java.lang.Number number49 = jsonPrimitive47.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive50 = jsonPrimitive47.getAsJsonPrimitive();
    float f51 = jsonPrimitive50.getAsFloat();
    float f52 = jsonPrimitive50.getAsFloat();
    jsonObject43.add("hi!", (com.google.gson.JsonElement)jsonPrimitive50);
    java.lang.Appendable appendable54 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive50, appendable54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number23 + "' != '" + 1+ "'", number23.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number36 + "' != '" + 1+ "'", number36.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number49 + "' != '" + 1+ "'", number49.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f51 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f52 == 1.0f);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test363"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    boolean b6 = jsonObject0.has("#");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test364"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setFieldNamingPolicy(fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder3.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy9);
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder3.addSerializationExclusionStrategy(exclusionStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test365"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject0.addProperty("1", (java.lang.Boolean)true);
    int i21 = jsonObject0.size();
    com.google.gson.JsonElement jsonElement23 = jsonObject0.get("1");
    com.google.gson.JsonArray jsonArray25 = jsonObject0.getAsJsonArray("{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray25);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test366"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d11 = jsonPrimitive10.getAsDouble();
    boolean b12 = jsonPrimitive10.isBoolean();
    boolean b13 = jsonPrimitive10.isJsonArray();
    boolean b14 = jsonPrimitive10.isJsonObject();
    java.lang.Throwable throwable18 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException(throwable18);
    com.google.gson.stream.MalformedJsonException malformedJsonException20 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException19);
    com.google.gson.JsonParseException jsonParseException21 = new com.google.gson.JsonParseException("hi!", (java.lang.Throwable)malformedJsonException19);
    com.google.gson.stream.MalformedJsonException malformedJsonException22 = new com.google.gson.stream.MalformedJsonException("com.google.gson.JsonParseException: {\"hi!\":1}", (java.lang.Throwable)jsonParseException21);
    boolean b23 = jsonPrimitive10.equals((java.lang.Object)"com.google.gson.JsonParseException: {\"hi!\":1}");
    short s24 = jsonPrimitive10.getAsShort();
    com.google.gson.stream.JsonWriter jsonWriter25 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive10, jsonWriter25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)4);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test367"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    boolean b23 = jsonArray6.isJsonPrimitive();
    int i24 = jsonArray6.getAsInt();
    java.math.BigDecimal bigDecimal25 = jsonArray6.getAsBigDecimal();
    com.google.gson.JsonObject jsonObject26 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray28 = jsonObject26.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray30 = jsonObject26.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive33.getAsJsonPrimitive();
    jsonObject26.add("hi!", (com.google.gson.JsonElement)jsonPrimitive36);
    boolean b38 = jsonObject26.isJsonArray();
    com.google.gson.JsonElement jsonElement40 = jsonObject26.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive42 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d43 = jsonPrimitive42.getAsDouble();
    boolean b44 = jsonPrimitive42.isBoolean();
    boolean b45 = jsonObject26.equals((java.lang.Object)b44);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement46 = jsonObject26.entrySet();
    com.google.gson.JsonArray jsonArray48 = jsonObject26.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement50 = jsonObject26.remove("hi!");
    boolean b51 = jsonArray6.equals((java.lang.Object)jsonObject26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test368"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.remove("{\"hi!\":1}");
    int i23 = jsonObject0.size();
    com.google.gson.JsonElement jsonElement25 = jsonObject0.get("{\"hi!\":1}");
    com.google.gson.JsonPrimitive jsonPrimitive27 = jsonObject0.getAsJsonPrimitive("\"\\\"\\\"\"");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive27);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test369"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setDateFormat("4");
    com.google.gson.ExclusionStrategy exclusionStrategy7 = null;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.addSerializationExclusionStrategy(exclusionStrategy7);
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.addDeserializationExclusionStrategy(exclusionStrategy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test370"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    com.google.gson.JsonElement jsonElement25 = jsonObject0.get("hi!");
    com.google.gson.JsonObject jsonObject27 = jsonObject0.getAsJsonObject("com.google.gson.JsonParseException: hi!");
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject("com.google.gson.JsonParseException: hi!");
    boolean b31 = jsonObject0.has("{\"hi!\":1,\"{\\\"hi!\\\":1}\":\"1\"}");
    jsonObject0.addProperty("[\"4\"]", (java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test371"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setDateFormat((int)'1', (int)'4');
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy10 = null;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy10);
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy12);
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    int[] i_array18 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithModifiers(i_array18);
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder16.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy21 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLongSerializationPolicy(longSerializationPolicy21);
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder13.setLongSerializationPolicy(longSerializationPolicy21);
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy21);
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder6.generateNonExecutableJson();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test372"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    int[] i_array11 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy14 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLongSerializationPolicy(longSerializationPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy14);
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder6.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy22 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder19.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy22);
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder19.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder19.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy26 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder19.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy26);
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder34 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder34.setLenient();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder34.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder34.setVersion((double)'#');
    com.google.gson.Gson gson40 = gsonBuilder39.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy41 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder39.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy41);
    com.google.gson.GsonBuilder gsonBuilder43 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder43.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder43.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder45.disableInnerClassSerialization();
    int[] i_array48 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder45.excludeFieldsWithModifiers(i_array48);
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder42.excludeFieldsWithModifiers(i_array48);
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder50.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder53.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder56 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder56.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder56.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy59 = null;
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.addSerializationExclusionStrategy(exclusionStrategy59);
    com.google.gson.ExclusionStrategy exclusionStrategy61 = null;
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder58.addSerializationExclusionStrategy(exclusionStrategy61);
    com.google.gson.Gson gson63 = gsonBuilder58.create();
    java.lang.String str64 = gson63.toString();
    java.lang.reflect.Type type66 = null;
    java.lang.Appendable appendable67 = gson63.fromJson("", type66);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy68 = gson63.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder69 = gson63.excluder();
    com.google.gson.GsonBuilder gsonBuilder70 = gsonBuilder55.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder69);
    com.google.gson.GsonBuilder gsonBuilder71 = gsonBuilder33.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder69);
    com.google.gson.GsonBuilder gsonBuilder72 = gsonBuilder27.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder69);
    com.google.gson.GsonBuilder gsonBuilder73 = gsonBuilder18.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder73);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test373"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    float f17 = jsonArray0.getAsFloat();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy20 = null;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.addSerializationExclusionStrategy(exclusionStrategy20);
    boolean b22 = jsonArray0.equals((java.lang.Object)exclusionStrategy20);
    java.lang.String str23 = jsonArray0.getAsString();
    char char24 = jsonArray0.getAsCharacter();
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d27 = jsonPrimitive26.getAsDouble();
    java.lang.Number number28 = jsonPrimitive26.getAsNumber();
    com.google.gson.GsonBuilder gsonBuilder29 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy32 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder29.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy32);
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder29.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy36 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder35.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy36);
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder37.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy40 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.setFieldNamingPolicy(fieldNamingPolicy40);
    boolean b42 = jsonPrimitive26.equals((java.lang.Object)gsonBuilder39);
    double d43 = jsonPrimitive26.getAsDouble();
    float f44 = jsonPrimitive26.getAsFloat();
    boolean b45 = jsonArray0.equals((java.lang.Object)jsonPrimitive26);
    java.lang.String str46 = jsonPrimitive26.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f17 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char24 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d27 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f44 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "4"+ "'", str46.equals("4"));

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test374"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException1 = new com.google.gson.stream.MalformedJsonException("0");
    java.lang.String str2 = malformedJsonException1.toString();
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "com.google.gson.stream.MalformedJsonException: 0"+ "'", str2.equals("com.google.gson.stream.MalformedJsonException: 0"));

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test375"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("1");
    double d2 = jsonPrimitive1.getAsDouble();
    long long3 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 1L);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test376"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    java.lang.String str5 = gson4.toString();
    java.lang.Object obj6 = null;
    java.lang.String str7 = gson4.toJson(obj6);
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy8 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy9 = gson4.getAdapter(typetoken_fieldNamingStrategy8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "null"+ "'", str7.equals("null"));

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test377"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    float f4 = jsonPrimitive1.getAsFloat();
    float f5 = jsonPrimitive1.getAsFloat();
    double d6 = jsonPrimitive1.getAsDouble();
    java.lang.String str7 = jsonPrimitive1.getAsString();
    java.lang.Number number8 = jsonPrimitive1.getAsNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f5 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1"+ "'", str7.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number8 + "' != '" + 1+ "'", number8.equals(1));

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test378"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy10 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder7.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy10);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.enableComplexMapKeySerialization();
    com.google.gson.Gson gson13 = gsonBuilder7.create();
    boolean b14 = gson13.htmlSafe();
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    boolean b20 = jsonArray15.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    int i27 = jsonPrimitive22.getAsInt();
    boolean b28 = jsonPrimitive22.getAsBoolean();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive22);
    int i30 = jsonArray15.size();
    short s31 = jsonArray15.getAsShort();
    int i32 = jsonArray15.getAsInt();
    com.google.gson.JsonElement jsonElement33 = gson13.toJsonTree((java.lang.Object)jsonArray15);
    java.lang.String str34 = gson6.toJson((com.google.gson.JsonElement)jsonArray15);
    com.google.gson.GsonBuilder gsonBuilder35 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder35.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder35.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy38 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder35.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy38);
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder35.enableComplexMapKeySerialization();
    com.google.gson.Gson gson41 = gsonBuilder35.create();
    boolean b42 = gson41.htmlSafe();
    com.google.gson.JsonArray jsonArray43 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder44 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder44.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder44.setLenient();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder44.excludeFieldsWithoutExposeAnnotation();
    boolean b48 = jsonArray43.equals((java.lang.Object)gsonBuilder44);
    com.google.gson.JsonPrimitive jsonPrimitive50 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b51 = jsonPrimitive50.isString();
    boolean b52 = jsonPrimitive50.isBoolean();
    java.lang.String str53 = jsonPrimitive50.getAsString();
    boolean b54 = jsonPrimitive50.isJsonObject();
    int i55 = jsonPrimitive50.getAsInt();
    boolean b56 = jsonPrimitive50.getAsBoolean();
    jsonArray43.add((com.google.gson.JsonElement)jsonPrimitive50);
    int i58 = jsonArray43.size();
    short s59 = jsonArray43.getAsShort();
    int i60 = jsonArray43.getAsInt();
    com.google.gson.JsonElement jsonElement61 = gson41.toJsonTree((java.lang.Object)jsonArray43);
    com.google.gson.JsonPrimitive jsonPrimitive63 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d64 = jsonPrimitive63.getAsDouble();
    boolean b65 = jsonPrimitive63.isBoolean();
    boolean b66 = jsonPrimitive63.isJsonArray();
    java.lang.String str67 = gson41.toJson((com.google.gson.JsonElement)jsonPrimitive63);
    long long68 = jsonPrimitive63.getAsLong();
    boolean b69 = jsonPrimitive63.isString();
    java.lang.reflect.Type type70 = null;
    java.lang.Appendable appendable71 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson6.toJson((java.lang.Object)jsonPrimitive63, type70, appendable71);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s31 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[1]"+ "'", str34.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "1"+ "'", str53.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s59 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d64 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "\"4\""+ "'", str67.equals("\"4\""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long68 == 4L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test379"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder5.disableHtmlEscaping();
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls11 = null;
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setFieldNamingPolicy(fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder16.setDateFormat(2);
    com.google.gson.GsonBuilder gsonBuilder22 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.setLenient();
    int[] i_array26 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithModifiers(i_array26);
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder29 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy32 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder29.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy32);
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder29.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy36 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder35.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy36);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder27.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy36);
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder16.setFieldNamingPolicy(fieldNamingPolicy36);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder5.registerTypeHierarchyAdapter(cls11, (java.lang.Object)fieldNamingPolicy36);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test380"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    int[] i_array5 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.excludeFieldsWithModifiers(i_array5);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setDateFormat((int)(byte)10);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.setLenient();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test381"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy34 = gson7.fieldNamingStrategy();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy34);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test382"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    boolean b9 = gson7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setLenient();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder10.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder10.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder10.setDateFormat((int)(short)10, (int)(short)0);
    java.lang.Appendable appendable19 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gsonBuilder18, appendable19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test383"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.serializeSpecialFloatingPointValues();
    java.lang.reflect.Type type4 = null;
    com.google.gson.GsonBuilder gsonBuilder5 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy8 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy8);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder5.disableHtmlEscaping();
    com.google.gson.Gson gson11 = gsonBuilder10.create();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy15 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder12.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy15);
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder12.enableComplexMapKeySerialization();
    com.google.gson.Gson gson18 = gsonBuilder12.create();
    boolean b19 = gson18.htmlSafe();
    com.google.gson.JsonArray jsonArray20 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setLenient();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.excludeFieldsWithoutExposeAnnotation();
    boolean b25 = jsonArray20.equals((java.lang.Object)gsonBuilder21);
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b28 = jsonPrimitive27.isString();
    boolean b29 = jsonPrimitive27.isBoolean();
    java.lang.String str30 = jsonPrimitive27.getAsString();
    boolean b31 = jsonPrimitive27.isJsonObject();
    int i32 = jsonPrimitive27.getAsInt();
    boolean b33 = jsonPrimitive27.getAsBoolean();
    jsonArray20.add((com.google.gson.JsonElement)jsonPrimitive27);
    int i35 = jsonArray20.size();
    short s36 = jsonArray20.getAsShort();
    int i37 = jsonArray20.getAsInt();
    com.google.gson.JsonElement jsonElement38 = gson18.toJsonTree((java.lang.Object)jsonArray20);
    java.lang.String str39 = gson11.toJson((com.google.gson.JsonElement)jsonArray20);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder3.registerTypeAdapter(type4, (java.lang.Object)jsonArray20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "1"+ "'", str30.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s36 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[1]"+ "'", str39.equals("[1]"));

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test384"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setLenient();
    int[] i_array8 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithModifiers(i_array8);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder2.excludeFieldsWithModifiers(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test385"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Boolean)false);
    jsonObject0.addProperty("{\"hi!\":1}", (java.lang.Character)' ');
    boolean b21 = jsonObject0.isJsonNull();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement22 = jsonObject0.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement22);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test386"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i2 = jsonPrimitive1.getAsInt();
    boolean b3 = jsonPrimitive1.isString();
    boolean b4 = jsonPrimitive1.getAsBoolean();
    com.google.gson.JsonPrimitive jsonPrimitive5 = jsonPrimitive1.getAsJsonPrimitive();
    java.math.BigInteger bigInteger6 = jsonPrimitive1.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger6);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test387"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy3 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement5 = longSerializationPolicy3.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.setLongSerializationPolicy(longSerializationPolicy3);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setDateFormat("");
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.generateNonExecutableJson();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test388"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.setDateFormat("0");
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    int[] i_array10 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithModifiers(i_array10);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder8.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy13 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLongSerializationPolicy(longSerializationPolicy13);
    com.google.gson.JsonElement jsonElement16 = longSerializationPolicy13.serialize((java.lang.Long)1L);
    com.google.gson.JsonElement jsonElement18 = longSerializationPolicy13.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder3.setLongSerializationPolicy(longSerializationPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test389"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d22 = jsonPrimitive21.getAsDouble();
    boolean b23 = jsonPrimitive21.isJsonObject();
    boolean b24 = jsonPrimitive21.isNumber();
    boolean b25 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive21);
    java.lang.String str26 = jsonPrimitive21.getAsString();
    byte byte27 = jsonPrimitive21.getAsByte();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "4"+ "'", str26.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte27 == (byte)4);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test390"); }


    com.google.gson.LongSerializationPolicy longSerializationPolicy0 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement2 = longSerializationPolicy0.serialize((java.lang.Long)(-1L));
    com.google.gson.JsonElement jsonElement4 = longSerializationPolicy0.serialize((java.lang.Long)0L);
    com.google.gson.JsonElement jsonElement6 = longSerializationPolicy0.serialize((java.lang.Long)100L);
    com.google.gson.JsonElement jsonElement8 = longSerializationPolicy0.serialize((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test391"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    byte byte4 = jsonPrimitive1.getAsByte();
    boolean b5 = jsonPrimitive1.getAsBoolean();
    int i6 = jsonPrimitive1.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test392"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    java.lang.String str5 = gson4.toString();
    com.google.gson.JsonObject jsonObject6 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray8 = jsonObject6.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray10 = jsonObject6.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    java.lang.Number number15 = jsonPrimitive13.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive16 = jsonPrimitive13.getAsJsonPrimitive();
    jsonObject6.add("hi!", (com.google.gson.JsonElement)jsonPrimitive16);
    jsonObject6.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive22 = jsonObject6.getAsJsonPrimitive("null");
    jsonObject6.addProperty("com.google.gson.JsonParseException: hi!", (java.lang.Boolean)false);
    java.lang.String str26 = gson4.toJson((com.google.gson.JsonElement)jsonObject6);
    com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.setLenient();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder28.excludeFieldsWithoutExposeAnnotation();
    boolean b32 = jsonArray27.equals((java.lang.Object)gsonBuilder28);
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    boolean b36 = jsonPrimitive34.isBoolean();
    java.lang.String str37 = jsonPrimitive34.getAsString();
    boolean b38 = jsonPrimitive34.isJsonObject();
    int i39 = jsonPrimitive34.getAsInt();
    boolean b40 = jsonPrimitive34.getAsBoolean();
    jsonArray27.add((com.google.gson.JsonElement)jsonPrimitive34);
    int i42 = jsonArray27.size();
    short s43 = jsonArray27.getAsShort();
    float f44 = jsonArray27.getAsFloat();
    com.google.gson.GsonBuilder gsonBuilder45 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder45.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy47 = null;
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder46.addSerializationExclusionStrategy(exclusionStrategy47);
    boolean b49 = jsonArray27.equals((java.lang.Object)exclusionStrategy47);
    int i50 = jsonArray27.size();
    int i51 = jsonArray27.getAsInt();
    java.lang.String str52 = gson4.toJson((com.google.gson.JsonElement)jsonArray27);
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy53 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy54 = gson4.getAdapter(typetoken_fieldNamingStrategy53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}"+ "'", str26.equals("{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s43 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f44 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[1]"+ "'", str52.equals("[1]"));

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test393"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    boolean b34 = gson7.serializeNulls();
    com.google.gson.stream.JsonReader jsonReader35 = null;
    java.lang.reflect.Type type36 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array37 = gson7.fromJson(jsonReader35, type36);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test394"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.remove("hi!");
    jsonObject0.addProperty("hi!", (java.lang.Character)'1');
    jsonObject0.addProperty("{}", (java.lang.Character)'1');
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull31 = jsonObject0.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test395"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.JsonElement jsonElement35 = jsonObject18.remove("");
    jsonObject18.addProperty("com.google.gson.stream.MalformedJsonException: 0", "");
    com.google.gson.GsonBuilder gsonBuilder39 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.setLenient();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder41.setLenient();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder41.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder41.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder44.setDateFormat((int)(short)1);
    boolean b47 = jsonObject18.equals((java.lang.Object)gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test396"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    boolean b3 = jsonPrimitive2.isJsonNull();
    boolean b4 = jsonPrimitive2.isString();
    boolean b5 = jsonPrimitive2.isNumber();
    java.lang.String str6 = jsonPrimitive2.toString();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive2.getAsBigDecimal();
    java.math.BigInteger bigInteger8 = jsonPrimitive2.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1"+ "'", str6.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger8);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test397"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    float f4 = jsonPrimitive1.getAsFloat();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive6 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger5);
    java.lang.Number number7 = jsonPrimitive6.getAsNumber();
    short s8 = jsonPrimitive6.getAsShort();
    boolean b9 = jsonPrimitive6.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test398"); }


    java.lang.Throwable throwable3 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException(throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException4);
    java.lang.String str7 = malformedJsonException6.toString();
    java.lang.Throwable throwable11 = null;
    com.google.gson.JsonParseException jsonParseException12 = new com.google.gson.JsonParseException("", throwable11);
    java.lang.Throwable[] throwable_array13 = jsonParseException12.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("{\"hi!\":1}", (java.lang.Throwable)jsonParseException12);
    com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("[10]", (java.lang.Throwable)jsonParseException12);
    malformedJsonException6.addSuppressed((java.lang.Throwable)jsonParseException12);
    com.google.gson.stream.MalformedJsonException malformedJsonException17 = new com.google.gson.stream.MalformedJsonException("com.google.gson.JsonParseException: [1,1]", (java.lang.Throwable)malformedJsonException6);
    java.lang.Throwable[] throwable_array18 = malformedJsonException6.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "com.google.gson.stream.MalformedJsonException: "+ "'", str7.equals("com.google.gson.stream.MalformedJsonException: "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array18);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test399"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    boolean b23 = jsonArray0.isJsonNull();
    int i24 = jsonArray0.size();
    com.google.gson.JsonObject jsonObject25 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray27 = jsonObject25.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray29 = jsonObject25.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    java.lang.Number number34 = jsonPrimitive32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive35 = jsonPrimitive32.getAsJsonPrimitive();
    jsonObject25.add("hi!", (com.google.gson.JsonElement)jsonPrimitive35);
    jsonObject25.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive41 = jsonObject25.getAsJsonPrimitive("null");
    jsonArray0.add((com.google.gson.JsonElement)jsonObject25);
    jsonArray0.add("{}");
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal45 = jsonArray0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number34 + "' != '" + 1+ "'", number34.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive41);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test400"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d22 = jsonPrimitive21.getAsDouble();
    boolean b23 = jsonPrimitive21.isJsonObject();
    boolean b24 = jsonPrimitive21.isNumber();
    boolean b25 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive21);
    java.lang.String str26 = jsonPrimitive21.getAsString();
    java.math.BigInteger bigInteger27 = jsonPrimitive21.getAsBigInteger();
    java.lang.String str28 = jsonPrimitive21.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "4"+ "'", str26.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "4"+ "'", str28.equals("4"));

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test401"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    java.math.BigDecimal bigDecimal5 = jsonPrimitive1.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test402"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    java.lang.Number number5 = jsonPrimitive1.getAsNumber();
    long long6 = jsonPrimitive1.getAsLong();
    java.lang.Number number7 = jsonPrimitive1.getAsNumber();
    java.math.BigInteger bigInteger8 = jsonPrimitive1.getAsBigInteger();
    float f9 = jsonPrimitive1.getAsFloat();
    int i10 = jsonPrimitive1.getAsInt();
    java.lang.Number number11 = jsonPrimitive1.getAsNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number5 + "' != '" + 1+ "'", number5.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number7 + "' != '" + 1+ "'", number7.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f9 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test403"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    boolean b20 = jsonArray15.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    int i27 = jsonPrimitive22.getAsInt();
    boolean b28 = jsonPrimitive22.getAsBoolean();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive22);
    int i30 = jsonArray15.size();
    short s31 = jsonArray15.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    boolean b36 = jsonPrimitive33.isBoolean();
    boolean b37 = jsonArray15.remove((com.google.gson.JsonElement)jsonPrimitive33);
    jsonArray15.add((java.lang.Number)(byte)10);
    java.lang.String str40 = gson7.toJson((java.lang.Object)jsonArray15);
    java.lang.String str41 = jsonArray15.getAsString();
    java.lang.String str42 = jsonArray15.getAsString();
    java.lang.String str43 = jsonArray15.getAsString();
    short s44 = jsonArray15.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s31 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[10]"+ "'", str40.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10"+ "'", str41.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "10"+ "'", str42.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "10"+ "'", str43.equals("10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s44 == (short)10);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test404"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.JsonArray jsonArray12 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLenient();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    boolean b17 = jsonArray12.equals((java.lang.Object)gsonBuilder13);
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b20 = jsonPrimitive19.isString();
    boolean b21 = jsonPrimitive19.isBoolean();
    java.lang.String str22 = jsonPrimitive19.getAsString();
    boolean b23 = jsonPrimitive19.isJsonObject();
    int i24 = jsonPrimitive19.getAsInt();
    boolean b25 = jsonPrimitive19.getAsBoolean();
    jsonArray12.add((com.google.gson.JsonElement)jsonPrimitive19);
    java.math.BigInteger bigInteger27 = jsonArray12.getAsBigInteger();
    com.google.gson.JsonArray jsonArray28 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder29 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.setLenient();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.excludeFieldsWithoutExposeAnnotation();
    boolean b33 = jsonArray28.equals((java.lang.Object)gsonBuilder29);
    com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b36 = jsonPrimitive35.isString();
    boolean b37 = jsonPrimitive35.isBoolean();
    java.lang.String str38 = jsonPrimitive35.getAsString();
    boolean b39 = jsonPrimitive35.isJsonObject();
    int i40 = jsonPrimitive35.getAsInt();
    boolean b41 = jsonPrimitive35.getAsBoolean();
    jsonArray28.add((com.google.gson.JsonElement)jsonPrimitive35);
    char char43 = jsonArray28.getAsCharacter();
    com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder45 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder45.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder45.setLenient();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder45.excludeFieldsWithoutExposeAnnotation();
    boolean b49 = jsonArray44.equals((java.lang.Object)gsonBuilder45);
    com.google.gson.JsonPrimitive jsonPrimitive51 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b52 = jsonPrimitive51.isString();
    boolean b53 = jsonPrimitive51.isBoolean();
    java.lang.String str54 = jsonPrimitive51.getAsString();
    boolean b55 = jsonPrimitive51.isJsonObject();
    int i56 = jsonPrimitive51.getAsInt();
    boolean b57 = jsonPrimitive51.getAsBoolean();
    jsonArray44.add((com.google.gson.JsonElement)jsonPrimitive51);
    jsonArray28.addAll(jsonArray44);
    double d60 = jsonArray44.getAsDouble();
    jsonArray12.addAll(jsonArray44);
    short s62 = jsonArray44.getAsShort();
    java.lang.String str63 = jsonArray44.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive65 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d66 = jsonPrimitive65.getAsDouble();
    java.lang.Number number67 = jsonPrimitive65.getAsNumber();
    jsonArray44.add(number67);
    com.google.gson.JsonElement jsonElement70 = jsonArray44.get((int)(byte)1);
    com.google.gson.JsonElement jsonElement71 = gson7.toJsonTree((java.lang.Object)jsonElement70);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy72 = gson7.fieldNamingStrategy();
    java.io.Writer writer73 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter74 = gson7.newJsonWriter(writer73);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "1"+ "'", str22.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "1"+ "'", str38.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char43 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "1"+ "'", str54.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d60 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s62 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "1"+ "'", str63.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d66 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy72);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test405"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonArray jsonArray17 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setLenient();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.excludeFieldsWithoutExposeAnnotation();
    boolean b22 = jsonArray17.equals((java.lang.Object)gsonBuilder18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    boolean b26 = jsonPrimitive24.isBoolean();
    java.lang.String str27 = jsonPrimitive24.getAsString();
    boolean b28 = jsonPrimitive24.isJsonObject();
    int i29 = jsonPrimitive24.getAsInt();
    boolean b30 = jsonPrimitive24.getAsBoolean();
    jsonArray17.add((com.google.gson.JsonElement)jsonPrimitive24);
    int i32 = jsonArray17.size();
    jsonArray0.addAll(jsonArray17);
    jsonArray0.add("com.google.gson.JsonParseException: {\"hi!\":1}");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number36 = jsonArray0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1"+ "'", str27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test406"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    java.lang.String str11 = gson7.toString();
    java.lang.String str12 = gson7.toString();
    boolean b13 = gson7.serializeNulls();
    java.io.Reader reader14 = null;
    java.lang.Class<int[]> cls15 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array16 = gson7.fromJson(reader14, cls15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test407"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder11 = gson7.excluder();
    com.google.gson.JsonObject jsonObject12 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray14 = jsonObject12.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray16 = jsonObject12.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b20 = jsonPrimitive19.isString();
    java.lang.Number number21 = jsonPrimitive19.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive22 = jsonPrimitive19.getAsJsonPrimitive();
    jsonObject12.add("hi!", (com.google.gson.JsonElement)jsonPrimitive22);
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.reflect.Type type25 = null;
    java.lang.Appendable appendable26 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)b24, type25, appendable26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number21 + "' != '" + 1+ "'", number21.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test408"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder12 = gson7.excluder();
    com.google.gson.internal.Excluder excluder13 = gson7.excluder();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder13);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test409"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setLenient();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy8 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.setFieldNamingPolicy(fieldNamingPolicy8);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    int[] i_array11 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder2.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setDateFormat("\"a\"");
    com.google.gson.ExclusionStrategy exclusionStrategy16 = null;
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder13.addDeserializationExclusionStrategy(exclusionStrategy16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test410"); }


    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException6 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException4.addSuppressed((java.lang.Throwable)jsonParseException6);
    com.google.gson.JsonParseException jsonParseException8 = new com.google.gson.JsonParseException("null", (java.lang.Throwable)jsonParseException4);
    java.lang.String str9 = jsonParseException4.toString();
    com.google.gson.JsonParseException jsonParseException10 = new com.google.gson.JsonParseException("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Throwable)jsonParseException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException11 = new com.google.gson.stream.MalformedJsonException("[1,1]", (java.lang.Throwable)jsonParseException4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "com.google.gson.JsonParseException: hi!"+ "'", str9.equals("com.google.gson.JsonParseException: hi!"));

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test411"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    boolean b23 = jsonArray18.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    int i30 = jsonPrimitive25.getAsInt();
    boolean b31 = jsonPrimitive25.getAsBoolean();
    jsonArray18.add((com.google.gson.JsonElement)jsonPrimitive25);
    java.math.BigInteger bigInteger33 = jsonArray18.getAsBigInteger();
    int i34 = jsonArray18.getAsInt();
    com.google.gson.JsonNull jsonNull35 = new com.google.gson.JsonNull();
    boolean b36 = jsonArray18.contains((com.google.gson.JsonElement)jsonNull35);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement37 = jsonArray18.iterator();
    java.math.BigDecimal bigDecimal38 = jsonArray18.getAsBigDecimal();
    boolean b39 = jsonArray18.getAsBoolean();
    java.lang.String str40 = gson7.toJson((com.google.gson.JsonElement)jsonArray18);
    com.google.gson.JsonObject jsonObject41 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray43 = jsonObject41.getAsJsonArray("1");
    jsonObject41.addProperty("com.google.gson.stream.MalformedJsonException: hi!", "hi!");
    jsonObject41.addProperty("[1]", (java.lang.Character)'4');
    int i50 = jsonObject41.size();
    java.lang.String str51 = gson7.toJson((com.google.gson.JsonElement)jsonObject41);
    java.lang.reflect.Type type53 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable54 = gson7.fromJson("com.google.gson.JsonParseException: [1,1]", type53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[1]"+ "'", str40.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "{\"com.google.gson.stream.MalformedJsonException: hi!\":\"hi!\",\"[1]\":\"4\"}"+ "'", str51.equals("{\"com.google.gson.stream.MalformedJsonException: hi!\":\"hi!\",\"[1]\":\"4\"}"));

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test412"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    char char17 = jsonPrimitive13.getAsCharacter();
    long long18 = jsonPrimitive13.getAsLong();
    com.google.gson.JsonElement jsonElement19 = gson7.toJsonTree((java.lang.Object)jsonPrimitive13);
    com.google.gson.JsonObject jsonObject20 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray22 = jsonObject20.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray24 = jsonObject20.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b28 = jsonPrimitive27.isString();
    java.lang.Number number29 = jsonPrimitive27.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive30 = jsonPrimitive27.getAsJsonPrimitive();
    jsonObject20.add("hi!", (com.google.gson.JsonElement)jsonPrimitive30);
    boolean b32 = jsonObject20.isJsonArray();
    com.google.gson.JsonElement jsonElement34 = jsonObject20.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d37 = jsonPrimitive36.getAsDouble();
    boolean b38 = jsonPrimitive36.isBoolean();
    boolean b39 = jsonObject20.equals((java.lang.Object)b38);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement40 = jsonObject20.entrySet();
    com.google.gson.JsonArray jsonArray42 = jsonObject20.getAsJsonArray("1");
    int i43 = jsonObject20.size();
    com.google.gson.JsonElement jsonElement45 = jsonObject20.remove("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonArray jsonArray47 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder48 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder48.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder48.setLenient();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder48.excludeFieldsWithoutExposeAnnotation();
    boolean b52 = jsonArray47.equals((java.lang.Object)gsonBuilder48);
    com.google.gson.JsonPrimitive jsonPrimitive54 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b55 = jsonPrimitive54.isString();
    boolean b56 = jsonPrimitive54.isBoolean();
    java.lang.String str57 = jsonPrimitive54.getAsString();
    boolean b58 = jsonPrimitive54.isJsonObject();
    int i59 = jsonPrimitive54.getAsInt();
    boolean b60 = jsonPrimitive54.getAsBoolean();
    jsonArray47.add((com.google.gson.JsonElement)jsonPrimitive54);
    int i62 = jsonArray47.size();
    short s63 = jsonArray47.getAsShort();
    java.lang.String str64 = jsonArray47.getAsString();
    jsonObject20.add("[\"4\"]", (com.google.gson.JsonElement)jsonArray47);
    java.lang.String str66 = gson7.toJson((com.google.gson.JsonElement)jsonArray47);
    java.lang.String str67 = gson7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number29 + "' != '" + 1+ "'", number29.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d37 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "1"+ "'", str57.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s63 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "1"+ "'", str64.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[1]"+ "'", str66.equals("[1]"));

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test413"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    char char17 = jsonPrimitive13.getAsCharacter();
    long long18 = jsonPrimitive13.getAsLong();
    com.google.gson.JsonElement jsonElement19 = gson7.toJsonTree((java.lang.Object)jsonPrimitive13);
    com.google.gson.JsonObject jsonObject20 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray22 = jsonObject20.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray24 = jsonObject20.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b28 = jsonPrimitive27.isString();
    java.lang.Number number29 = jsonPrimitive27.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive30 = jsonPrimitive27.getAsJsonPrimitive();
    jsonObject20.add("hi!", (com.google.gson.JsonElement)jsonPrimitive30);
    boolean b32 = jsonObject20.isJsonArray();
    com.google.gson.JsonElement jsonElement34 = jsonObject20.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d37 = jsonPrimitive36.getAsDouble();
    boolean b38 = jsonPrimitive36.isBoolean();
    boolean b39 = jsonObject20.equals((java.lang.Object)b38);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement40 = jsonObject20.entrySet();
    com.google.gson.JsonArray jsonArray42 = jsonObject20.getAsJsonArray("1");
    int i43 = jsonObject20.size();
    com.google.gson.JsonElement jsonElement45 = jsonObject20.remove("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonArray jsonArray47 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder48 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder48.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder48.setLenient();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder48.excludeFieldsWithoutExposeAnnotation();
    boolean b52 = jsonArray47.equals((java.lang.Object)gsonBuilder48);
    com.google.gson.JsonPrimitive jsonPrimitive54 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b55 = jsonPrimitive54.isString();
    boolean b56 = jsonPrimitive54.isBoolean();
    java.lang.String str57 = jsonPrimitive54.getAsString();
    boolean b58 = jsonPrimitive54.isJsonObject();
    int i59 = jsonPrimitive54.getAsInt();
    boolean b60 = jsonPrimitive54.getAsBoolean();
    jsonArray47.add((com.google.gson.JsonElement)jsonPrimitive54);
    int i62 = jsonArray47.size();
    short s63 = jsonArray47.getAsShort();
    java.lang.String str64 = jsonArray47.getAsString();
    jsonObject20.add("[\"4\"]", (com.google.gson.JsonElement)jsonArray47);
    java.lang.String str66 = gson7.toJson((com.google.gson.JsonElement)jsonArray47);
    boolean b67 = gson7.serializeNulls();
    java.lang.Class<java.lang.reflect.Type> cls68 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type69 = gson7.getAdapter(cls68);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char17 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number29 + "' != '" + 1+ "'", number29.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d37 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "1"+ "'", str57.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s63 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "1"+ "'", str64.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[1]"+ "'", str66.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test414"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setDateFormat("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder0.setDateFormat(0, 10);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.setLenient();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test415"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    com.google.gson.JsonObject jsonObject42 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray44 = jsonObject42.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray46 = jsonObject42.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive49 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b50 = jsonPrimitive49.isString();
    java.lang.Number number51 = jsonPrimitive49.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive52 = jsonPrimitive49.getAsJsonPrimitive();
    jsonObject42.add("hi!", (com.google.gson.JsonElement)jsonPrimitive52);
    boolean b54 = jsonObject42.isJsonArray();
    com.google.gson.JsonElement jsonElement56 = jsonObject42.get("hi!");
    jsonObject18.add("", (com.google.gson.JsonElement)jsonObject42);
    jsonObject18.addProperty("{\"hi!\":1}", "\"\\\"\\\"\"");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number51 + "' != '" + 1+ "'", number51.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement56);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test416"); }


    java.lang.Throwable throwable0 = null;
    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException(throwable0);
    java.lang.Throwable throwable3 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException(throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException4);
    java.lang.Throwable[] throwable_array6 = malformedJsonException4.getSuppressed();
    jsonParseException1.addSuppressed((java.lang.Throwable)malformedJsonException4);
    java.lang.Throwable throwable11 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException12 = new com.google.gson.stream.MalformedJsonException(throwable11);
    com.google.gson.stream.MalformedJsonException malformedJsonException13 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException12);
    com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException12);
    java.lang.String str15 = malformedJsonException14.toString();
    com.google.gson.JsonParseException jsonParseException16 = new com.google.gson.JsonParseException("com.google.gson.stream.MalformedJsonException", (java.lang.Throwable)malformedJsonException14);
    com.google.gson.stream.MalformedJsonException malformedJsonException17 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException16);
    malformedJsonException4.addSuppressed((java.lang.Throwable)malformedJsonException17);
    com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "com.google.gson.stream.MalformedJsonException: "+ "'", str15.equals("com.google.gson.stream.MalformedJsonException: "));

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test417"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    java.lang.Number number52 = jsonArray32.getAsNumber();
    int i53 = jsonArray32.getAsInt();
    byte byte54 = jsonArray32.getAsByte();
    java.lang.String str55 = jsonArray32.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number52 + "' != '" + 1+ "'", number52.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte54 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "1"+ "'", str55.equals("1"));

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test418"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithoutExposeAnnotation();
    boolean b28 = jsonArray23.equals((java.lang.Object)gsonBuilder24);
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b31 = jsonPrimitive30.isString();
    boolean b32 = jsonPrimitive30.isBoolean();
    java.lang.String str33 = jsonPrimitive30.getAsString();
    boolean b34 = jsonPrimitive30.isJsonObject();
    int i35 = jsonPrimitive30.getAsInt();
    boolean b36 = jsonPrimitive30.getAsBoolean();
    jsonArray23.add((com.google.gson.JsonElement)jsonPrimitive30);
    int i38 = jsonArray23.size();
    short s39 = jsonArray23.getAsShort();
    int i40 = jsonArray23.getAsInt();
    jsonArray0.addAll(jsonArray23);
    double d42 = jsonArray0.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s39 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d42 == 1.0d);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test419"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingPolicy(fieldNamingPolicy11);
    com.google.gson.Gson gson13 = gsonBuilder10.create();
    boolean b14 = gson13.serializeNulls();
    com.google.gson.stream.JsonReader jsonReader15 = null;
    java.lang.reflect.Type type16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array17 = gson13.fromJson(jsonReader15, type16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test420"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    jsonArray16.add((java.lang.Number)(byte)1);
    com.google.gson.JsonElement jsonElement38 = jsonArray16.remove((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal39 = jsonArray16.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test421"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonArray jsonArray19 = jsonObject0.getAsJsonArray("null");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.get("com.google.gson.stream.MalformedJsonException: {\"hi!\":1}");
    com.google.gson.JsonObject jsonObject24 = jsonObject0.getAsJsonObject("[1,\"{\\\"hi!\\\":1,\\\"com.google.gson.stream.MalformedJsonException: \\\":\\\"4\\\",\\\"null\\\":false}\"]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject24);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test422"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder8.excludeFieldsWithModifiers(i_array14);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder8.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy23 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.setFieldNamingPolicy(fieldNamingPolicy23);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setDateFormat((-1));
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setLenient();
    int[] i_array31 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.excludeFieldsWithModifiers(i_array31);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder29.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy34 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.JsonElement jsonElement37 = longSerializationPolicy34.serialize((java.lang.Long)1L);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder26.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.JsonElement jsonElement40 = longSerializationPolicy34.serialize((java.lang.Long)10L);
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder18.setLongSerializationPolicy(longSerializationPolicy34);
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder18.setVersion((double)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test423"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.Object obj12 = null;
    java.lang.String str13 = gson7.toJson(obj12);
    java.lang.String str14 = gson7.toString();
    java.lang.Class<java.lang.reflect.Type> cls15 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type16 = gson7.getAdapter(cls15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null"+ "'", str13.equals("null"));

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test424"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    java.lang.String str18 = jsonArray0.toString();
    char char19 = jsonArray0.getAsCharacter();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement21 = jsonArray0.get((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[1]"+ "'", str18.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '1');

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test425"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    byte byte24 = jsonArray6.getAsByte();
    jsonArray6.add((java.lang.Boolean)false);
    com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.setLenient();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder28.excludeFieldsWithoutExposeAnnotation();
    boolean b32 = jsonArray27.equals((java.lang.Object)gsonBuilder28);
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    boolean b36 = jsonPrimitive34.isBoolean();
    java.lang.String str37 = jsonPrimitive34.getAsString();
    boolean b38 = jsonPrimitive34.isJsonObject();
    int i39 = jsonPrimitive34.getAsInt();
    boolean b40 = jsonPrimitive34.getAsBoolean();
    jsonArray27.add((com.google.gson.JsonElement)jsonPrimitive34);
    java.math.BigInteger bigInteger42 = jsonArray27.getAsBigInteger();
    int i43 = jsonArray27.getAsInt();
    com.google.gson.JsonNull jsonNull44 = new com.google.gson.JsonNull();
    boolean b45 = jsonArray27.contains((com.google.gson.JsonElement)jsonNull44);
    jsonArray27.add((java.lang.Boolean)true);
    jsonArray27.add((java.lang.Character)'4');
    boolean b50 = jsonArray6.remove((com.google.gson.JsonElement)jsonArray27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte24 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test426"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.addDeserializationExclusionStrategy(exclusionStrategy6);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder5.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.generateNonExecutableJson();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test427"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setLenient();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy8 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.setFieldNamingPolicy(fieldNamingPolicy8);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    int[] i_array11 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder2.excludeFieldsWithModifiers(i_array11);
    java.lang.reflect.Type type14 = null;
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder15.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder22 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.setLenient();
    int[] i_array26 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithModifiers(i_array26);
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder21.excludeFieldsWithModifiers(i_array26);
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder21.setDateFormat((int)(byte)0);
    com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    boolean b36 = jsonArray31.equals((java.lang.Object)gsonBuilder32);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b39 = jsonPrimitive38.isString();
    boolean b40 = jsonPrimitive38.isBoolean();
    java.lang.String str41 = jsonPrimitive38.getAsString();
    boolean b42 = jsonPrimitive38.isJsonObject();
    int i43 = jsonPrimitive38.getAsInt();
    boolean b44 = jsonPrimitive38.getAsBoolean();
    jsonArray31.add((com.google.gson.JsonElement)jsonPrimitive38);
    java.math.BigInteger bigInteger46 = jsonArray31.getAsBigInteger();
    int i47 = jsonArray31.getAsInt();
    com.google.gson.JsonNull jsonNull48 = new com.google.gson.JsonNull();
    boolean b49 = jsonArray31.contains((com.google.gson.JsonElement)jsonNull48);
    com.google.gson.LongSerializationPolicy longSerializationPolicy50 = com.google.gson.LongSerializationPolicy.DEFAULT;
    boolean b51 = jsonNull48.equals((java.lang.Object)longSerializationPolicy50);
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder30.setLongSerializationPolicy(longSerializationPolicy50);
    com.google.gson.Gson gson53 = gsonBuilder52.create();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy54 = gson53.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder55 = gson53.excluder();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder2.registerTypeAdapter(type14, (java.lang.Object)excluder55);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "1"+ "'", str41.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder55);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test428"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    com.google.gson.JsonElement jsonElement25 = jsonObject0.get("hi!");
    com.google.gson.JsonObject jsonObject27 = jsonObject0.getAsJsonObject("com.google.gson.JsonParseException: hi!");
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject("null");
    // The following exception was thrown during execution in test generation
    try {
    boolean b31 = jsonObject29.has("{\"hi!\":1,\"0\":\"a\",\"com.google.gson.JsonParseException: hi!\":false}");
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject29);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test429"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    com.google.gson.JsonObject jsonObject26 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray28 = jsonObject26.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray30 = jsonObject26.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive33.getAsJsonPrimitive();
    jsonObject26.add("hi!", (com.google.gson.JsonElement)jsonPrimitive36);
    boolean b38 = jsonObject26.isJsonArray();
    com.google.gson.JsonElement jsonElement40 = jsonObject26.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive42 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d43 = jsonPrimitive42.getAsDouble();
    boolean b44 = jsonPrimitive42.isBoolean();
    boolean b45 = jsonObject26.equals((java.lang.Object)b44);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement46 = jsonObject26.entrySet();
    jsonObject26.addProperty("1", (java.lang.Character)'4');
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement50 = jsonObject26.entrySet();
    boolean b51 = jsonArray6.equals((java.lang.Object)jsonObject26);
    jsonArray6.add((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test430"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)(-1.0f));
    int i2 = jsonPrimitive1.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test431"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test432"); }


    com.google.gson.LongSerializationPolicy longSerializationPolicy0 = com.google.gson.LongSerializationPolicy.STRING;
    com.google.gson.JsonElement jsonElement2 = longSerializationPolicy0.serialize((java.lang.Long)4L);
    com.google.gson.JsonElement jsonElement4 = longSerializationPolicy0.serialize((java.lang.Long)0L);
    boolean b5 = jsonElement4.isJsonObject();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test433"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setVersion((double)2);
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy16 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder13.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy16);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder13.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder13.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setDateFormat(100);
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setDateFormat("{\"hi!\":1}");
    com.google.gson.ExclusionStrategy exclusionStrategy24 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array25 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy24 };
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.setExclusionStrategies(exclusionStrategy_array25);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array25);
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder29 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.setLenient();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder29.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.setLenient();
    int[] i_array40 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder38.excludeFieldsWithModifiers(i_array40);
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder34.excludeFieldsWithModifiers(i_array40);
    com.google.gson.GsonBuilder gsonBuilder43 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder43.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder43.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy46 = null;
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder45.addSerializationExclusionStrategy(exclusionStrategy46);
    com.google.gson.ExclusionStrategy exclusionStrategy48 = null;
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder45.addSerializationExclusionStrategy(exclusionStrategy48);
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setLenient();
    int[] i_array54 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithModifiers(i_array54);
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder52.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy57 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder56.setLongSerializationPolicy(longSerializationPolicy57);
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder49.setLongSerializationPolicy(longSerializationPolicy57);
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder42.setLongSerializationPolicy(longSerializationPolicy57);
    com.google.gson.JsonElement jsonElement62 = longSerializationPolicy57.serialize((java.lang.Long)(-1L));
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder27.setLongSerializationPolicy(longSerializationPolicy57);
    com.google.gson.LongSerializationPolicy longSerializationPolicy64 = com.google.gson.LongSerializationPolicy.STRING;
    com.google.gson.JsonElement jsonElement66 = longSerializationPolicy64.serialize((java.lang.Long)4L);
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder27.setLongSerializationPolicy(longSerializationPolicy64);
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder4.setLongSerializationPolicy(longSerializationPolicy64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test434"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.setDateFormat("false");
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy9 = com.google.gson.LongSerializationPolicy.STRING;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLongSerializationPolicy(longSerializationPolicy9);
    com.google.gson.JsonElement jsonElement12 = longSerializationPolicy9.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder0.setLongSerializationPolicy(longSerializationPolicy9);
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy20 = null;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.addDeserializationExclusionStrategy(exclusionStrategy20);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.setDateFormat((int)(short)1, (-1));
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setLenient();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder27.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder27.setVersion((double)'#');
    com.google.gson.Gson gson33 = gsonBuilder32.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy34 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy34);
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder38.disableInnerClassSerialization();
    int[] i_array41 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder38.excludeFieldsWithModifiers(i_array41);
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder35.excludeFieldsWithModifiers(i_array41);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy44 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder35.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy44);
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder23.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy44);
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder13.setFieldNamingPolicy(fieldNamingPolicy44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test435"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    jsonArray0.add((java.lang.Character)'#');
    jsonArray0.add((java.lang.Boolean)true);
    jsonArray0.add((java.lang.Character)'h');
    jsonArray0.add("{\"hi!\":1}");
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement40 = jsonArray0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement40);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test436"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    java.lang.String str18 = jsonArray0.toString();
    byte byte19 = jsonArray0.getAsByte();
    java.math.BigInteger bigInteger20 = jsonArray0.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[1]"+ "'", str18.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte19 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger20);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test437"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy9 = gson7.fieldNamingStrategy();
    boolean b10 = gson7.serializeNulls();
    com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    boolean b16 = jsonArray11.equals((java.lang.Object)gsonBuilder12);
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    int i23 = jsonPrimitive18.getAsInt();
    boolean b24 = jsonPrimitive18.getAsBoolean();
    jsonArray11.add((com.google.gson.JsonElement)jsonPrimitive18);
    int i26 = jsonArray11.size();
    short s27 = jsonArray11.getAsShort();
    int i28 = jsonArray11.getAsInt();
    short s29 = jsonArray11.getAsShort();
    com.google.gson.JsonObject jsonObject30 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray32 = jsonObject30.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray34 = jsonObject30.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b38 = jsonPrimitive37.isString();
    java.lang.Number number39 = jsonPrimitive37.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive40 = jsonPrimitive37.getAsJsonPrimitive();
    jsonObject30.add("hi!", (com.google.gson.JsonElement)jsonPrimitive40);
    boolean b42 = jsonObject30.isJsonArray();
    com.google.gson.JsonElement jsonElement44 = jsonObject30.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive46 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d47 = jsonPrimitive46.getAsDouble();
    boolean b48 = jsonPrimitive46.isBoolean();
    boolean b49 = jsonObject30.equals((java.lang.Object)b48);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement50 = jsonObject30.entrySet();
    com.google.gson.JsonArray jsonArray52 = jsonObject30.getAsJsonArray("1");
    int i53 = jsonObject30.size();
    boolean b54 = jsonObject30.isJsonObject();
    boolean b55 = jsonObject30.isJsonPrimitive();
    com.google.gson.JsonElement jsonElement57 = jsonObject30.remove("com.google.gson.stream.MalformedJsonException: 0");
    boolean b58 = jsonArray11.contains((com.google.gson.JsonElement)jsonObject30);
    boolean b60 = jsonObject30.has("{\"hi!\":1,\"{\\\"hi!\\\":1}\":\"1\"}");
    java.lang.reflect.Type type61 = null;
    com.google.gson.stream.JsonWriter jsonWriter62 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)b60, type61, jsonWriter62);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s27 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s29 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number39 + "' != '" + 1+ "'", number39.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d47 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test438"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder2.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder2.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder2.setDateFormat((int)(short)100, (int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test439"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.serializeNulls();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test440"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    java.lang.Number number4 = jsonPrimitive1.getAsNumber();
    boolean b5 = jsonPrimitive1.isBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test441"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy17 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    boolean b23 = jsonArray18.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    int i30 = jsonPrimitive25.getAsInt();
    boolean b31 = jsonPrimitive25.getAsBoolean();
    jsonArray18.add((com.google.gson.JsonElement)jsonPrimitive25);
    int i33 = jsonArray18.size();
    short s34 = jsonArray18.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    java.lang.Number number38 = jsonPrimitive36.getAsNumber();
    boolean b39 = jsonPrimitive36.isBoolean();
    boolean b40 = jsonArray18.remove((com.google.gson.JsonElement)jsonPrimitive36);
    java.lang.String str41 = gson7.toJson((java.lang.Object)jsonPrimitive36);
    java.io.Reader reader42 = null;
    java.lang.Class<int[]> cls43 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array44 = gson7.fromJson(reader42, cls43);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s34 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number38 + "' != '" + 1+ "'", number38.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "1"+ "'", str41.equals("1"));

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test442"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    jsonObject29.addProperty("0", (java.lang.Number)1.0f);
    jsonObject29.addProperty("1", "4");
    jsonObject29.addProperty("", "\"4\"");
    com.google.gson.JsonElement jsonElement40 = jsonObject29.remove("{}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement40);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test443"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)(byte)4);
    boolean b23 = jsonObject0.equals((java.lang.Object)jsonPrimitive22);
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    boolean b36 = jsonArray31.equals((java.lang.Object)gsonBuilder32);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b39 = jsonPrimitive38.isString();
    boolean b40 = jsonPrimitive38.isBoolean();
    java.lang.String str41 = jsonPrimitive38.getAsString();
    boolean b42 = jsonPrimitive38.isJsonObject();
    int i43 = jsonPrimitive38.getAsInt();
    boolean b44 = jsonPrimitive38.getAsBoolean();
    jsonArray31.add((com.google.gson.JsonElement)jsonPrimitive38);
    jsonArray25.addAll(jsonArray31);
    java.math.BigInteger bigInteger47 = jsonArray31.getAsBigInteger();
    java.math.BigInteger bigInteger48 = jsonArray31.getAsBigInteger();
    float f49 = jsonArray31.getAsFloat();
    jsonArray31.add("");
    com.google.gson.JsonObject jsonObject52 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray54 = jsonObject52.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray56 = jsonObject52.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    java.lang.Number number61 = jsonPrimitive59.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive62 = jsonPrimitive59.getAsJsonPrimitive();
    jsonObject52.add("hi!", (com.google.gson.JsonElement)jsonPrimitive62);
    boolean b64 = jsonObject52.isJsonArray();
    com.google.gson.JsonObject jsonObject65 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray67 = jsonObject65.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray69 = jsonObject65.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b73 = jsonPrimitive72.isString();
    java.lang.Number number74 = jsonPrimitive72.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive75 = jsonPrimitive72.getAsJsonPrimitive();
    jsonObject65.add("hi!", (com.google.gson.JsonElement)jsonPrimitive75);
    boolean b77 = jsonObject65.isJsonArray();
    com.google.gson.JsonElement jsonElement79 = jsonObject65.get("hi!");
    boolean b80 = jsonObject52.equals((java.lang.Object)jsonElement79);
    com.google.gson.JsonObject jsonObject81 = jsonObject52.getAsJsonObject();
    boolean b82 = jsonArray31.remove((com.google.gson.JsonElement)jsonObject52);
    jsonObject52.addProperty("false", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive88 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d89 = jsonPrimitive88.getAsDouble();
    boolean b90 = jsonPrimitive88.isJsonObject();
    float f91 = jsonPrimitive88.getAsFloat();
    java.math.BigInteger bigInteger92 = jsonPrimitive88.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive93 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger92);
    java.lang.Number number94 = jsonPrimitive93.getAsNumber();
    short s95 = jsonPrimitive93.getAsShort();
    java.math.BigDecimal bigDecimal96 = jsonPrimitive93.getAsBigDecimal();
    jsonObject52.addProperty("true", (java.lang.Number)bigDecimal96);
    jsonObject0.addProperty("[1,\"{\\\"hi!\\\":1,\\\"com.google.gson.stream.MalformedJsonException: \\\":\\\"4\\\",\\\"null\\\":false}\"]", (java.lang.Number)bigDecimal96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "1"+ "'", str41.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f49 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number61 + "' != '" + 1+ "'", number61.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number74 + "' != '" + 1+ "'", number74.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d89 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f91 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s95 == (short)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal96);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test444"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    boolean b23 = jsonArray6.isJsonPrimitive();
    int i24 = jsonArray6.getAsInt();
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    int i37 = jsonPrimitive32.getAsInt();
    boolean b38 = jsonPrimitive32.getAsBoolean();
    jsonArray25.add((com.google.gson.JsonElement)jsonPrimitive32);
    java.math.BigInteger bigInteger40 = jsonArray25.getAsBigInteger();
    int i41 = jsonArray25.getAsInt();
    java.lang.Number number42 = jsonArray25.getAsNumber();
    jsonArray25.add("{\"hi!\":1}");
    jsonArray6.add((com.google.gson.JsonElement)jsonArray25);
    jsonArray6.add((java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    byte byte48 = jsonArray6.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number42 + "' != '" + 1+ "'", number42.equals(1));

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test445"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b25 = jsonPrimitive24.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder26.disableInnerClassSerialization();
    boolean b31 = jsonPrimitive24.equals((java.lang.Object)gsonBuilder30);
    boolean b32 = jsonArray0.equals((java.lang.Object)jsonPrimitive24);
    int i33 = jsonArray0.size();
    jsonArray0.add((java.lang.Number)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test446"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.getAsBoolean();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    boolean b4 = jsonPrimitive1.isNumber();
    boolean b5 = jsonPrimitive1.getAsBoolean();
    double d6 = jsonPrimitive1.getAsDouble();
    boolean b7 = jsonPrimitive1.isJsonPrimitive();
    java.lang.String str8 = jsonPrimitive1.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1"+ "'", str8.equals("1"));

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test447"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    char char21 = jsonPrimitive18.getAsCharacter();
    com.google.gson.JsonElement jsonElement22 = gson7.toJsonTree((java.lang.Object)jsonPrimitive18);
    java.io.Reader reader23 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader24 = gson7.newJsonReader(reader23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement22);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test448"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    int[] i_array5 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.excludeFieldsWithModifiers(i_array5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder7.setDateFormat(0, (int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test449"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder4.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder4.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy11);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy15 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setFieldNamingPolicy(fieldNamingPolicy15);
    boolean b17 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder14);
    java.math.BigDecimal bigDecimal18 = jsonPrimitive1.getAsBigDecimal();
    long long19 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 4L);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test450"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    boolean b20 = jsonArray15.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    int i27 = jsonPrimitive22.getAsInt();
    boolean b28 = jsonPrimitive22.getAsBoolean();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive22);
    char char30 = jsonArray15.getAsCharacter();
    com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    boolean b36 = jsonArray31.equals((java.lang.Object)gsonBuilder32);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b39 = jsonPrimitive38.isString();
    boolean b40 = jsonPrimitive38.isBoolean();
    java.lang.String str41 = jsonPrimitive38.getAsString();
    boolean b42 = jsonPrimitive38.isJsonObject();
    int i43 = jsonPrimitive38.getAsInt();
    boolean b44 = jsonPrimitive38.getAsBoolean();
    jsonArray31.add((com.google.gson.JsonElement)jsonPrimitive38);
    jsonArray15.addAll(jsonArray31);
    jsonArray15.add((java.lang.Character)'#');
    jsonArray15.add((java.lang.Boolean)true);
    com.google.gson.JsonPrimitive jsonPrimitive52 = new com.google.gson.JsonPrimitive((java.lang.Boolean)false);
    boolean b53 = jsonArray15.remove((com.google.gson.JsonElement)jsonPrimitive52);
    boolean b54 = jsonArray15.isJsonNull();
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i57 = jsonPrimitive56.getAsInt();
    boolean b58 = jsonPrimitive56.getAsBoolean();
    byte byte59 = jsonPrimitive56.getAsByte();
    byte byte60 = jsonPrimitive56.getAsByte();
    boolean b61 = jsonArray15.contains((com.google.gson.JsonElement)jsonPrimitive56);
    double d62 = jsonPrimitive56.getAsDouble();
    com.google.gson.JsonElement jsonElement63 = gson7.toJsonTree((java.lang.Object)jsonPrimitive56);
    java.lang.reflect.Type type65 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable66 = gson7.fromJson("true", type65);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char30 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "1"+ "'", str41.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte59 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte60 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d62 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement63);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test451"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive4 = jsonPrimitive1.getAsJsonPrimitive();
    float f5 = jsonPrimitive4.getAsFloat();
    float f6 = jsonPrimitive4.getAsFloat();
    boolean b7 = jsonPrimitive4.isString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f5 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f6 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test452"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.setDateFormat((int)(byte)4, 0);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls10 = null;
    com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray13 = jsonObject11.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray15 = jsonObject11.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive21 = jsonPrimitive18.getAsJsonPrimitive();
    jsonObject11.add("hi!", (com.google.gson.JsonElement)jsonPrimitive21);
    jsonObject11.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject11.addProperty("hi!", (java.lang.Boolean)false);
    int i29 = jsonObject11.size();
    com.google.gson.JsonElement jsonElement31 = jsonObject11.get("[1]");
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    java.lang.Number number36 = jsonPrimitive34.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive37 = jsonPrimitive34.getAsJsonPrimitive();
    boolean b38 = jsonPrimitive37.isString();
    java.math.BigDecimal bigDecimal39 = jsonPrimitive37.getAsBigDecimal();
    jsonObject11.addProperty("true", (java.lang.Number)bigDecimal39);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder9.registerTypeHierarchyAdapter(cls10, (java.lang.Object)"true");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number36 + "' != '" + 1+ "'", number36.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test453"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.JsonElement jsonElement35 = jsonObject18.remove("");
    jsonObject18.addProperty("com.google.gson.stream.MalformedJsonException: 0", "");
    com.google.gson.JsonElement jsonElement40 = jsonObject18.remove("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement40);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test454"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder52 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setLenient();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithoutExposeAnnotation();
    boolean b56 = jsonArray51.equals((java.lang.Object)gsonBuilder52);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    jsonArray51.addAll(jsonArray57);
    java.math.BigInteger bigInteger73 = jsonArray57.getAsBigInteger();
    boolean b74 = jsonArray57.isJsonPrimitive();
    jsonArray57.add((java.lang.Character)'#');
    boolean b77 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray57);
    java.math.BigDecimal bigDecimal78 = jsonArray32.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test455"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("hi!");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test456"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.setDateFormat((int)' ', (int)'h');
    com.google.gson.ExclusionStrategy exclusionStrategy8 = null;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.addDeserializationExclusionStrategy(exclusionStrategy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test457"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    com.google.gson.JsonObject jsonObject19 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray21 = jsonObject19.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray23 = jsonObject19.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    java.lang.Number number28 = jsonPrimitive26.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive29 = jsonPrimitive26.getAsJsonPrimitive();
    jsonObject19.add("hi!", (com.google.gson.JsonElement)jsonPrimitive29);
    jsonObject19.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive35 = jsonObject19.getAsJsonPrimitive("null");
    boolean b36 = jsonNull17.equals((java.lang.Object)jsonObject19);
    jsonObject19.addProperty("", (java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number28 + "' != '" + 1+ "'", number28.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

}
