
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    java.io.Reader reader0 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader1 = new com.google.gson.stream.JsonReader(reader0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    java.lang.reflect.Type type1 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.registerTypeAdapter(type1, (java.lang.Object)true);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    com.google.gson.stream.JsonToken jsonToken0 = com.google.gson.stream.JsonToken.NUMBER;
    org.junit.Assert.assertTrue("'" + jsonToken0 + "' != '" + com.google.gson.stream.JsonToken.NUMBER + "'", jsonToken0.equals(com.google.gson.stream.JsonToken.NUMBER));

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    com.google.gson.stream.JsonToken jsonToken0 = com.google.gson.stream.JsonToken.BEGIN_ARRAY;
    org.junit.Assert.assertTrue("'" + jsonToken0 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken0.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b2 = jsonPrimitive1.getAsBoolean();
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal3 = jsonPrimitive1.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    com.google.gson.stream.JsonToken jsonToken0 = com.google.gson.stream.JsonToken.BOOLEAN;
    org.junit.Assert.assertTrue("'" + jsonToken0 + "' != '" + com.google.gson.stream.JsonToken.BOOLEAN + "'", jsonToken0.equals(com.google.gson.stream.JsonToken.BOOLEAN));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.stream.JsonReader jsonReader1 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse(jsonReader1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    com.google.gson.stream.JsonToken jsonToken0 = com.google.gson.stream.JsonToken.STRING;
    org.junit.Assert.assertTrue("'" + jsonToken0 + "' != '" + com.google.gson.stream.JsonToken.STRING + "'", jsonToken0.equals(com.google.gson.stream.JsonToken.STRING));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    java.io.Writer writer0 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter1 = new com.google.gson.stream.JsonWriter(writer0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    com.google.gson.stream.JsonToken jsonToken0 = com.google.gson.stream.JsonToken.END_OBJECT;
    org.junit.Assert.assertTrue("'" + jsonToken0 + "' != '" + com.google.gson.stream.JsonToken.END_OBJECT + "'", jsonToken0.equals(com.google.gson.stream.JsonToken.END_OBJECT));

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    java.lang.Throwable throwable1 = null;
    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("", throwable1);
    java.lang.Throwable[] throwable_array3 = jsonParseException2.getSuppressed();
    java.lang.Throwable throwable5 = null;
    com.google.gson.JsonParseException jsonParseException6 = new com.google.gson.JsonParseException("", throwable5);
    // The following exception was thrown during execution in test generation
    try {
    jsonParseException2.addSuppressed(throwable5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array3);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    com.google.gson.stream.JsonToken jsonToken0 = com.google.gson.stream.JsonToken.BEGIN_OBJECT;
    org.junit.Assert.assertTrue("'" + jsonToken0 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_OBJECT + "'", jsonToken0.equals(com.google.gson.stream.JsonToken.BEGIN_OBJECT));

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    java.io.Reader reader1 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse(reader1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    java.io.Reader reader3 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse(reader3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject5 = jsonPrimitive1.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    com.google.gson.JsonNull jsonNull0 = com.google.gson.JsonNull.INSTANCE;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray1 = jsonNull0.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull0);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal2 = jsonPrimitive1.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    java.lang.reflect.Type type2 = null;
    java.lang.Object obj3 = new java.lang.Object();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.registerTypeAdapter(type2, obj3);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    java.lang.reflect.Type type6 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.registerTypeAdapter(type6, (java.lang.Object)1L);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b2 = jsonPrimitive1.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder3 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.setLenient();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder3.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder3.disableInnerClassSerialization();
    boolean b8 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder7);
    // The following exception was thrown during execution in test generation
    try {
    long long9 = jsonPrimitive1.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    com.google.gson.stream.JsonToken jsonToken0 = com.google.gson.stream.JsonToken.NAME;
    org.junit.Assert.assertTrue("'" + jsonToken0 + "' != '" + com.google.gson.stream.JsonToken.NAME + "'", jsonToken0.equals(com.google.gson.stream.JsonToken.NAME));

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    java.lang.Throwable throwable0 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException1 = new com.google.gson.stream.MalformedJsonException(throwable0);
    java.lang.Throwable throwable2 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException(throwable2);
    // The following exception was thrown during execution in test generation
    try {
    malformedJsonException1.addSuppressed(throwable2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    int i6 = jsonPrimitive1.getAsInt();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject7 = jsonPrimitive1.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    jsonObject0.addProperty("hi!", "1");
    // The following exception was thrown during execution in test generation
    try {
    byte byte4 = jsonObject0.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isJsonArray();
    java.math.BigInteger bigInteger4 = jsonPrimitive1.getAsBigInteger();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject5 = jsonPrimitive1.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger4);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.reflect.Type type9 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement10 = gson7.toJsonTree((java.lang.Object)10, type9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.stream.JsonReader jsonReader10 = null;
    java.lang.reflect.Type type11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array12 = gson7.fromJson(jsonReader10, type11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    java.lang.Class<java.lang.reflect.Type> cls10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type11 = gson7.getAdapter(cls10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    java.lang.reflect.Type type2 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.registerTypeAdapter(type2, (java.lang.Object)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.Class<java.lang.reflect.Type> cls8 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type9 = gson7.getAdapter(cls8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder8.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder8.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.enableComplexMapKeySerialization();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str15 = gson7.toJson((java.lang.Object)gsonBuilder14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.serializeNulls();
    com.google.gson.TypeAdapterFactory typeAdapterFactory10 = null;
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long11 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long12 = gson7.getDelegateAdapter(typeAdapterFactory10, typetoken_long11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d10 = jsonPrimitive9.getAsDouble();
    java.lang.reflect.Type type11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str12 = gson7.toJson((java.lang.Object)d10, type11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 4.0d);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    java.lang.Number number5 = jsonPrimitive1.getAsNumber();
    long long6 = jsonPrimitive1.getAsLong();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray7 = jsonPrimitive1.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number5 + "' != '" + 1+ "'", number5.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1L);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    com.google.gson.LongSerializationPolicy longSerializationPolicy13 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement15 = longSerializationPolicy13.serialize((java.lang.Long)(-1L));
    java.lang.reflect.Type type16 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException17 = gson7.fromJson(jsonElement15, type16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls5 = null;
    com.google.gson.JsonParser jsonParser6 = new com.google.gson.JsonParser();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder0.registerTypeHierarchyAdapter(cls5, (java.lang.Object)jsonParser6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.Class<java.lang.reflect.Type> cls13 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type14 = gson7.getAdapter(cls13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    float f4 = jsonPrimitive1.getAsFloat();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject5 = jsonPrimitive1.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 1.0f);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = jsonElement10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "0"+ "'", str13.equals("0"));

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    jsonObject0.addProperty("hi!", "1");
    // The following exception was thrown during execution in test generation
    try {
    int i4 = jsonObject0.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.reflect.Type type17 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException18 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive11, type17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy2 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy2);
    java.lang.reflect.Field field4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = fieldNamingPolicy2.translateName(field4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
    boolean b2 = jsonNull0.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    short s3 = jsonNull0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    java.lang.reflect.Type type10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable11 = gson7.fromJson("hi!", type10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.io.Writer writer8 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter9 = gson7.newJsonWriter(writer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.io.Reader reader13 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader14 = gson7.newJsonReader(reader13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    java.lang.reflect.Type type10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement11 = gson7.toJsonTree((java.lang.Object)0L, type10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)1.0f, type10, appendable11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    java.lang.Appendable appendable11 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)10, appendable11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    // The following exception was thrown during execution in test generation
    try {
    int i6 = jsonArray0.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    com.google.gson.FieldNamingPolicy fieldNamingPolicy0 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
    java.lang.reflect.Field field1 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str2 = fieldNamingPolicy0.translateName(field1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy0);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    // The following exception was thrown during execution in test generation
    try {
    int i1 = jsonArray0.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    com.google.gson.JsonParser jsonParser13 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement15 = jsonParser13.parse("1");
    java.lang.Appendable appendable16 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(jsonElement15, appendable16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    java.lang.Number number5 = jsonPrimitive1.getAsNumber();
    long long6 = jsonPrimitive1.getAsLong();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull7 = jsonPrimitive1.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number5 + "' != '" + 1+ "'", number5.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1L);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy18 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy19 = gson7.getAdapter(typetoken_fieldNamingStrategy18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    com.google.gson.stream.JsonReader jsonReader9 = null;
    java.lang.reflect.Type type10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array11 = gson7.fromJson(jsonReader9, type10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger6 = jsonArray0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException("1");

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    long long2 = jsonPrimitive1.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls4 = null;
    com.google.gson.GsonBuilder gsonBuilder5 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy8 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy8);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder5.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.setPrettyPrinting();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder3.registerTypeHierarchyAdapter(cls4, (java.lang.Object)gsonBuilder11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.serializeNulls();
    java.lang.Throwable throwable11 = null;
    com.google.gson.JsonParseException jsonParseException12 = new com.google.gson.JsonParseException("", throwable11);
    java.lang.Throwable[] throwable_array13 = jsonParseException12.getSuppressed();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement14 = gson7.toJsonTree((java.lang.Object)throwable_array13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array13);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray4 = jsonPrimitive1.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    // The following exception was thrown during execution in test generation
    try {
    float f12 = jsonObject0.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.stream.JsonReader jsonReader3 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse(jsonReader3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement16 = gson7.toJsonTree((java.lang.Object)i_array14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    com.google.gson.Gson gson0 = new com.google.gson.Gson();
    java.io.Reader reader1 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader2 = gson0.newJsonReader(reader1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    com.google.gson.LongSerializationPolicy longSerializationPolicy0 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement2 = longSerializationPolicy0.serialize((java.lang.Long)0L);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray3 = jsonElement2.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    // The following exception was thrown during execution in test generation
    try {
    boolean b30 = jsonObject0.getAsBoolean();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject14 = jsonObject0.getAsJsonObject("0");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray16 = jsonObject14.getAsJsonArray("com.google.gson.stream.MalformedJsonException: 0");
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject14);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    // The following exception was thrown during execution in test generation
    try {
    byte byte1 = jsonArray0.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    com.google.gson.stream.JsonToken jsonToken0 = com.google.gson.stream.JsonToken.END_ARRAY;
    org.junit.Assert.assertTrue("'" + jsonToken0 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken0.equals(com.google.gson.stream.JsonToken.END_ARRAY));

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    // The following exception was thrown during execution in test generation
    try {
    float f35 = jsonArray16.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    java.io.Reader reader9 = null;
    java.lang.reflect.Type type10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal11 = gson7.fromJson(reader9, type10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b11 = jsonPrimitive10.isString();
    java.lang.Number number12 = jsonPrimitive10.getAsNumber();
    float f13 = jsonPrimitive10.getAsFloat();
    com.google.gson.stream.JsonWriter jsonWriter14 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive10, jsonWriter14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number12 + "' != '" + 1+ "'", number12.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f13 == 1.0f);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setLenient();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder10.excludeFieldsWithoutExposeAnnotation();
    boolean b14 = jsonArray9.equals((java.lang.Object)gsonBuilder10);
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b17 = jsonPrimitive16.isString();
    boolean b18 = jsonPrimitive16.isBoolean();
    java.lang.String str19 = jsonPrimitive16.getAsString();
    boolean b20 = jsonPrimitive16.isJsonObject();
    int i21 = jsonPrimitive16.getAsInt();
    boolean b22 = jsonPrimitive16.getAsBoolean();
    jsonArray9.add((com.google.gson.JsonElement)jsonPrimitive16);
    int i24 = jsonArray9.size();
    short s25 = jsonArray9.getAsShort();
    java.lang.reflect.Type type26 = null;
    java.lang.Appendable appendable27 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)s25, type26, appendable27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1"+ "'", str19.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s25 == (short)1);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive4 = jsonPrimitive1.getAsJsonPrimitive();
    boolean b5 = jsonPrimitive4.isString();
    long long6 = jsonPrimitive4.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1L);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b9 = jsonPrimitive8.isString();
    java.lang.String str10 = jsonPrimitive8.getAsString();
    byte byte11 = jsonPrimitive8.getAsByte();
    boolean b12 = jsonPrimitive8.getAsBoolean();
    double d13 = jsonPrimitive8.getAsDouble();
    java.lang.reflect.Type type14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str15 = gson6.toJson((java.lang.Object)d13, type14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte11 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 1.0d);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.serializeNulls();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    java.lang.Number number13 = jsonPrimitive11.getAsNumber();
    long long14 = jsonPrimitive11.getAsLong();
    java.math.BigInteger bigInteger15 = jsonPrimitive11.getAsBigInteger();
    java.lang.reflect.Type type16 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException17 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive11, type16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number13 + "' != '" + 1+ "'", number13.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    // The following exception was thrown during execution in test generation
    try {
    byte byte34 = jsonObject18.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.String str20 = jsonPrimitive18.getAsString();
    boolean b21 = jsonPrimitive18.isJsonObject();
    java.lang.reflect.Type type22 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException23 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive18, type22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "1"+ "'", str20.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    com.google.gson.JsonNull jsonNull0 = com.google.gson.JsonNull.INSTANCE;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger1 = jsonNull0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull0);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger20 = jsonObject0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b2 = jsonPrimitive1.getAsBoolean();
    // The following exception was thrown during execution in test generation
    try {
    double d3 = jsonPrimitive1.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    java.lang.Object obj18 = null;
    java.lang.reflect.Type type19 = null;
    java.lang.Appendable appendable20 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(obj18, type19, appendable20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("hi!");
    java.io.Reader reader3 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse(reader3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray4 = jsonPrimitive1.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.JsonParser jsonParser34 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement36 = jsonParser34.parse("1");
    com.google.gson.stream.JsonWriter jsonWriter37 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(jsonElement36, jsonWriter37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    java.lang.Class<java.lang.reflect.Type> cls9 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type10 = gson7.getAdapter(cls9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingPolicy(fieldNamingPolicy11);
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.addSerializationExclusionStrategy(exclusionStrategy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'#');
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal2 = jsonPrimitive1.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b18 = jsonPrimitive17.isString();
    java.lang.String str19 = jsonPrimitive17.getAsString();
    byte byte20 = jsonPrimitive17.getAsByte();
    boolean b21 = jsonPrimitive17.getAsBoolean();
    double d22 = jsonPrimitive17.getAsDouble();
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls23 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException24 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive17, cls23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1"+ "'", str19.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte20 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 1.0d);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    com.google.gson.Gson gson0 = new com.google.gson.Gson();
    java.lang.reflect.Type type2 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str3 = gson0.toJson((java.lang.Object)"hi!", type2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonElement jsonElement16 = null;
    jsonArray0.add(jsonElement16);
    // The following exception was thrown during execution in test generation
    try {
    char char18 = jsonArray0.getAsCharacter();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger2 = jsonPrimitive1.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder5.setFieldNamingPolicy(fieldNamingPolicy13);
    java.lang.reflect.Field field16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = fieldNamingPolicy13.translateName(field16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement10 = gson7.toJsonTree((java.lang.Object)(byte)4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
    boolean b2 = jsonNull0.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger3 = jsonNull0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    // The following exception was thrown during execution in test generation
    try {
    byte byte50 = jsonArray0.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal35 = jsonArray0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    java.lang.Number number36 = jsonPrimitive34.getAsNumber();
    java.math.BigDecimal bigDecimal37 = jsonPrimitive34.getAsBigDecimal();
    long long38 = jsonPrimitive34.getAsLong();
    boolean b39 = jsonPrimitive34.isNumber();
    java.lang.Number number40 = jsonPrimitive34.getAsNumber();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement41 = jsonArray16.set((int)(short)1, (com.google.gson.JsonElement)jsonPrimitive34);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number36 + "' != '" + 1+ "'", number36.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long38 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number40 + "' != '" + 1+ "'", number40.equals(1));

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException("com.google.gson.stream.MalformedJsonException: 0");

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    int i2 = jsonPrimitive1.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    java.io.Reader reader16 = null;
    java.lang.Class<int[]> cls17 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array18 = gson7.fromJson(reader16, cls17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    java.lang.Class<java.math.BigDecimal> cls19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal20 = gson7.fromJson("", cls19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.get("0");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray25 = jsonObject0.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement24);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy8 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy9 = gson7.getAdapter(typetoken_fieldNamingStrategy8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.serializeNulls();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d19 = jsonPrimitive18.getAsDouble();
    boolean b20 = jsonPrimitive18.isJsonObject();
    float f21 = jsonPrimitive18.getAsFloat();
    java.math.BigInteger bigInteger22 = jsonPrimitive18.getAsBigInteger();
    java.lang.reflect.Type type23 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException24 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive18, type23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f21 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls5 = null;
    java.lang.Throwable throwable7 = null;
    com.google.gson.JsonParseException jsonParseException8 = new com.google.gson.JsonParseException("", throwable7);
    com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException8);
    com.google.gson.JsonParseException jsonParseException10 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException8);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder0.registerTypeHierarchyAdapter(cls5, (java.lang.Object)jsonParseException10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    com.google.gson.JsonObject jsonObject20 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray22 = jsonObject20.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray24 = jsonObject20.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b28 = jsonPrimitive27.isString();
    java.lang.Number number29 = jsonPrimitive27.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive30 = jsonPrimitive27.getAsJsonPrimitive();
    jsonObject20.add("hi!", (com.google.gson.JsonElement)jsonPrimitive30);
    boolean b32 = jsonObject20.isJsonArray();
    com.google.gson.JsonObject jsonObject33 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray35 = jsonObject33.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray37 = jsonObject33.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b41 = jsonPrimitive40.isString();
    java.lang.Number number42 = jsonPrimitive40.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive43 = jsonPrimitive40.getAsJsonPrimitive();
    jsonObject33.add("hi!", (com.google.gson.JsonElement)jsonPrimitive43);
    boolean b45 = jsonObject33.isJsonArray();
    com.google.gson.JsonElement jsonElement47 = jsonObject33.get("hi!");
    boolean b48 = jsonObject20.equals((java.lang.Object)jsonElement47);
    com.google.gson.JsonObject jsonObject49 = jsonObject20.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement50 = jsonObject49.entrySet();
    int i51 = jsonObject49.size();
    jsonObject49.addProperty("1", "{\"hi!\":1}");
    jsonArray0.add((com.google.gson.JsonElement)jsonObject49);
    // The following exception was thrown during execution in test generation
    try {
    short s56 = jsonArray0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number29 + "' != '" + 1+ "'", number29.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number42 + "' != '" + 1+ "'", number42.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    java.io.Reader reader9 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader10 = gson7.newJsonReader(reader9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable17 = null;
    com.google.gson.JsonParseException jsonParseException18 = new com.google.gson.JsonParseException("", throwable17);
    com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException18);
    malformedJsonException15.addSuppressed((java.lang.Throwable)jsonParseException18);
    com.google.gson.stream.MalformedJsonException malformedJsonException21 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException15);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement22 = gson7.toJsonTree((java.lang.Object)malformedJsonException15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    com.google.gson.JsonObject jsonObject16 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray18 = jsonObject16.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray20 = jsonObject16.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    java.lang.Number number25 = jsonPrimitive23.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive26 = jsonPrimitive23.getAsJsonPrimitive();
    jsonObject16.add("hi!", (com.google.gson.JsonElement)jsonPrimitive26);
    jsonObject16.addProperty("hi!", (java.lang.Boolean)true);
    com.google.gson.stream.JsonWriter jsonWriter31 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonObject16, jsonWriter31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number25 + "' != '" + 1+ "'", number25.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive26);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    java.io.Reader reader9 = null;
    java.lang.Class<int[]> cls10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array11 = gson7.fromJson(reader9, cls10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal35 = jsonArray16.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    int[] i_array7 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.excludeFieldsWithModifiers(i_array7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonElement jsonElement16 = null;
    jsonArray0.add(jsonElement16);
    // The following exception was thrown during execution in test generation
    try {
    short s18 = jsonArray0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    java.io.Reader reader18 = null;
    java.lang.Class<int[]> cls19 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array20 = gson7.fromJson(reader18, cls19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    jsonArray0.add((java.lang.Character)'#');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number34 = jsonArray0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger20 = jsonArray0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("hi!");
    com.google.gson.stream.JsonReader jsonReader3 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse(jsonReader3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    jsonArray0.add((java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number3 = jsonArray0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    java.io.Reader reader16 = null;
    java.lang.reflect.Type type17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal18 = gson7.fromJson(reader16, type17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy13 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy14 = gson7.getAdapter(typetoken_fieldNamingStrategy13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    com.google.gson.LongSerializationPolicy longSerializationPolicy0 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement2 = longSerializationPolicy0.serialize((java.lang.Long)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull3 = jsonElement2.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)0L);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    long long3 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 0L);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy11 = gson7.getAdapter(typetoken_fieldNamingStrategy10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject14 = jsonObject0.getAsJsonObject("0");
    boolean b15 = jsonObject0.isJsonArray();
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal16 = jsonObject0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy5);
    java.lang.reflect.Type type7 = null;
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder6.registerTypeAdapter(type7, (java.lang.Object)gsonBuilder11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.addSerializationExclusionStrategy(exclusionStrategy12);
    com.google.gson.ExclusionStrategy exclusionStrategy14 = null;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.addSerializationExclusionStrategy(exclusionStrategy14);
    com.google.gson.Gson gson16 = gsonBuilder11.create();
    boolean b17 = gson16.serializeNulls();
    boolean b18 = gson16.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    java.lang.Number number24 = jsonPrimitive20.getAsNumber();
    long long25 = jsonPrimitive20.getAsLong();
    java.lang.String str26 = gson16.toJson((java.lang.Object)jsonPrimitive20);
    java.lang.reflect.Type type27 = null;
    com.google.gson.stream.JsonWriter jsonWriter28 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonPrimitive20, type27, jsonWriter28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number24 + "' != '" + 1+ "'", number24.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    com.google.gson.stream.JsonToken jsonToken0 = com.google.gson.stream.JsonToken.END_DOCUMENT;
    org.junit.Assert.assertTrue("'" + jsonToken0 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken0.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b11 = jsonPrimitive10.isString();
    boolean b12 = jsonPrimitive10.isBoolean();
    java.lang.String str13 = jsonPrimitive10.getAsString();
    boolean b14 = jsonPrimitive10.isJsonObject();
    int i15 = jsonPrimitive10.getAsInt();
    char char16 = jsonPrimitive10.getAsCharacter();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement17 = gson7.toJsonTree((java.lang.Object)char16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1"+ "'", str13.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char16 == '1');

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number2 = jsonPrimitive1.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy21);
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy23);
    com.google.gson.Gson gson25 = gsonBuilder20.create();
    com.google.gson.internal.Excluder excluder26 = gson25.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long27 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long28 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder26, typetoken_long27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder26);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    // The following exception was thrown during execution in test generation
    try {
    int i24 = jsonObject0.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    com.google.gson.JsonElement jsonElement16 = null;
    java.lang.Appendable appendable17 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(jsonElement16, appendable17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    boolean b19 = jsonArray14.equals((java.lang.Object)gsonBuilder15);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    boolean b23 = jsonPrimitive21.isBoolean();
    java.lang.String str24 = jsonPrimitive21.getAsString();
    boolean b25 = jsonPrimitive21.isJsonObject();
    int i26 = jsonPrimitive21.getAsInt();
    boolean b27 = jsonPrimitive21.getAsBoolean();
    jsonArray14.add((com.google.gson.JsonElement)jsonPrimitive21);
    java.lang.Appendable appendable29 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive21, appendable29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    java.lang.Class<java.lang.reflect.Type> cls9 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type10 = gson7.getAdapter(cls9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    com.google.gson.LongSerializationPolicy longSerializationPolicy0 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement2 = longSerializationPolicy0.serialize((java.lang.Long)0L);
    long long3 = jsonElement2.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 0L);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    com.google.gson.FieldNamingPolicy fieldNamingPolicy0 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    java.lang.reflect.Field field1 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str2 = fieldNamingPolicy0.translateName(field1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy0);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithoutExposeAnnotation();
    boolean b28 = jsonArray23.equals((java.lang.Object)gsonBuilder24);
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b31 = jsonPrimitive30.isString();
    boolean b32 = jsonPrimitive30.isBoolean();
    java.lang.String str33 = jsonPrimitive30.getAsString();
    boolean b34 = jsonPrimitive30.isJsonObject();
    int i35 = jsonPrimitive30.getAsInt();
    boolean b36 = jsonPrimitive30.getAsBoolean();
    jsonArray23.add((com.google.gson.JsonElement)jsonPrimitive30);
    int i38 = jsonArray23.size();
    short s39 = jsonArray23.getAsShort();
    int i40 = jsonArray23.getAsInt();
    jsonArray0.addAll(jsonArray23);
    com.google.gson.JsonElement jsonElement43 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement44 = jsonArray0.set((-1), jsonElement43);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s39 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy16 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy17 = gson7.getAdapter(typetoken_fieldNamingStrategy16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    float f4 = jsonPrimitive1.getAsFloat();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    float f6 = jsonPrimitive1.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f6 == 4.0f);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    // The following exception was thrown during execution in test generation
    try {
    short s20 = jsonArray0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    java.math.BigInteger bigInteger23 = jsonArray8.getAsBigInteger();
    int i24 = jsonArray8.getAsInt();
    com.google.gson.JsonNull jsonNull25 = new com.google.gson.JsonNull();
    boolean b26 = jsonArray8.contains((com.google.gson.JsonElement)jsonNull25);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement27 = gson7.toJsonTree((java.lang.Object)b26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    java.lang.reflect.Type type35 = null;
    java.lang.Appendable appendable36 = gson7.fromJson("", type35);
    com.google.gson.GsonBuilder gsonBuilder37 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder37.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder37.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder40.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy42 = com.google.gson.LongSerializationPolicy.STRING;
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder41.setLongSerializationPolicy(longSerializationPolicy42);
    java.lang.Appendable appendable44 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)longSerializationPolicy42, appendable44);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.remove("hi!");
    jsonObject0.addProperty("hi!", (java.lang.Character)'1');
    // The following exception was thrown during execution in test generation
    try {
    short s28 = jsonObject0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    java.io.Writer writer9 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter10 = gson7.newJsonWriter(writer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray3 = jsonPrimitive1.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    int i24 = jsonObject0.size();
    com.google.gson.JsonObject jsonObject26 = jsonObject0.getAsJsonObject("com.google.gson.stream.MalformedJsonException: hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject26);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonPrimitive18.getAsJsonPrimitive();
    boolean b20 = jsonPrimitive19.isJsonNull();
    boolean b21 = jsonPrimitive19.isJsonArray();
    java.lang.String str22 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive19);
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setLenient();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy27 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder25.setFieldNamingPolicy(fieldNamingPolicy27);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str29 = gson7.toJson((java.lang.Object)gsonBuilder25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "1"+ "'", str22.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    // The following exception was thrown during execution in test generation
    try {
    char char30 = jsonObject29.getAsCharacter();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.serializeNulls();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    java.math.BigDecimal bigDecimal23 = jsonPrimitive18.getAsBigDecimal();
    java.lang.reflect.Type type24 = null;
    com.google.gson.stream.JsonWriter jsonWriter25 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonPrimitive18, type24, jsonWriter25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    boolean b24 = jsonObject0.isJsonObject();
    // The following exception was thrown during execution in test generation
    try {
    short s25 = jsonObject0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    com.google.gson.FieldNamingPolicy fieldNamingPolicy0 = com.google.gson.FieldNamingPolicy.IDENTITY;
    java.lang.reflect.Field field1 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str2 = fieldNamingPolicy0.translateName(field1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy0);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b2 = jsonPrimitive1.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder3 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.setLenient();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder3.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder3.disableInnerClassSerialization();
    boolean b8 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder7);
    // The following exception was thrown during execution in test generation
    try {
    double d9 = jsonPrimitive1.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.remove("{\"hi!\":1}");
    // The following exception was thrown during execution in test generation
    try {
    boolean b23 = jsonElement22.isJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive21 = jsonPrimitive18.getAsJsonPrimitive();
    boolean b22 = jsonPrimitive21.isString();
    java.lang.reflect.Type type23 = null;
    com.google.gson.stream.JsonWriter jsonWriter24 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonPrimitive21, type23, jsonWriter24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    com.google.gson.Gson gson0 = new com.google.gson.Gson();
    com.google.gson.JsonPrimitive jsonPrimitive2 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b3 = jsonPrimitive2.isString();
    java.lang.Number number4 = jsonPrimitive2.getAsNumber();
    boolean b5 = jsonPrimitive2.isJsonArray();
    java.lang.Appendable appendable6 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson0.toJson((com.google.gson.JsonElement)jsonPrimitive2, appendable6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number4 + "' != '" + 1+ "'", number4.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy11 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy12 = gson7.getAdapter(typetoken_fieldNamingStrategy11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    java.io.Reader reader5 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse(reader5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    // The following exception was thrown during execution in test generation
    try {
    char char6 = jsonArray0.getAsCharacter();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy3 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement5 = longSerializationPolicy3.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.setLongSerializationPolicy(longSerializationPolicy3);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.enableComplexMapKeySerialization();
    java.lang.reflect.Type type8 = null;
    java.lang.Object obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.registerTypeAdapter(type8, obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    char char3 = jsonPrimitive1.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == '4');

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonArray jsonArray17 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setLenient();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.excludeFieldsWithoutExposeAnnotation();
    boolean b22 = jsonArray17.equals((java.lang.Object)gsonBuilder18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    boolean b26 = jsonPrimitive24.isBoolean();
    java.lang.String str27 = jsonPrimitive24.getAsString();
    boolean b28 = jsonPrimitive24.isJsonObject();
    int i29 = jsonPrimitive24.getAsInt();
    boolean b30 = jsonPrimitive24.getAsBoolean();
    jsonArray17.add((com.google.gson.JsonElement)jsonPrimitive24);
    int i32 = jsonArray17.size();
    jsonArray0.addAll(jsonArray17);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.math.BigDecimal bigDecimal39 = jsonPrimitive36.getAsBigDecimal();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement40 = jsonArray17.set((int)(byte)-1, (com.google.gson.JsonElement)jsonPrimitive36);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1"+ "'", str27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    com.google.gson.JsonElement jsonElement21 = jsonObject0.get("com.google.gson.stream.MalformedJsonException: 0");
    // The following exception was thrown during execution in test generation
    try {
    boolean b22 = jsonElement21.isJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement21);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy19 = null;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.addSerializationExclusionStrategy(exclusionStrategy19);
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder18.addSerializationExclusionStrategy(exclusionStrategy21);
    com.google.gson.Gson gson23 = gsonBuilder18.create();
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    java.math.BigDecimal bigDecimal30 = jsonPrimitive25.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement31 = gson23.toJsonTree((java.lang.Object)jsonPrimitive25);
    com.google.gson.internal.Excluder excluder32 = gson23.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive35 = jsonPrimitive34.getAsJsonPrimitive();
    boolean b36 = jsonPrimitive35.isJsonNull();
    boolean b37 = jsonPrimitive35.isJsonArray();
    java.lang.String str38 = gson23.toJson((com.google.gson.JsonElement)jsonPrimitive35);
    java.lang.Appendable appendable39 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gson23, appendable39);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "1"+ "'", str38.equals("1"));

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject18 = jsonArray0.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement23 = jsonArray0.get((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.setLenient();
    com.google.gson.Gson gson20 = gsonBuilder19.create();
    java.lang.reflect.Type type21 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement22 = gson7.toJsonTree((java.lang.Object)gson20, type21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson20);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    boolean b4 = jsonPrimitive1.isJsonObject();
    short s5 = jsonPrimitive1.getAsShort();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray6 = jsonPrimitive1.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.generateNonExecutableJson();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder10.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder10.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setDateFormat("1");
    java.lang.reflect.Type type21 = null;
    com.google.gson.stream.JsonWriter jsonWriter22 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)"1", type21, jsonWriter22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.setDateFormat((int)'4', 100);
    java.lang.reflect.Type type17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = gson7.toJson((java.lang.Object)'4', type17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement17 = jsonArray0.remove((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingPolicy(fieldNamingPolicy11);
    com.google.gson.Gson gson13 = gsonBuilder10.create();
    java.io.Reader reader14 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader15 = gson13.newJsonReader(reader14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    java.lang.Object obj16 = null;
    java.lang.reflect.Type type17 = null;
    com.google.gson.stream.JsonWriter jsonWriter18 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(obj16, type17, jsonWriter18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive32 = jsonObject29.getAsJsonPrimitive("0");
    // The following exception was thrown during execution in test generation
    try {
    long long33 = jsonPrimitive32.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive32);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    int i31 = jsonArray16.size();
    jsonArray16.add((java.lang.Boolean)false);
    java.lang.Number number34 = null;
    jsonArray16.add(number34);
    com.google.gson.JsonObject jsonObject36 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray38 = jsonObject36.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray40 = jsonObject36.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive43 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b44 = jsonPrimitive43.isString();
    java.lang.Number number45 = jsonPrimitive43.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive46 = jsonPrimitive43.getAsJsonPrimitive();
    jsonObject36.add("hi!", (com.google.gson.JsonElement)jsonPrimitive46);
    boolean b48 = jsonObject36.isJsonArray();
    com.google.gson.JsonObject jsonObject49 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray51 = jsonObject49.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray53 = jsonObject49.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    java.lang.Number number58 = jsonPrimitive56.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive59 = jsonPrimitive56.getAsJsonPrimitive();
    jsonObject49.add("hi!", (com.google.gson.JsonElement)jsonPrimitive59);
    boolean b61 = jsonObject49.isJsonArray();
    com.google.gson.JsonElement jsonElement63 = jsonObject49.get("hi!");
    boolean b64 = jsonObject36.equals((java.lang.Object)jsonElement63);
    com.google.gson.JsonObject jsonObject65 = jsonObject36.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement66 = jsonObject65.entrySet();
    int i67 = jsonObject65.size();
    jsonObject65.addProperty("1", "{\"hi!\":1}");
    jsonArray16.add((com.google.gson.JsonElement)jsonObject65);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement72 = jsonArray0.set((int)(short)-1, (com.google.gson.JsonElement)jsonObject65);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number45 + "' != '" + 1+ "'", number45.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number58 + "' != '" + 1+ "'", number58.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    com.google.gson.LongSerializationPolicy longSerializationPolicy0 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement2 = longSerializationPolicy0.serialize((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    boolean b15 = jsonPrimitive7.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement52 = jsonArray32.get(2);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    boolean b15 = jsonPrimitive11.isJsonObject();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = gson7.toJson((java.lang.Object)b15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.serializeSpecialFloatingPointValues();
    java.lang.Appendable appendable12 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson6.toJson((java.lang.Object)gsonBuilder10, appendable12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    boolean b24 = jsonObject0.isJsonObject();
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Number)1L);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number28 = jsonObject0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d54 = jsonPrimitive53.getAsDouble();
    java.lang.Number number55 = jsonPrimitive53.getAsNumber();
    jsonArray32.add(number55);
    // The following exception was thrown during execution in test generation
    try {
    long long57 = jsonArray32.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number55);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject5 = jsonPrimitive1.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.String str11 = jsonPrimitive9.getAsString();
    boolean b12 = jsonPrimitive9.isJsonObject();
    short s13 = jsonPrimitive9.getAsShort();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement14 = gson7.toJsonTree((java.lang.Object)s13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1"+ "'", str11.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s13 == (short)1);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLenient();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder13.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement20 = gson7.toJsonTree((java.lang.Object)gsonBuilder13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonPrimitive18.getAsJsonPrimitive();
    boolean b20 = jsonPrimitive19.isJsonNull();
    boolean b21 = jsonPrimitive19.isJsonArray();
    java.lang.String str22 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive19);
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setLenient();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy27 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder25.setFieldNamingPolicy(fieldNamingPolicy27);
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.setDateFormat((-1));
    java.lang.reflect.Type type31 = null;
    java.lang.Appendable appendable32 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gsonBuilder28, type31, appendable32);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "1"+ "'", str22.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.JsonElement jsonElement35 = jsonObject18.remove("");
    jsonObject18.addProperty("com.google.gson.stream.MalformedJsonException: 0", "");
    // The following exception was thrown during execution in test generation
    try {
    long long39 = jsonObject18.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement35);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    com.google.gson.LongSerializationPolicy longSerializationPolicy0 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement2 = longSerializationPolicy0.serialize((java.lang.Long)0L);
    double d3 = jsonElement2.getAsDouble();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject4 = jsonElement2.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive18 = jsonPrimitive17.getAsJsonPrimitive();
    java.math.BigDecimal bigDecimal19 = jsonPrimitive18.getAsBigDecimal();
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls20 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException21 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive18, cls20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.remove("{\"hi!\":1}");
    com.google.gson.JsonObject jsonObject24 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray26 = jsonObject24.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray28 = jsonObject24.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b32 = jsonPrimitive31.isString();
    java.lang.Number number33 = jsonPrimitive31.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive34 = jsonPrimitive31.getAsJsonPrimitive();
    jsonObject24.add("hi!", (com.google.gson.JsonElement)jsonPrimitive34);
    boolean b36 = jsonObject24.isJsonArray();
    com.google.gson.JsonObject jsonObject37 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray39 = jsonObject37.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray41 = jsonObject37.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive44 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b45 = jsonPrimitive44.isString();
    java.lang.Number number46 = jsonPrimitive44.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive47 = jsonPrimitive44.getAsJsonPrimitive();
    jsonObject37.add("hi!", (com.google.gson.JsonElement)jsonPrimitive47);
    boolean b49 = jsonObject37.isJsonArray();
    com.google.gson.JsonElement jsonElement51 = jsonObject37.get("hi!");
    boolean b52 = jsonObject24.equals((java.lang.Object)jsonElement51);
    com.google.gson.JsonObject jsonObject53 = jsonObject24.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement54 = jsonObject53.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive56 = jsonObject53.getAsJsonPrimitive("0");
    jsonObject0.add("{\"hi!\":1}", (com.google.gson.JsonElement)jsonPrimitive56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number33 + "' != '" + 1+ "'", number33.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number46 + "' != '" + 1+ "'", number46.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive56);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    double d16 = jsonPrimitive9.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 1.0d);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonArray jsonArray35 = new com.google.gson.JsonArray();
    jsonArray35.add((java.lang.Boolean)true);
    jsonArray0.addAll(jsonArray35);
    // The following exception was thrown during execution in test generation
    try {
    double d39 = jsonArray35.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    boolean b31 = jsonObject18.isJsonNull();
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls32 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException33 = gson7.fromJson((com.google.gson.JsonElement)jsonObject18, cls32);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive("1");
    boolean b13 = jsonPrimitive12.getAsBoolean();
    byte byte14 = jsonPrimitive12.getAsByte();
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls15 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException16 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive12, cls15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte14 == (byte)1);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    byte byte26 = jsonArray6.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.remove("hi!");
    // The following exception was thrown during execution in test generation
    try {
    short s25 = jsonObject0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    boolean b16 = jsonArray11.equals((java.lang.Object)gsonBuilder12);
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    int i23 = jsonPrimitive18.getAsInt();
    boolean b24 = jsonPrimitive18.getAsBoolean();
    jsonArray11.add((com.google.gson.JsonElement)jsonPrimitive18);
    java.math.BigInteger bigInteger26 = jsonArray11.getAsBigInteger();
    com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.setLenient();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder28.excludeFieldsWithoutExposeAnnotation();
    boolean b32 = jsonArray27.equals((java.lang.Object)gsonBuilder28);
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    boolean b36 = jsonPrimitive34.isBoolean();
    java.lang.String str37 = jsonPrimitive34.getAsString();
    boolean b38 = jsonPrimitive34.isJsonObject();
    int i39 = jsonPrimitive34.getAsInt();
    boolean b40 = jsonPrimitive34.getAsBoolean();
    jsonArray27.add((com.google.gson.JsonElement)jsonPrimitive34);
    char char42 = jsonArray27.getAsCharacter();
    com.google.gson.JsonArray jsonArray43 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder44 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder44.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder44.setLenient();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder44.excludeFieldsWithoutExposeAnnotation();
    boolean b48 = jsonArray43.equals((java.lang.Object)gsonBuilder44);
    com.google.gson.JsonPrimitive jsonPrimitive50 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b51 = jsonPrimitive50.isString();
    boolean b52 = jsonPrimitive50.isBoolean();
    java.lang.String str53 = jsonPrimitive50.getAsString();
    boolean b54 = jsonPrimitive50.isJsonObject();
    int i55 = jsonPrimitive50.getAsInt();
    boolean b56 = jsonPrimitive50.getAsBoolean();
    jsonArray43.add((com.google.gson.JsonElement)jsonPrimitive50);
    jsonArray27.addAll(jsonArray43);
    double d59 = jsonArray43.getAsDouble();
    jsonArray11.addAll(jsonArray43);
    java.lang.Appendable appendable61 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonArray43, appendable61);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "1"+ "'", str53.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d59 == 1.0d);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    com.google.gson.Gson gson0 = new com.google.gson.Gson();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy4 = null;
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.addSerializationExclusionStrategy(exclusionStrategy4);
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder3.addSerializationExclusionStrategy(exclusionStrategy6);
    com.google.gson.Gson gson8 = gsonBuilder3.create();
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b11 = jsonPrimitive10.isString();
    boolean b12 = jsonPrimitive10.isBoolean();
    java.lang.String str13 = jsonPrimitive10.getAsString();
    boolean b14 = jsonPrimitive10.isJsonObject();
    java.math.BigDecimal bigDecimal15 = jsonPrimitive10.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement16 = gson8.toJsonTree((java.lang.Object)jsonPrimitive10);
    short s17 = jsonElement16.getAsShort();
    java.lang.reflect.Type type18 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException19 = gson0.fromJson(jsonElement16, type18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1"+ "'", str13.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s17 == (short)1);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    java.io.Writer writer17 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter18 = gson7.newJsonWriter(writer17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive27.getAsJsonPrimitive();
    boolean b29 = jsonArray6.contains((com.google.gson.JsonElement)jsonPrimitive27);
    // The following exception was thrown during execution in test generation
    try {
    long long30 = jsonArray6.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d18 = jsonPrimitive17.getAsDouble();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive17);
    java.lang.String str20 = jsonArray15.getAsString();
    java.lang.Appendable appendable21 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonArray15, appendable21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "4"+ "'", str20.equals("4"));

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.serializeNulls();
    java.io.Reader reader10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader11 = gson7.newJsonReader(reader10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    java.io.Reader reader10 = null;
    java.lang.reflect.Type type11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal12 = gson7.fromJson(reader10, type11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.stream.JsonReader jsonReader12 = null;
    java.lang.reflect.Type type13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array14 = gson7.fromJson(jsonReader12, type13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.serializeNulls();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy17 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy18 = gson7.getAdapter(typetoken_fieldNamingStrategy17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement18 = jsonArray0.get((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = jsonObject0.getAsString();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Character)'1');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number21 = jsonObject0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.setPrettyPrinting();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonObject jsonObject1 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray3 = jsonObject1.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray5 = jsonObject1.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b9 = jsonPrimitive8.isString();
    java.lang.Number number10 = jsonPrimitive8.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive11 = jsonPrimitive8.getAsJsonPrimitive();
    jsonObject1.add("hi!", (com.google.gson.JsonElement)jsonPrimitive11);
    boolean b13 = jsonObject1.isJsonArray();
    boolean b14 = jsonObject0.equals((java.lang.Object)b13);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger15 = jsonObject0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number10 + "' != '" + 1+ "'", number10.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    jsonArray32.add((java.lang.Character)'t');
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger52 = jsonArray32.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setLenient();
    int[] i_array54 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithModifiers(i_array54);
    boolean b56 = jsonArray0.equals((java.lang.Object)gsonBuilder52);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number57 = jsonArray0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    java.math.BigInteger bigInteger28 = jsonArray13.getAsBigInteger();
    int i29 = jsonArray13.getAsInt();
    com.google.gson.JsonNull jsonNull30 = new com.google.gson.JsonNull();
    boolean b31 = jsonArray13.contains((com.google.gson.JsonElement)jsonNull30);
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d34 = jsonPrimitive33.getAsDouble();
    boolean b35 = jsonPrimitive33.isBoolean();
    boolean b36 = jsonNull30.equals((java.lang.Object)jsonPrimitive33);
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls37 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException38 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive33, cls37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d34 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingPolicy(fieldNamingPolicy11);
    com.google.gson.Gson gson13 = gsonBuilder10.create();
    java.lang.reflect.Type type15 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable16 = gson13.fromJson("1", type15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive("1");
    java.lang.reflect.Type type16 = null;
    java.lang.Appendable appendable17 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)"1", type16, appendable17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.io.Reader reader12 = null;
    java.lang.Class<int[]> cls13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array14 = gson7.fromJson(reader12, cls13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.addDeserializationExclusionStrategy(exclusionStrategy6);
    com.google.gson.ExclusionStrategy exclusionStrategy8 = null;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.addDeserializationExclusionStrategy(exclusionStrategy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder9.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy15 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array16 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy15 };
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder9.setExclusionStrategies(exclusionStrategy_array16);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder8.setExclusionStrategies(exclusionStrategy_array16);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy19 = null;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder8.setFieldNamingStrategy(fieldNamingStrategy19);
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder8.addSerializationExclusionStrategy(exclusionStrategy21);
    java.lang.reflect.Type type23 = null;
    com.google.gson.stream.JsonWriter jsonWriter24 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson6.toJson((java.lang.Object)gsonBuilder8, type23, jsonWriter24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    java.lang.Number number17 = jsonArray0.getAsNumber();
    jsonArray0.add("{\"hi!\":1}");
    // The following exception was thrown during execution in test generation
    try {
    long long20 = jsonArray0.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number17 + "' != '" + 1+ "'", number17.equals(1));

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonElement jsonElement16 = null;
    jsonArray0.add(jsonElement16);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonElement jsonElement23 = jsonArray0.set(0, (com.google.gson.JsonElement)jsonPrimitive20);
    // The following exception was thrown during execution in test generation
    try {
    double d24 = jsonArray0.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement23);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    com.google.gson.JsonParser jsonParser9 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement11 = jsonParser9.parse("1");
    java.lang.reflect.Type type12 = null;
    java.lang.Appendable appendable13 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonElement11, type12, appendable13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement11);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    boolean b24 = jsonObject0.isJsonObject();
    boolean b25 = jsonObject0.isJsonPrimitive();
    com.google.gson.JsonPrimitive jsonPrimitive27 = jsonObject0.getAsJsonPrimitive("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive27);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    java.lang.Throwable throwable2 = null;
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException("", throwable2);
    java.lang.Throwable[] throwable_array4 = jsonParseException3.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    java.lang.Appendable appendable18 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)(byte)100, appendable18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    java.io.Reader reader17 = null;
    java.lang.reflect.Type type18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal19 = gson7.fromJson(reader17, type18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    java.io.Writer writer17 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter18 = gson7.newJsonWriter(writer17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    // The following exception was thrown during execution in test generation
    try {
    byte byte12 = jsonObject0.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy16 = null;
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.addSerializationExclusionStrategy(exclusionStrategy16);
    com.google.gson.ExclusionStrategy exclusionStrategy18 = null;
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder15.addSerializationExclusionStrategy(exclusionStrategy18);
    com.google.gson.Gson gson20 = gsonBuilder15.create();
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    java.math.BigDecimal bigDecimal27 = jsonPrimitive22.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement28 = gson20.toJsonTree((java.lang.Object)jsonPrimitive22);
    com.google.gson.internal.Excluder excluder29 = gson20.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long30 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long31 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder29, typetoken_long30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder29);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.stream.JsonReader jsonReader16 = null;
    java.lang.reflect.Type type17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array18 = gson7.fromJson(jsonReader16, type17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    // The following exception was thrown during execution in test generation
    try {
    boolean b3 = jsonArray2.isJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    // The following exception was thrown during execution in test generation
    try {
    byte byte35 = jsonArray0.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonPrimitive18.getAsJsonPrimitive();
    boolean b20 = jsonPrimitive19.isJsonNull();
    boolean b21 = jsonPrimitive19.isJsonArray();
    java.lang.String str22 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive19);
    com.google.gson.stream.JsonReader jsonReader23 = null;
    java.lang.reflect.Type type24 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array25 = gson7.fromJson(jsonReader23, type24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "1"+ "'", str22.equals("1"));

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("");
    com.google.gson.stream.JsonReader jsonReader7 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse(jsonReader7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    java.lang.Number number15 = jsonPrimitive13.getAsNumber();
    long long16 = jsonPrimitive13.getAsLong();
    java.math.BigInteger bigInteger17 = jsonPrimitive13.getAsBigInteger();
    com.google.gson.stream.JsonWriter jsonWriter18 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive13, jsonWriter18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger17);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    com.google.gson.JsonObject jsonObject20 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray22 = jsonObject20.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray24 = jsonObject20.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b28 = jsonPrimitive27.isString();
    java.lang.Number number29 = jsonPrimitive27.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive30 = jsonPrimitive27.getAsJsonPrimitive();
    jsonObject20.add("hi!", (com.google.gson.JsonElement)jsonPrimitive30);
    boolean b32 = jsonObject20.isJsonArray();
    com.google.gson.JsonObject jsonObject33 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray35 = jsonObject33.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray37 = jsonObject33.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b41 = jsonPrimitive40.isString();
    java.lang.Number number42 = jsonPrimitive40.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive43 = jsonPrimitive40.getAsJsonPrimitive();
    jsonObject33.add("hi!", (com.google.gson.JsonElement)jsonPrimitive43);
    boolean b45 = jsonObject33.isJsonArray();
    com.google.gson.JsonElement jsonElement47 = jsonObject33.get("hi!");
    boolean b48 = jsonObject20.equals((java.lang.Object)jsonElement47);
    com.google.gson.JsonObject jsonObject49 = jsonObject20.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement50 = jsonObject49.entrySet();
    int i51 = jsonObject49.size();
    jsonObject49.addProperty("1", "{\"hi!\":1}");
    jsonArray0.add((com.google.gson.JsonElement)jsonObject49);
    boolean b56 = jsonObject49.isJsonPrimitive();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number29 + "' != '" + 1+ "'", number29.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number42 + "' != '" + 1+ "'", number42.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonPrimitive18.getAsJsonPrimitive();
    boolean b20 = jsonPrimitive19.isJsonNull();
    boolean b21 = jsonPrimitive19.isJsonArray();
    java.lang.String str22 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive19);
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy23 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy24 = gson7.getAdapter(typetoken_fieldNamingStrategy23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "1"+ "'", str22.equals("1"));

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    java.lang.String str17 = gson7.toString();
    com.google.gson.stream.JsonReader jsonReader18 = null;
    java.lang.reflect.Type type19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array20 = gson7.fromJson(jsonReader18, type19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy18 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement20 = longSerializationPolicy18.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder17.setLongSerializationPolicy(longSerializationPolicy18);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = gson7.toJson((java.lang.Object)gsonBuilder21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy9 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy10 = gson7.getAdapter(typetoken_fieldNamingStrategy9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b9 = jsonPrimitive8.isString();
    boolean b10 = jsonPrimitive8.isBoolean();
    java.lang.String str11 = jsonPrimitive8.getAsString();
    boolean b12 = jsonPrimitive8.isJsonObject();
    java.math.BigDecimal bigDecimal13 = jsonPrimitive8.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement14 = gson6.toJsonTree((java.lang.Object)bigDecimal13);
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b17 = jsonPrimitive16.isString();
    java.lang.String str18 = jsonPrimitive16.getAsString();
    java.lang.reflect.Type type19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = gson6.toJson((java.lang.Object)str18, type19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1"+ "'", str11.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    float f24 = jsonArray6.getAsFloat();
    jsonArray6.add("");
    // The following exception was thrown during execution in test generation
    try {
    boolean b27 = jsonArray6.getAsBoolean();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f24 == 1.0f);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonElement jsonElement36 = jsonArray0.remove((int)(short)0);
    com.google.gson.GsonBuilder gsonBuilder37 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder37.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder37.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy40 = null;
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.addSerializationExclusionStrategy(exclusionStrategy40);
    com.google.gson.ExclusionStrategy exclusionStrategy42 = null;
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder39.addSerializationExclusionStrategy(exclusionStrategy42);
    com.google.gson.Gson gson44 = gsonBuilder39.create();
    boolean b45 = gson44.serializeNulls();
    boolean b46 = gson44.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive48 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b49 = jsonPrimitive48.isString();
    boolean b50 = jsonPrimitive48.isBoolean();
    java.lang.String str51 = jsonPrimitive48.getAsString();
    java.lang.Number number52 = jsonPrimitive48.getAsNumber();
    long long53 = jsonPrimitive48.getAsLong();
    java.lang.String str54 = gson44.toJson((java.lang.Object)jsonPrimitive48);
    com.google.gson.JsonObject jsonObject55 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray57 = jsonObject55.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray59 = jsonObject55.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive62 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b63 = jsonPrimitive62.isString();
    java.lang.Number number64 = jsonPrimitive62.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive65 = jsonPrimitive62.getAsJsonPrimitive();
    jsonObject55.add("hi!", (com.google.gson.JsonElement)jsonPrimitive65);
    boolean b67 = jsonObject55.isJsonArray();
    com.google.gson.JsonElement jsonElement69 = jsonObject55.get("hi!");
    java.lang.String str70 = gson44.toJson((com.google.gson.JsonElement)jsonObject55);
    int i71 = jsonObject55.size();
    com.google.gson.JsonElement jsonElement73 = jsonObject55.remove("com.google.gson.stream.MalformedJsonException: hi!");
    boolean b74 = jsonArray0.contains(jsonElement73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number52 + "' != '" + 1+ "'", number52.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long53 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "1"+ "'", str54.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number64 + "' != '" + 1+ "'", number64.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "{\"hi!\":1}"+ "'", str70.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy5);
    java.lang.reflect.Field field7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = fieldNamingPolicy5.translateName(field7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.addSerializationExclusionStrategy(exclusionStrategy13);
    com.google.gson.ExclusionStrategy exclusionStrategy15 = null;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder12.addSerializationExclusionStrategy(exclusionStrategy15);
    com.google.gson.Gson gson17 = gsonBuilder12.create();
    boolean b18 = gson17.serializeNulls();
    boolean b19 = gson17.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy20 = gson17.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder21 = gson17.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long22 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long23 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder21, typetoken_long22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder21);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.Gson gson2 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setDateFormat((int)'1', (int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    // The following exception was thrown during execution in test generation
    try {
    long long6 = jsonArray0.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    java.lang.Class<java.math.BigDecimal> cls14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal15 = gson7.fromJson("1", cls14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    // The following exception was thrown during execution in test generation
    try {
    long long50 = jsonArray0.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    boolean b4 = jsonPrimitive1.isJsonObject();
    short s5 = jsonPrimitive1.getAsShort();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull6 = jsonPrimitive1.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    byte byte16 = jsonArray0.getAsByte();
    double d17 = jsonArray0.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte16 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 1.0d);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    boolean b24 = jsonObject0.isJsonObject();
    boolean b25 = jsonObject0.isJsonPrimitive();
    com.google.gson.JsonElement jsonElement27 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonArray jsonArray29 = jsonObject0.getAsJsonArray("1");
    jsonObject0.addProperty("{\"hi!\":1}", (java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive33 = jsonObject0.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    int i17 = jsonArray0.getAsInt();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement19 = jsonArray0.get((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    boolean b4 = jsonPrimitive1.isJsonObject();
    short s5 = jsonPrimitive1.getAsShort();
    boolean b6 = jsonPrimitive1.isString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.get("0");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str25 = jsonElement24.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement24);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    double d6 = jsonPrimitive1.getAsDouble();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive1.getAsBigDecimal();
    float f8 = jsonPrimitive1.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f8 == 1.0f);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonElement jsonElement36 = jsonArray0.remove((int)(short)0);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonPrimitive38.getAsJsonPrimitive();
    int i40 = jsonPrimitive39.getAsInt();
    boolean b41 = jsonArray0.contains((com.google.gson.JsonElement)jsonPrimitive39);
    // The following exception was thrown during execution in test generation
    try {
    char char42 = jsonArray0.getAsCharacter();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder8.excludeFieldsWithModifiers(i_array14);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder8.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy17);
    java.lang.reflect.Field field19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = fieldNamingPolicy17.translateName(field19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b9 = jsonPrimitive8.isString();
    boolean b10 = jsonPrimitive8.isBoolean();
    java.lang.String str11 = jsonPrimitive8.getAsString();
    boolean b12 = jsonPrimitive8.isJsonObject();
    java.math.BigDecimal bigDecimal13 = jsonPrimitive8.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement14 = gson6.toJsonTree((java.lang.Object)bigDecimal13);
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy26 = null;
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.addSerializationExclusionStrategy(exclusionStrategy26);
    com.google.gson.ExclusionStrategy exclusionStrategy28 = null;
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder25.addSerializationExclusionStrategy(exclusionStrategy28);
    com.google.gson.Gson gson30 = gsonBuilder25.create();
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    java.math.BigDecimal bigDecimal37 = jsonPrimitive32.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement38 = gson30.toJsonTree((java.lang.Object)jsonPrimitive32);
    com.google.gson.internal.Excluder excluder39 = gson30.excluder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder22.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder39);
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder15.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder39);
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long42 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long43 = gson6.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder39, typetoken_long42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1"+ "'", str11.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)'1');
    java.lang.reflect.Type type9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder12.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy18 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array19 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy18 };
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder12.setExclusionStrategies(exclusionStrategy_array19);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder11.setExclusionStrategies(exclusionStrategy_array19);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy22 = null;
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder11.setFieldNamingStrategy(fieldNamingStrategy22);
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.serializeSpecialFloatingPointValues();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder5.registerTypeAdapter(type9, (java.lang.Object)gsonBuilder24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable5 = null;
    com.google.gson.JsonParseException jsonParseException6 = new com.google.gson.JsonParseException("", throwable5);
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException6);
    malformedJsonException3.addSuppressed((java.lang.Throwable)jsonParseException6);
    com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException3);
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException3);
    com.google.gson.stream.MalformedJsonException malformedJsonException11 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException10);
    com.google.gson.JsonParseException jsonParseException12 = new com.google.gson.JsonParseException("\"4\"", (java.lang.Throwable)malformedJsonException10);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonElement jsonElement36 = jsonArray0.remove((int)(short)0);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonPrimitive38.getAsJsonPrimitive();
    int i40 = jsonPrimitive39.getAsInt();
    boolean b41 = jsonArray0.contains((com.google.gson.JsonElement)jsonPrimitive39);
    int i42 = jsonArray0.size();
    // The following exception was thrown during execution in test generation
    try {
    short s43 = jsonArray0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 2);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder2.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy8 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array9 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy8 };
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder2.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder1.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder1.setFieldNamingStrategy(fieldNamingStrategy12);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.serializeSpecialFloatingPointValues();
    java.lang.reflect.Type type15 = null;
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy19 = null;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.addSerializationExclusionStrategy(exclusionStrategy19);
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder18.addSerializationExclusionStrategy(exclusionStrategy21);
    com.google.gson.Gson gson23 = gsonBuilder18.create();
    boolean b24 = gson23.serializeNulls();
    boolean b25 = gson23.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b28 = jsonPrimitive27.isString();
    boolean b29 = jsonPrimitive27.isBoolean();
    java.lang.String str30 = jsonPrimitive27.getAsString();
    java.lang.Number number31 = jsonPrimitive27.getAsNumber();
    long long32 = jsonPrimitive27.getAsLong();
    java.lang.String str33 = gson23.toJson((java.lang.Object)jsonPrimitive27);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder14.registerTypeAdapter(type15, (java.lang.Object)gson23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "1"+ "'", str30.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number31 + "' != '" + 1+ "'", number31.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b2 = jsonPrimitive1.getAsBoolean();
    // The following exception was thrown during execution in test generation
    try {
    byte byte3 = jsonPrimitive1.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.JsonPrimitive jsonPrimitive6 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b7 = jsonPrimitive6.isString();
    java.lang.Number number8 = jsonPrimitive6.getAsNumber();
    boolean b9 = jsonPrimitive6.isString();
    java.lang.reflect.Type type10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = gson4.toJson((java.lang.Object)b9, type10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number8 + "' != '" + 1+ "'", number8.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.Gson gson2 = gsonBuilder0.create();
    java.lang.reflect.Type type4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable5 = gson2.fromJson("com.google.gson.JsonParseException: {\"hi!\":1}", type4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson2);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    java.lang.Throwable throwable13 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException(throwable13);
    com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException14);
    com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException14);
    com.google.gson.stream.MalformedJsonException malformedJsonException17 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException14);
    com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException14);
    java.lang.reflect.Type type19 = null;
    com.google.gson.stream.JsonWriter jsonWriter20 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)malformedJsonException14, type19, jsonWriter20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive29 = jsonObject0.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonElement jsonElement36 = jsonArray0.remove((int)(short)0);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonPrimitive38.getAsJsonPrimitive();
    int i40 = jsonPrimitive39.getAsInt();
    boolean b41 = jsonArray0.contains((com.google.gson.JsonElement)jsonPrimitive39);
    // The following exception was thrown during execution in test generation
    try {
    boolean b42 = jsonArray0.getAsBoolean();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    java.lang.String str9 = gson7.toString();
    com.google.gson.stream.JsonReader jsonReader10 = null;
    java.lang.reflect.Type type11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array12 = gson7.fromJson(jsonReader10, type11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    float f4 = jsonPrimitive1.getAsFloat();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive6 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger5);
    java.lang.String str7 = jsonPrimitive6.getAsString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject8 = jsonPrimitive6.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "4"+ "'", str7.equals("4"));

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive4 = jsonPrimitive1.getAsJsonPrimitive();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    boolean b6 = jsonPrimitive1.isJsonPrimitive();
    boolean b7 = jsonPrimitive1.isNumber();
    java.math.BigInteger bigInteger8 = jsonPrimitive1.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger8);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonElement jsonElement36 = jsonArray0.remove((int)(short)0);
    boolean b37 = jsonElement36.isJsonObject();
    long long38 = jsonElement36.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long38 == 1L);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    java.lang.reflect.Type type11 = null;
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    boolean b14 = jsonPrimitive13.isString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder10.registerTypeAdapter(type11, (java.lang.Object)jsonPrimitive13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive14 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b15 = jsonPrimitive14.isString();
    java.lang.Number number16 = jsonPrimitive14.getAsNumber();
    boolean b17 = jsonPrimitive14.isBoolean();
    java.lang.Appendable appendable18 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonPrimitive14, appendable18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number16 + "' != '" + 1+ "'", number16.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    int[] i_array17 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder14.excludeFieldsWithModifiers(i_array17);
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setDateFormat((int)(byte)10);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.setLenient();
    java.lang.reflect.Type type22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = gson7.toJson((java.lang.Object)gsonBuilder18, type22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    float f4 = jsonPrimitive1.getAsFloat();
    boolean b5 = jsonPrimitive1.isString();
    float f6 = jsonPrimitive1.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f6 == 4.0f);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    java.lang.Object obj18 = null;
    java.lang.reflect.Type type19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = gson7.toJson(obj18, type19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive27.getAsJsonPrimitive();
    boolean b29 = jsonArray6.contains((com.google.gson.JsonElement)jsonPrimitive27);
    com.google.gson.JsonArray jsonArray30 = null;
    // The following exception was thrown during execution in test generation
    try {
    jsonArray6.addAll(jsonArray30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    // The following exception was thrown during execution in test generation
    try {
    float f50 = jsonArray0.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder11 = gson7.excluder();
    java.io.Writer writer12 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter13 = gson7.newJsonWriter(writer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder11);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder5.setFieldNamingPolicy(fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.serializeNulls();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy19 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy19);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder16.setFieldNamingPolicy(fieldNamingPolicy19);
    java.lang.reflect.Field field22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = fieldNamingPolicy19.translateName(field22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setLenient();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.excludeFieldsWithoutExposeAnnotation();
    boolean b27 = jsonArray22.equals((java.lang.Object)gsonBuilder23);
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b30 = jsonPrimitive29.isString();
    boolean b31 = jsonPrimitive29.isBoolean();
    java.lang.String str32 = jsonPrimitive29.getAsString();
    boolean b33 = jsonPrimitive29.isJsonObject();
    int i34 = jsonPrimitive29.getAsInt();
    boolean b35 = jsonPrimitive29.getAsBoolean();
    jsonArray22.add((com.google.gson.JsonElement)jsonPrimitive29);
    jsonArray16.addAll(jsonArray22);
    java.math.BigInteger bigInteger38 = jsonArray22.getAsBigInteger();
    java.lang.reflect.Type type39 = null;
    com.google.gson.stream.JsonWriter jsonWriter40 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)bigInteger38, type39, jsonWriter40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "1"+ "'", str32.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger38);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    float f17 = jsonArray0.getAsFloat();
    jsonArray0.add((java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    short s20 = jsonArray0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f17 == 1.0f);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    jsonArray0.add((java.lang.Boolean)true);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement3 = jsonArray0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement3);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    com.google.gson.FieldNamingPolicy fieldNamingPolicy0 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    java.lang.reflect.Field field1 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str2 = fieldNamingPolicy0.translateName(field1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy0);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy7 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy7.serialize((java.lang.Long)1L);
    com.google.gson.JsonElement jsonElement12 = longSerializationPolicy7.serialize((java.lang.Long)0L);
    boolean b13 = jsonElement12.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    boolean b11 = gson7.htmlSafe();
    java.lang.reflect.Type type13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable14 = gson7.fromJson("1", type13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.JsonArray jsonArray34 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder35 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder35.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder35.setLenient();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder35.excludeFieldsWithoutExposeAnnotation();
    boolean b39 = jsonArray34.equals((java.lang.Object)gsonBuilder35);
    com.google.gson.JsonPrimitive jsonPrimitive41 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b42 = jsonPrimitive41.isString();
    boolean b43 = jsonPrimitive41.isBoolean();
    java.lang.String str44 = jsonPrimitive41.getAsString();
    boolean b45 = jsonPrimitive41.isJsonObject();
    int i46 = jsonPrimitive41.getAsInt();
    boolean b47 = jsonPrimitive41.getAsBoolean();
    jsonArray34.add((com.google.gson.JsonElement)jsonPrimitive41);
    java.math.BigInteger bigInteger49 = jsonArray34.getAsBigInteger();
    int i50 = jsonArray34.getAsInt();
    com.google.gson.JsonNull jsonNull51 = new com.google.gson.JsonNull();
    boolean b52 = jsonArray34.contains((com.google.gson.JsonElement)jsonNull51);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement53 = jsonArray34.iterator();
    java.math.BigDecimal bigDecimal54 = jsonArray34.getAsBigDecimal();
    jsonArray34.add((java.lang.Boolean)true);
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls57 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException58 = gson7.fromJson((com.google.gson.JsonElement)jsonArray34, cls57);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "1"+ "'", str44.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    boolean b11 = gson7.htmlSafe();
    java.lang.Class<java.math.BigDecimal> cls13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal14 = gson7.fromJson("4", cls13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b25 = jsonPrimitive24.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder26.disableInnerClassSerialization();
    boolean b31 = jsonPrimitive24.equals((java.lang.Object)gsonBuilder30);
    boolean b32 = jsonArray0.equals((java.lang.Object)jsonPrimitive24);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement34 = jsonArray0.get(2);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    java.io.Writer writer15 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter16 = gson7.newJsonWriter(writer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    java.lang.Throwable throwable2 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException(throwable2);
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException3);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException3);
    java.lang.Throwable throwable8 = null;
    com.google.gson.JsonParseException jsonParseException9 = new com.google.gson.JsonParseException("", throwable8);
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException9);
    com.google.gson.stream.MalformedJsonException malformedJsonException11 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException10);
    malformedJsonException6.addSuppressed((java.lang.Throwable)malformedJsonException11);
    java.lang.String str13 = malformedJsonException11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "com.google.gson.stream.MalformedJsonException"+ "'", str13.equals("com.google.gson.stream.MalformedJsonException"));

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    jsonObject0.addProperty("hi!", "1");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive4 = jsonObject0.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonPrimitive18.getAsJsonPrimitive();
    java.lang.reflect.Type type20 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException21 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive18, type20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive19);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.setDateFormat((int)'4', 100);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.serializeNulls();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    java.io.Reader reader15 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader16 = gson7.newJsonReader(reader15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy9 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement11 = longSerializationPolicy9.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder8.setLongSerializationPolicy(longSerializationPolicy9);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder1.setLongSerializationPolicy(longSerializationPolicy9);
    com.google.gson.ExclusionStrategy exclusionStrategy14 = null;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.addDeserializationExclusionStrategy(exclusionStrategy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    com.google.gson.JsonObject jsonObject15 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray17 = jsonObject15.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray19 = jsonObject15.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    java.lang.Number number24 = jsonPrimitive22.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive25 = jsonPrimitive22.getAsJsonPrimitive();
    jsonObject15.add("hi!", (com.google.gson.JsonElement)jsonPrimitive25);
    boolean b27 = jsonObject15.isJsonArray();
    com.google.gson.JsonObject jsonObject28 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray30 = jsonObject28.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray32 = jsonObject28.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b36 = jsonPrimitive35.isString();
    java.lang.Number number37 = jsonPrimitive35.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive38 = jsonPrimitive35.getAsJsonPrimitive();
    jsonObject28.add("hi!", (com.google.gson.JsonElement)jsonPrimitive38);
    boolean b40 = jsonObject28.isJsonArray();
    com.google.gson.JsonElement jsonElement42 = jsonObject28.get("hi!");
    boolean b43 = jsonObject15.equals((java.lang.Object)jsonElement42);
    com.google.gson.JsonObject jsonObject44 = jsonObject15.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement45 = jsonObject44.entrySet();
    int i46 = jsonObject44.size();
    int i47 = jsonObject44.size();
    com.google.gson.JsonPrimitive jsonPrimitive50 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive51 = jsonPrimitive50.getAsJsonPrimitive();
    int i52 = jsonPrimitive51.getAsInt();
    jsonObject44.add("{\"hi!\":1}", (com.google.gson.JsonElement)jsonPrimitive51);
    java.lang.Appendable appendable54 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonObject44, appendable54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number24 + "' != '" + 1+ "'", number24.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number37 + "' != '" + 1+ "'", number37.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.remove("hi!");
    jsonObject0.addProperty("hi!", (java.lang.Character)'1');
    jsonObject0.addProperty("null", (java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i2 = jsonPrimitive1.getAsInt();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject3 = jsonPrimitive1.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.serializeSpecialFloatingPointValues();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    boolean b16 = jsonArray11.equals((java.lang.Object)gsonBuilder12);
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    int i23 = jsonPrimitive18.getAsInt();
    boolean b24 = jsonPrimitive18.getAsBoolean();
    jsonArray11.add((com.google.gson.JsonElement)jsonPrimitive18);
    java.math.BigInteger bigInteger26 = jsonArray11.getAsBigInteger();
    com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.setLenient();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder28.excludeFieldsWithoutExposeAnnotation();
    boolean b32 = jsonArray27.equals((java.lang.Object)gsonBuilder28);
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    boolean b36 = jsonPrimitive34.isBoolean();
    java.lang.String str37 = jsonPrimitive34.getAsString();
    boolean b38 = jsonPrimitive34.isJsonObject();
    int i39 = jsonPrimitive34.getAsInt();
    boolean b40 = jsonPrimitive34.getAsBoolean();
    jsonArray27.add((com.google.gson.JsonElement)jsonPrimitive34);
    char char42 = jsonArray27.getAsCharacter();
    com.google.gson.JsonArray jsonArray43 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder44 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder44.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder44.setLenient();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder44.excludeFieldsWithoutExposeAnnotation();
    boolean b48 = jsonArray43.equals((java.lang.Object)gsonBuilder44);
    com.google.gson.JsonPrimitive jsonPrimitive50 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b51 = jsonPrimitive50.isString();
    boolean b52 = jsonPrimitive50.isBoolean();
    java.lang.String str53 = jsonPrimitive50.getAsString();
    boolean b54 = jsonPrimitive50.isJsonObject();
    int i55 = jsonPrimitive50.getAsInt();
    boolean b56 = jsonPrimitive50.getAsBoolean();
    jsonArray43.add((com.google.gson.JsonElement)jsonPrimitive50);
    jsonArray27.addAll(jsonArray43);
    double d59 = jsonArray43.getAsDouble();
    jsonArray11.addAll(jsonArray43);
    jsonArray11.add((java.lang.Number)1.0f);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement63 = gson7.toJsonTree((java.lang.Object)1.0f);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "1"+ "'", str53.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d59 == 1.0d);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive11 = jsonPrimitive10.getAsJsonPrimitive();
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)100.0f);
    boolean b14 = jsonPrimitive13.isJsonArray();
    double d15 = jsonPrimitive13.getAsDouble();
    boolean b16 = jsonPrimitive11.equals((java.lang.Object)d15);
    com.google.gson.stream.JsonWriter jsonWriter17 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive11, jsonWriter17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    java.math.BigInteger bigInteger31 = jsonArray16.getAsBigInteger();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    char char47 = jsonArray32.getAsCharacter();
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder49 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder49.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder49.setLenient();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder49.excludeFieldsWithoutExposeAnnotation();
    boolean b53 = jsonArray48.equals((java.lang.Object)gsonBuilder49);
    com.google.gson.JsonPrimitive jsonPrimitive55 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b56 = jsonPrimitive55.isString();
    boolean b57 = jsonPrimitive55.isBoolean();
    java.lang.String str58 = jsonPrimitive55.getAsString();
    boolean b59 = jsonPrimitive55.isJsonObject();
    int i60 = jsonPrimitive55.getAsInt();
    boolean b61 = jsonPrimitive55.getAsBoolean();
    jsonArray48.add((com.google.gson.JsonElement)jsonPrimitive55);
    jsonArray32.addAll(jsonArray48);
    double d64 = jsonArray48.getAsDouble();
    jsonArray16.addAll(jsonArray48);
    short s66 = jsonArray48.getAsShort();
    java.lang.String str67 = jsonArray48.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive69 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d70 = jsonPrimitive69.getAsDouble();
    boolean b71 = jsonPrimitive69.isJsonObject();
    byte byte72 = jsonPrimitive69.getAsByte();
    int i73 = jsonPrimitive69.getAsInt();
    java.math.BigInteger bigInteger74 = jsonPrimitive69.getAsBigInteger();
    jsonArray48.add((java.lang.Number)bigInteger74);
    java.lang.Appendable appendable76 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonArray48, appendable76);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char47 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "1"+ "'", str58.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d64 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s66 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d70 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte72 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger74);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setLenient();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder10.excludeFieldsWithoutExposeAnnotation();
    boolean b14 = jsonArray9.equals((java.lang.Object)gsonBuilder10);
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b17 = jsonPrimitive16.isString();
    boolean b18 = jsonPrimitive16.isBoolean();
    java.lang.String str19 = jsonPrimitive16.getAsString();
    boolean b20 = jsonPrimitive16.isJsonObject();
    int i21 = jsonPrimitive16.getAsInt();
    boolean b22 = jsonPrimitive16.getAsBoolean();
    jsonArray9.add((com.google.gson.JsonElement)jsonPrimitive16);
    int i24 = jsonArray9.getAsInt();
    java.lang.reflect.Type type25 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement26 = gson7.toJsonTree((java.lang.Object)jsonArray9, type25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1"+ "'", str19.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    com.google.gson.LongSerializationPolicy longSerializationPolicy0 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement2 = longSerializationPolicy0.serialize((java.lang.Long)0L);
    byte byte3 = jsonElement2.getAsByte();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte3 == (byte)0);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)' ');
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull2 = jsonPrimitive1.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    double d32 = jsonArray16.getAsDouble();
    jsonArray16.add("\"4\"");
    // The following exception was thrown during execution in test generation
    try {
    long long35 = jsonArray16.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d32 == 1.0d);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    java.lang.Class<java.math.BigDecimal> cls17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal18 = gson7.fromJson("com.google.gson.stream.MalformedJsonException", cls17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    int[] i_array5 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.excludeFieldsWithModifiers(i_array5);
    int[] i_array11 = new int[] { '1', ' ', (short)1, '4' };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder6.excludeFieldsWithModifiers(i_array11);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls13 = null;
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder14.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setLenient();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder21.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy27 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array28 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy27 };
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder21.setExclusionStrategies(exclusionStrategy_array28);
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder20.setExclusionStrategies(exclusionStrategy_array28);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder12.registerTypeHierarchyAdapter(cls13, (java.lang.Object)gsonBuilder30);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonObject jsonObject1 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray3 = jsonObject1.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray5 = jsonObject1.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b9 = jsonPrimitive8.isString();
    java.lang.Number number10 = jsonPrimitive8.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive11 = jsonPrimitive8.getAsJsonPrimitive();
    jsonObject1.add("hi!", (com.google.gson.JsonElement)jsonPrimitive11);
    boolean b13 = jsonObject1.isJsonArray();
    boolean b14 = jsonObject0.equals((java.lang.Object)b13);
    jsonObject0.addProperty("null", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number10 + "' != '" + 1+ "'", number10.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    java.lang.reflect.Type type5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.addSerializationExclusionStrategy(exclusionStrategy9);
    com.google.gson.ExclusionStrategy exclusionStrategy11 = null;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder8.addSerializationExclusionStrategy(exclusionStrategy11);
    com.google.gson.Gson gson13 = gsonBuilder8.create();
    boolean b14 = gson13.serializeNulls();
    boolean b15 = gson13.serializeNulls();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder0.registerTypeAdapter(type5, (java.lang.Object)gson13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    double d6 = jsonPrimitive1.getAsDouble();
    java.math.BigInteger bigInteger7 = jsonPrimitive1.getAsBigInteger();
    char char8 = jsonPrimitive1.getAsCharacter();
    float f9 = jsonPrimitive1.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char8 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f9 == 1.0f);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonElement jsonElement16 = null;
    jsonArray0.add(jsonElement16);
    // The following exception was thrown during execution in test generation
    try {
    double d18 = jsonArray0.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    int i20 = jsonObject0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = jsonObject0.getAsString();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    com.google.gson.JsonElement jsonElement19 = jsonArray0.get(1);
    // The following exception was thrown during execution in test generation
    try {
    byte byte20 = jsonElement19.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement19);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    com.google.gson.stream.JsonReader jsonReader16 = null;
    java.lang.reflect.Type type17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array18 = gson7.fromJson(jsonReader16, type17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    // The following exception was thrown during execution in test generation
    try {
    double d50 = jsonArray0.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    java.lang.String str9 = gson7.toString();
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.addSerializationExclusionStrategy(exclusionStrategy13);
    com.google.gson.ExclusionStrategy exclusionStrategy15 = null;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder12.addSerializationExclusionStrategy(exclusionStrategy15);
    com.google.gson.Gson gson17 = gsonBuilder12.create();
    boolean b18 = gson17.serializeNulls();
    java.lang.String str19 = gson17.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = gson7.toJson((java.lang.Object)gson17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    com.google.gson.JsonObject jsonObject53 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray55 = jsonObject53.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray57 = jsonObject53.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement58 = jsonObject53.entrySet();
    java.lang.String str59 = gson7.toJson((com.google.gson.JsonElement)jsonObject53);
    com.google.gson.GsonBuilder gsonBuilder60 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder60.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder60.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy63 = null;
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder62.addSerializationExclusionStrategy(exclusionStrategy63);
    com.google.gson.ExclusionStrategy exclusionStrategy65 = null;
    com.google.gson.GsonBuilder gsonBuilder66 = gsonBuilder62.addSerializationExclusionStrategy(exclusionStrategy65);
    com.google.gson.Gson gson67 = gsonBuilder62.create();
    com.google.gson.internal.Excluder excluder68 = gson67.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long69 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long70 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder68, typetoken_long69);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "{}"+ "'", str59.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder68);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    java.lang.Class<java.math.BigDecimal> cls42 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal43 = gson7.fromJson("0", cls42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("");
    java.io.Reader reader7 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse(reader7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    boolean b3 = jsonPrimitive2.isJsonNull();
    boolean b4 = jsonPrimitive2.isJsonArray();
    boolean b5 = jsonPrimitive2.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    com.google.gson.JsonArray jsonArray53 = jsonElement52.getAsJsonArray();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement54 = jsonArray53.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement54);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive6 = jsonArray0.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    com.google.gson.JsonObject jsonObject26 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray28 = jsonObject26.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray30 = jsonObject26.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive33.getAsJsonPrimitive();
    jsonObject26.add("hi!", (com.google.gson.JsonElement)jsonPrimitive36);
    boolean b38 = jsonObject26.isJsonArray();
    com.google.gson.JsonElement jsonElement40 = jsonObject26.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive42 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d43 = jsonPrimitive42.getAsDouble();
    boolean b44 = jsonPrimitive42.isBoolean();
    boolean b45 = jsonObject26.equals((java.lang.Object)b44);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement46 = jsonObject26.entrySet();
    jsonObject26.addProperty("1", (java.lang.Character)'4');
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement50 = jsonObject26.entrySet();
    boolean b51 = jsonArray6.equals((java.lang.Object)jsonObject26);
    com.google.gson.JsonObject jsonObject52 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray54 = jsonObject52.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray56 = jsonObject52.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    java.lang.Number number61 = jsonPrimitive59.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive62 = jsonPrimitive59.getAsJsonPrimitive();
    jsonObject52.add("hi!", (com.google.gson.JsonElement)jsonPrimitive62);
    boolean b64 = jsonObject52.isJsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive67 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive68 = jsonPrimitive67.getAsJsonPrimitive();
    jsonObject52.add("com.google.gson.stream.MalformedJsonException: 0", (com.google.gson.JsonElement)jsonPrimitive68);
    boolean b70 = jsonObject52.isJsonNull();
    boolean b71 = jsonArray6.remove((com.google.gson.JsonElement)jsonObject52);
    // The following exception was thrown during execution in test generation
    try {
    char char72 = jsonArray6.getAsCharacter();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number61 + "' != '" + 1+ "'", number61.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    java.lang.reflect.Field field5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = fieldNamingPolicy3.translateName(field5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    jsonObject0.addProperty("{\"hi!\":1}", "1");
    com.google.gson.JsonElement jsonElement19 = jsonObject0.remove("4");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setLenient();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder21.setDateFormat((int)'1', (int)'4');
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setDateFormat((int)'#');
    boolean b30 = jsonObject0.equals((java.lang.Object)gsonBuilder27);
    int i31 = jsonObject0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 2);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("0", (java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    int i32 = jsonArray16.getAsInt();
    java.math.BigDecimal bigDecimal33 = jsonArray16.getAsBigDecimal();
    com.google.gson.JsonNull jsonNull35 = new com.google.gson.JsonNull();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement36 = jsonArray16.set((int)'t', (com.google.gson.JsonElement)jsonNull35);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number29 = jsonObject0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.addDeserializationExclusionStrategy(exclusionStrategy6);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setLenient();
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder5.addSerializationExclusionStrategy(exclusionStrategy9);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setDateFormat((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray13 = jsonObject11.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray15 = jsonObject11.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive21 = jsonPrimitive18.getAsJsonPrimitive();
    jsonObject11.add("hi!", (com.google.gson.JsonElement)jsonPrimitive21);
    boolean b23 = jsonObject11.isJsonArray();
    com.google.gson.JsonObject jsonObject24 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray26 = jsonObject24.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray28 = jsonObject24.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b32 = jsonPrimitive31.isString();
    java.lang.Number number33 = jsonPrimitive31.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive34 = jsonPrimitive31.getAsJsonPrimitive();
    jsonObject24.add("hi!", (com.google.gson.JsonElement)jsonPrimitive34);
    boolean b36 = jsonObject24.isJsonArray();
    com.google.gson.JsonElement jsonElement38 = jsonObject24.get("hi!");
    boolean b39 = jsonObject11.equals((java.lang.Object)jsonElement38);
    boolean b40 = jsonPrimitive10.equals((java.lang.Object)b39);
    java.lang.reflect.Type type41 = null;
    java.lang.Appendable appendable42 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)b40, type41, appendable42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number33 + "' != '" + 1+ "'", number33.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder3.setFieldNamingPolicy(fieldNamingPolicy5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    int[] i_array8 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithModifiers(i_array8);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.setLenient();
    boolean b12 = jsonNull0.equals((java.lang.Object)gsonBuilder10);
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLenient();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder13.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy22 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder19.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy22);
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder19.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy26 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy26);
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder18.setFieldNamingPolicy(fieldNamingPolicy26);
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonNull0.equals((java.lang.Object)gsonBuilder29);
    java.lang.reflect.Type type31 = null;
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    boolean b35 = jsonPrimitive33.isBoolean();
    java.lang.String str36 = jsonPrimitive33.getAsString();
    boolean b37 = jsonPrimitive33.isJsonObject();
    java.math.BigDecimal bigDecimal38 = jsonPrimitive33.getAsBigDecimal();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder29.registerTypeAdapter(type31, (java.lang.Object)jsonPrimitive33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "1"+ "'", str36.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    boolean b11 = gson7.htmlSafe();
    java.io.Writer writer12 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter13 = gson7.newJsonWriter(writer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b9 = jsonPrimitive8.isString();
    boolean b10 = jsonPrimitive8.isBoolean();
    java.lang.String str11 = jsonPrimitive8.getAsString();
    boolean b12 = jsonPrimitive8.isJsonObject();
    java.math.BigDecimal bigDecimal13 = jsonPrimitive8.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement14 = gson6.toJsonTree((java.lang.Object)bigDecimal13);
    java.io.Writer writer15 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter16 = gson6.newJsonWriter(writer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1"+ "'", str11.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    int i31 = jsonObject29.size();
    jsonObject29.addProperty("1", "{\"hi!\":1}");
    com.google.gson.JsonArray jsonArray36 = jsonObject29.getAsJsonArray("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive40 = jsonPrimitive39.getAsJsonPrimitive();
    java.math.BigDecimal bigDecimal41 = jsonPrimitive40.getAsBigDecimal();
    jsonObject29.addProperty("{\"hi!\":1}", (java.lang.Number)bigDecimal41);
    com.google.gson.JsonElement jsonElement44 = jsonObject29.get("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement44);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException1 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable3 = null;
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("", throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException4);
    malformedJsonException1.addSuppressed((java.lang.Throwable)jsonParseException4);
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException4);
    java.lang.Throwable throwable9 = null;
    com.google.gson.JsonParseException jsonParseException10 = new com.google.gson.JsonParseException("", throwable9);
    com.google.gson.JsonParseException jsonParseException11 = new com.google.gson.JsonParseException(throwable9);
    // The following exception was thrown during execution in test generation
    try {
    jsonParseException7.addSuppressed(throwable9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement5 = jsonObject0.entrySet();
    // The following exception was thrown during execution in test generation
    try {
    char char6 = jsonObject0.getAsCharacter();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement5);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder11 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy14 = null;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.addSerializationExclusionStrategy(exclusionStrategy14);
    com.google.gson.ExclusionStrategy exclusionStrategy16 = null;
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder13.addSerializationExclusionStrategy(exclusionStrategy16);
    com.google.gson.Gson gson18 = gsonBuilder13.create();
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    java.math.BigDecimal bigDecimal25 = jsonPrimitive20.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement26 = gson18.toJsonTree((java.lang.Object)jsonPrimitive20);
    com.google.gson.internal.Excluder excluder27 = gson18.excluder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder5.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder27);
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.setLenient();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    long long4 = jsonPrimitive1.getAsLong();
    java.math.BigDecimal bigDecimal5 = jsonPrimitive1.getAsBigDecimal();
    java.lang.String str6 = jsonPrimitive1.toString();
    char char7 = jsonPrimitive1.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1"+ "'", str6.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '1');

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonArray jsonArray17 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setLenient();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.excludeFieldsWithoutExposeAnnotation();
    boolean b22 = jsonArray17.equals((java.lang.Object)gsonBuilder18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b25 = jsonPrimitive24.isString();
    boolean b26 = jsonPrimitive24.isBoolean();
    java.lang.String str27 = jsonPrimitive24.getAsString();
    boolean b28 = jsonPrimitive24.isJsonObject();
    int i29 = jsonPrimitive24.getAsInt();
    boolean b30 = jsonPrimitive24.getAsBoolean();
    jsonArray17.add((com.google.gson.JsonElement)jsonPrimitive24);
    int i32 = jsonArray17.size();
    jsonArray0.addAll(jsonArray17);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str34 = jsonArray0.getAsString();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1"+ "'", str27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    java.lang.reflect.Type type5 = null;
    java.lang.Object obj6 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder2.registerTypeAdapter(type5, obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder19.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder19.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.serializeNulls();
    boolean b27 = jsonNull17.equals((java.lang.Object)gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    byte byte24 = jsonArray6.getAsByte();
    jsonArray6.add((java.lang.Boolean)false);
    com.google.gson.JsonElement jsonElement28 = jsonArray6.get(0);
    // The following exception was thrown during execution in test generation
    try {
    long long29 = jsonArray6.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte24 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement28);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.math.BigDecimal bigDecimal20 = jsonArray0.getAsBigDecimal();
    jsonArray0.add((java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    long long23 = jsonArray0.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d20 = jsonPrimitive19.getAsDouble();
    boolean b21 = jsonPrimitive19.isJsonObject();
    float f22 = jsonPrimitive19.getAsFloat();
    java.math.BigInteger bigInteger23 = jsonPrimitive19.getAsBigInteger();
    float f24 = jsonPrimitive19.getAsFloat();
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls25 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException26 = gson17.fromJson((com.google.gson.JsonElement)jsonPrimitive19, cls25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f22 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f24 == 4.0f);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b25 = jsonPrimitive24.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder26.disableInnerClassSerialization();
    boolean b31 = jsonPrimitive24.equals((java.lang.Object)gsonBuilder30);
    boolean b32 = jsonArray0.equals((java.lang.Object)jsonPrimitive24);
    // The following exception was thrown during execution in test generation
    try {
    short s33 = jsonPrimitive24.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    int i34 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement36 = jsonObject18.remove("com.google.gson.stream.MalformedJsonException: hi!");
    // The following exception was thrown during execution in test generation
    try {
    boolean b37 = jsonElement36.isJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement36);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    java.lang.Appendable appendable30 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson17.toJson((com.google.gson.JsonElement)jsonPrimitive28, appendable30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    int i31 = jsonObject29.size();
    int i32 = jsonObject29.size();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray33 = jsonObject29.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    long long2 = jsonPrimitive1.getAsLong();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 4L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "4"+ "'", str3.equals("4"));

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull51 = jsonArray32.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    com.google.gson.TypeAdapterFactory typeAdapterFactory18 = null;
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long19 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long20 = gson17.getDelegateAdapter(typeAdapterFactory18, typetoken_long19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    short s18 = jsonObject0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive16 = jsonObject0.getAsJsonPrimitive("null");
    com.google.gson.JsonArray jsonArray18 = jsonObject0.getAsJsonArray("\"4\"");
    // The following exception was thrown during execution in test generation
    try {
    short s19 = jsonArray18.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    java.lang.String str11 = gson7.toString();
    java.lang.Class<java.math.BigDecimal> cls13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal14 = gson7.fromJson("", cls13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.JsonObject jsonObject12 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray14 = jsonObject12.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray16 = jsonObject12.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b20 = jsonPrimitive19.isString();
    java.lang.Number number21 = jsonPrimitive19.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive22 = jsonPrimitive19.getAsJsonPrimitive();
    jsonObject12.add("hi!", (com.google.gson.JsonElement)jsonPrimitive22);
    boolean b24 = jsonObject12.isJsonArray();
    com.google.gson.JsonObject jsonObject25 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray27 = jsonObject25.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray29 = jsonObject25.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    java.lang.Number number34 = jsonPrimitive32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive35 = jsonPrimitive32.getAsJsonPrimitive();
    jsonObject25.add("hi!", (com.google.gson.JsonElement)jsonPrimitive35);
    boolean b37 = jsonObject25.isJsonArray();
    com.google.gson.JsonElement jsonElement39 = jsonObject25.get("hi!");
    boolean b40 = jsonObject12.equals((java.lang.Object)jsonElement39);
    com.google.gson.JsonObject jsonObject41 = jsonObject12.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement42 = jsonObject41.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive44 = jsonObject41.getAsJsonPrimitive("0");
    com.google.gson.JsonArray jsonArray46 = jsonObject41.getAsJsonArray("");
    com.google.gson.stream.JsonWriter jsonWriter47 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonArray46, jsonWriter47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number21 + "' != '" + 1+ "'", number21.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number34 + "' != '" + 1+ "'", number34.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray46);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement18 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray20 = jsonObject0.getAsJsonArray("com.google.gson.stream.MalformedJsonException: 0");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = jsonObject0.getAsString();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.math.BigDecimal bigDecimal51 = jsonArray32.getAsBigDecimal();
    com.google.gson.LongSerializationPolicy longSerializationPolicy53 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement55 = longSerializationPolicy53.serialize((java.lang.Long)0L);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement56 = jsonArray32.set(4, jsonElement55);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement55);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    java.io.Reader reader34 = null;
    java.lang.reflect.Type type35 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal36 = gson7.fromJson(reader34, type35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.reflect.Type type13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable14 = gson7.fromJson("com.google.gson.stream.MalformedJsonException", type13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    boolean b15 = jsonPrimitive7.isJsonArray();
    java.math.BigInteger bigInteger16 = jsonPrimitive7.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger16);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    java.lang.reflect.Type type10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable11 = gson7.fromJson("{}", type10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }


    com.google.gson.FieldNamingPolicy fieldNamingPolicy0 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    java.lang.reflect.Field field1 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str2 = fieldNamingPolicy0.translateName(field1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy0);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement5 = jsonObject0.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive7 = jsonObject0.getAsJsonPrimitive("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive7);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.setPrettyPrinting();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    com.google.gson.JsonArray jsonArray53 = jsonElement52.getAsJsonArray();
    // The following exception was thrown during execution in test generation
    try {
    long long54 = jsonArray53.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray53);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("0", (java.lang.Character)'a');
    // The following exception was thrown during execution in test generation
    try {
    byte byte15 = jsonObject0.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    java.lang.reflect.Field field9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = fieldNamingPolicy7.translateName(field9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    com.google.gson.JsonElement jsonElement25 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: 0");
    // The following exception was thrown during execution in test generation
    try {
    double d26 = jsonElement25.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement25);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    boolean b21 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: hi!");
    int i22 = jsonObject0.size();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray23 = jsonObject0.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    jsonArray0.add((java.lang.Character)'#');
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger34 = jsonArray0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    int i23 = jsonArray8.size();
    short s24 = jsonArray8.getAsShort();
    int i25 = jsonArray8.getAsInt();
    com.google.gson.JsonElement jsonElement26 = gson6.toJsonTree((java.lang.Object)jsonArray8);
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b29 = jsonPrimitive28.isString();
    java.lang.Number number30 = jsonPrimitive28.getAsNumber();
    long long31 = jsonPrimitive28.getAsLong();
    java.math.BigInteger bigInteger32 = jsonPrimitive28.getAsBigInteger();
    float f33 = jsonPrimitive28.getAsFloat();
    java.lang.Appendable appendable34 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson6.toJson((com.google.gson.JsonElement)jsonPrimitive28, appendable34);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number30 + "' != '" + 1+ "'", number30.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f33 == 1.0f);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    boolean b23 = jsonArray6.isJsonPrimitive();
    int i24 = jsonArray6.getAsInt();
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    int i37 = jsonPrimitive32.getAsInt();
    boolean b38 = jsonPrimitive32.getAsBoolean();
    jsonArray25.add((com.google.gson.JsonElement)jsonPrimitive32);
    java.math.BigInteger bigInteger40 = jsonArray25.getAsBigInteger();
    int i41 = jsonArray25.getAsInt();
    java.lang.Number number42 = jsonArray25.getAsNumber();
    jsonArray25.add("{\"hi!\":1}");
    jsonArray6.add((com.google.gson.JsonElement)jsonArray25);
    // The following exception was thrown during execution in test generation
    try {
    byte byte46 = jsonArray25.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number42 + "' != '" + 1+ "'", number42.equals(1));

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy18 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy19 = gson17.getAdapter(typetoken_fieldNamingStrategy18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonArray jsonArray52 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder53 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder53.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder53.setLenient();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder53.excludeFieldsWithoutExposeAnnotation();
    boolean b57 = jsonArray52.equals((java.lang.Object)gsonBuilder53);
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    boolean b61 = jsonPrimitive59.isBoolean();
    java.lang.String str62 = jsonPrimitive59.getAsString();
    boolean b63 = jsonPrimitive59.isJsonObject();
    int i64 = jsonPrimitive59.getAsInt();
    boolean b65 = jsonPrimitive59.getAsBoolean();
    jsonArray52.add((com.google.gson.JsonElement)jsonPrimitive59);
    int i67 = jsonArray52.size();
    short s68 = jsonArray52.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive70 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b71 = jsonPrimitive70.isString();
    java.lang.Number number72 = jsonPrimitive70.getAsNumber();
    boolean b73 = jsonPrimitive70.isBoolean();
    boolean b74 = jsonArray52.remove((com.google.gson.JsonElement)jsonPrimitive70);
    com.google.gson.JsonArray jsonArray75 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder76 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder77 = gsonBuilder76.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder76.setLenient();
    com.google.gson.GsonBuilder gsonBuilder79 = gsonBuilder76.excludeFieldsWithoutExposeAnnotation();
    boolean b80 = jsonArray75.equals((java.lang.Object)gsonBuilder76);
    com.google.gson.JsonPrimitive jsonPrimitive82 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b83 = jsonPrimitive82.isString();
    boolean b84 = jsonPrimitive82.isBoolean();
    java.lang.String str85 = jsonPrimitive82.getAsString();
    boolean b86 = jsonPrimitive82.isJsonObject();
    int i87 = jsonPrimitive82.getAsInt();
    boolean b88 = jsonPrimitive82.getAsBoolean();
    jsonArray75.add((com.google.gson.JsonElement)jsonPrimitive82);
    int i90 = jsonArray75.size();
    short s91 = jsonArray75.getAsShort();
    int i92 = jsonArray75.getAsInt();
    jsonArray52.addAll(jsonArray75);
    int i94 = jsonArray75.getAsInt();
    boolean b95 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray75);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement97 = jsonArray75.get(3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "1"+ "'", str62.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s68 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number72 + "' != '" + 1+ "'", number72.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "1"+ "'", str85.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s91 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    jsonArray0.add((java.lang.Boolean)true);
    jsonArray0.add((java.lang.Character)'4');
    // The following exception was thrown during execution in test generation
    try {
    float f23 = jsonArray0.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    double d6 = jsonPrimitive1.getAsDouble();
    java.math.BigInteger bigInteger7 = jsonPrimitive1.getAsBigInteger();
    boolean b8 = jsonPrimitive1.isString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.serializeSpecialFloatingPointValues();
    com.google.gson.JsonElement jsonElement17 = gson6.toJsonTree((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d35 = jsonPrimitive34.getAsDouble();
    boolean b36 = jsonPrimitive34.isBoolean();
    boolean b37 = jsonObject18.equals((java.lang.Object)b36);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement38 = jsonObject18.entrySet();
    com.google.gson.JsonArray jsonArray40 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement42 = jsonObject18.remove("hi!");
    com.google.gson.JsonElement jsonElement44 = jsonObject18.get("[1]");
    java.lang.Appendable appendable45 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson6.toJson((java.lang.Object)jsonElement44, appendable45);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d35 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement44);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    float f17 = jsonArray0.getAsFloat();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy20 = null;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.addSerializationExclusionStrategy(exclusionStrategy20);
    boolean b22 = jsonArray0.equals((java.lang.Object)exclusionStrategy20);
    int i23 = jsonArray0.size();
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    double d31 = jsonPrimitive26.getAsDouble();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement32 = jsonArray0.set((int)(byte)1, (com.google.gson.JsonElement)jsonPrimitive26);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f17 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 1.0d);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }


    java.lang.Throwable throwable2 = null;
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException("", throwable2);
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException("hi!", throwable2);
    java.lang.Throwable throwable6 = null;
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("", throwable6);
    // The following exception was thrown during execution in test generation
    try {
    malformedJsonException4.addSuppressed(throwable6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    int i31 = jsonObject29.size();
    int i32 = jsonObject29.size();
    com.google.gson.JsonElement jsonElement34 = jsonObject29.get("{\"hi!\":1}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement34);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonElement jsonElement22 = jsonObject0.remove("{\"hi!\":1}");
    int i23 = jsonObject0.size();
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isJsonArray();
    boolean b29 = jsonPrimitive26.getAsBoolean();
    java.math.BigInteger bigInteger30 = jsonPrimitive26.getAsBigInteger();
    jsonObject0.addProperty("", (java.lang.Number)bigInteger30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger30);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse("");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement10 = jsonParser0.parse("com.google.gson.JsonParseException: {\"hi!\":1}");
      org.junit.Assert.fail("Expected exception of type com.google.gson.JsonSyntaxException");
    } catch (com.google.gson.JsonSyntaxException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("com.google.gson.JsonSyntaxException")) {
        org.junit.Assert.fail("Expected exception of type com.google.gson.JsonSyntaxException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }


    java.lang.Throwable throwable1 = null;
    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("", throwable1);
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException2);
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException2);
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable9 = null;
    com.google.gson.JsonParseException jsonParseException10 = new com.google.gson.JsonParseException("", throwable9);
    com.google.gson.stream.MalformedJsonException malformedJsonException11 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException10);
    malformedJsonException7.addSuppressed((java.lang.Throwable)jsonParseException10);
    com.google.gson.stream.MalformedJsonException malformedJsonException13 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException7);
    com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException7);
    jsonParseException2.addSuppressed((java.lang.Throwable)malformedJsonException14);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setDateFormat((int)'1', (int)'4');
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder0.setPrettyPrinting();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement18 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray20 = jsonObject0.getAsJsonArray("com.google.gson.stream.MalformedJsonException: 0");
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal21 = jsonObject0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    jsonArray0.add((java.lang.Boolean)true);
    jsonArray0.add((java.lang.Character)'4');
    jsonArray0.add((java.lang.Number)(-1));
    // The following exception was thrown during execution in test generation
    try {
    int i25 = jsonArray0.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.enableComplexMapKeySerialization();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.Gson gson2 = gsonBuilder0.create();
    com.google.gson.JsonPrimitive jsonPrimitive4 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b5 = jsonPrimitive4.isString();
    java.lang.String str6 = jsonPrimitive4.getAsString();
    float f7 = jsonPrimitive4.getAsFloat();
    java.lang.Appendable appendable8 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson2.toJson((com.google.gson.JsonElement)jsonPrimitive4, appendable8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1"+ "'", str6.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f7 == 1.0f);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d54 = jsonPrimitive53.getAsDouble();
    java.lang.Number number55 = jsonPrimitive53.getAsNumber();
    jsonArray32.add(number55);
    // The following exception was thrown during execution in test generation
    try {
    double d57 = jsonArray32.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number55);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    long long4 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 4L);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.serializeNulls();
    boolean b10 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive13 = jsonPrimitive12.getAsJsonPrimitive();
    boolean b14 = jsonPrimitive13.isJsonNull();
    java.lang.reflect.Type type15 = null;
    java.lang.Appendable appendable16 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)b14, type15, appendable16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }


    com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
    java.lang.Object obj1 = null;
    boolean b2 = jsonNull0.equals(obj1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive4 = jsonPrimitive1.getAsJsonPrimitive();
    boolean b5 = jsonPrimitive4.isString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject6 = jsonPrimitive4.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger20 = jsonObject0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    java.lang.reflect.Type type10 = null;
    com.google.gson.stream.JsonWriter jsonWriter11 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)(-1.0f), type10, jsonWriter11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    int i24 = jsonObject0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number25 = jsonObject0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 2);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    java.lang.Number number18 = jsonArray0.getAsNumber();
    com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    boolean b24 = jsonArray19.equals((java.lang.Object)gsonBuilder20);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    int i31 = jsonPrimitive26.getAsInt();
    boolean b32 = jsonPrimitive26.getAsBoolean();
    jsonArray19.add((com.google.gson.JsonElement)jsonPrimitive26);
    java.math.BigInteger bigInteger34 = jsonArray19.getAsBigInteger();
    int i35 = jsonArray19.getAsInt();
    com.google.gson.JsonNull jsonNull36 = new com.google.gson.JsonNull();
    boolean b37 = jsonArray19.contains((com.google.gson.JsonElement)jsonNull36);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement38 = jsonArray19.iterator();
    java.lang.Number number39 = jsonArray19.getAsNumber();
    char char40 = jsonArray19.getAsCharacter();
    jsonArray0.addAll(jsonArray19);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive42 = jsonArray19.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number18 + "' != '" + 1+ "'", number18.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number39 + "' != '" + 1+ "'", number39.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '1');

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.serializeNulls();
    com.google.gson.stream.JsonReader jsonReader10 = null;
    java.lang.reflect.Type type11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array12 = gson7.fromJson(jsonReader10, type11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.stream.JsonReader jsonReader5 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse(jsonReader5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject26 = jsonArray6.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.JsonObject jsonObject16 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray18 = jsonObject16.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray20 = jsonObject16.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    java.lang.Number number25 = jsonPrimitive23.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive26 = jsonPrimitive23.getAsJsonPrimitive();
    jsonObject16.add("hi!", (com.google.gson.JsonElement)jsonPrimitive26);
    boolean b28 = jsonObject16.isJsonArray();
    com.google.gson.JsonElement jsonElement30 = jsonObject16.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d33 = jsonPrimitive32.getAsDouble();
    boolean b34 = jsonPrimitive32.isBoolean();
    boolean b35 = jsonObject16.equals((java.lang.Object)b34);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement36 = jsonObject16.entrySet();
    com.google.gson.JsonArray jsonArray38 = jsonObject16.getAsJsonArray("1");
    int i39 = jsonObject16.size();
    boolean b40 = jsonObject16.isJsonObject();
    jsonObject16.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Number)1L);
    com.google.gson.JsonPrimitive jsonPrimitive46 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b47 = jsonPrimitive46.isString();
    java.lang.Number number48 = jsonPrimitive46.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive49 = jsonPrimitive46.getAsJsonPrimitive();
    boolean b50 = jsonPrimitive49.isString();
    java.math.BigDecimal bigDecimal51 = jsonPrimitive49.getAsBigDecimal();
    jsonObject16.addProperty("hi!", (java.lang.Number)bigDecimal51);
    boolean b53 = jsonPrimitive9.equals((java.lang.Object)bigDecimal51);
    long long54 = jsonPrimitive9.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number25 + "' != '" + 1+ "'", number25.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d33 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number48 + "' != '" + 1+ "'", number48.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 1L);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal2 = jsonPrimitive1.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    jsonArray16.add((java.lang.Number)(byte)1);
    com.google.gson.JsonElement jsonElement38 = jsonArray16.remove((int)(byte)0);
    boolean b39 = jsonElement38.isJsonArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d35 = jsonPrimitive34.getAsDouble();
    boolean b36 = jsonPrimitive34.isBoolean();
    boolean b37 = jsonObject18.equals((java.lang.Object)b36);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement38 = jsonObject18.entrySet();
    com.google.gson.JsonArray jsonArray40 = jsonObject18.getAsJsonArray("1");
    int i41 = jsonObject18.size();
    boolean b42 = jsonObject18.isJsonObject();
    boolean b43 = jsonObject18.isJsonPrimitive();
    com.google.gson.JsonElement jsonElement45 = jsonObject18.remove("com.google.gson.stream.MalformedJsonException: 0");
    int i46 = jsonObject18.size();
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls47 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException48 = gson17.fromJson((com.google.gson.JsonElement)jsonObject18, cls47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d35 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.lang.Number number20 = jsonArray0.getAsNumber();
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy24 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder21.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder21.enableComplexMapKeySerialization();
    com.google.gson.Gson gson27 = gsonBuilder21.create();
    boolean b28 = gson27.htmlSafe();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    int i44 = jsonArray29.size();
    short s45 = jsonArray29.getAsShort();
    int i46 = jsonArray29.getAsInt();
    com.google.gson.JsonElement jsonElement47 = gson27.toJsonTree((java.lang.Object)jsonArray29);
    boolean b48 = jsonArray0.remove((com.google.gson.JsonElement)jsonArray29);
    jsonArray0.add((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s45 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy39 = null;
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy39);
    com.google.gson.ExclusionStrategy exclusionStrategy41 = null;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy41);
    com.google.gson.Gson gson43 = gsonBuilder38.create();
    java.lang.String str44 = gson43.toString();
    java.lang.reflect.Type type46 = null;
    java.lang.Appendable appendable47 = gson43.fromJson("", type46);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy48 = gson43.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setLenient();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder50.excludeFieldsWithoutExposeAnnotation();
    boolean b54 = jsonArray49.equals((java.lang.Object)gsonBuilder50);
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    boolean b58 = jsonPrimitive56.isBoolean();
    java.lang.String str59 = jsonPrimitive56.getAsString();
    boolean b60 = jsonPrimitive56.isJsonObject();
    int i61 = jsonPrimitive56.getAsInt();
    boolean b62 = jsonPrimitive56.getAsBoolean();
    jsonArray49.add((com.google.gson.JsonElement)jsonPrimitive56);
    int i64 = jsonArray49.size();
    com.google.gson.JsonArray jsonArray65 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder66 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder66.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder66.setLenient();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder66.excludeFieldsWithoutExposeAnnotation();
    boolean b70 = jsonArray65.equals((java.lang.Object)gsonBuilder66);
    com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b73 = jsonPrimitive72.isString();
    boolean b74 = jsonPrimitive72.isBoolean();
    java.lang.String str75 = jsonPrimitive72.getAsString();
    boolean b76 = jsonPrimitive72.isJsonObject();
    int i77 = jsonPrimitive72.getAsInt();
    boolean b78 = jsonPrimitive72.getAsBoolean();
    jsonArray65.add((com.google.gson.JsonElement)jsonPrimitive72);
    char char80 = jsonArray65.getAsCharacter();
    com.google.gson.JsonElement jsonElement81 = null;
    jsonArray65.add(jsonElement81);
    jsonArray49.addAll(jsonArray65);
    com.google.gson.JsonArray jsonArray84 = new com.google.gson.JsonArray();
    jsonArray84.add((java.lang.Boolean)true);
    jsonArray49.addAll(jsonArray84);
    com.google.gson.JsonElement jsonElement88 = gson43.toJsonTree((java.lang.Object)jsonArray49);
    com.google.gson.JsonElement jsonElement89 = jsonArray0.set((int)(byte)0, (com.google.gson.JsonElement)jsonArray49);
    boolean b90 = jsonElement89.isJsonObject();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1"+ "'", str59.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "1"+ "'", str75.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingPolicy(fieldNamingPolicy11);
    com.google.gson.Gson gson13 = gsonBuilder10.create();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy14 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy15 = gson13.getAdapter(typetoken_fieldNamingStrategy14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    java.lang.String str11 = gson7.toString();
    java.io.Writer writer12 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter13 = gson7.newJsonWriter(writer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    boolean b3 = jsonPrimitive2.isJsonNull();
    boolean b4 = jsonPrimitive2.isString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull5 = jsonPrimitive2.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    java.lang.reflect.Type type35 = null;
    java.lang.Appendable appendable36 = gson7.fromJson("", type35);
    java.io.Reader reader37 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader38 = gson7.newJsonReader(reader37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable36);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive16 = jsonObject0.getAsJsonPrimitive("null");
    com.google.gson.JsonArray jsonArray18 = jsonObject0.getAsJsonArray("\"4\"");
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal19 = jsonObject0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    java.lang.String str5 = jsonPrimitive1.getAsString();
    boolean b6 = jsonPrimitive1.getAsBoolean();
    byte byte7 = jsonPrimitive1.getAsByte();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1"+ "'", str5.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte7 == (byte)1);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal20 = jsonArray0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)' ');
    // The following exception was thrown during execution in test generation
    try {
    float f2 = jsonPrimitive1.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.Object obj12 = null;
    java.lang.String str13 = gson7.toJson(obj12);
    java.lang.Class<java.math.BigDecimal> cls15 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal16 = gson7.fromJson("com.google.gson.stream.MalformedJsonException: 0", cls15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null"+ "'", str13.equals("null"));

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    byte byte24 = jsonArray6.getAsByte();
    jsonArray6.add((java.lang.Boolean)false);
    com.google.gson.JsonElement jsonElement28 = jsonArray6.get(0);
    jsonArray6.add("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte24 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement28);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    boolean b5 = jsonPrimitive1.getAsBoolean();
    long long6 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1L);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    com.google.gson.JsonObject jsonObject16 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray18 = jsonObject16.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray20 = jsonObject16.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    java.lang.Number number25 = jsonPrimitive23.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive26 = jsonPrimitive23.getAsJsonPrimitive();
    jsonObject16.add("hi!", (com.google.gson.JsonElement)jsonPrimitive26);
    jsonObject16.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject16.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Boolean)false);
    jsonObject16.addProperty("{\"hi!\":1}", (java.lang.Character)' ');
    java.lang.Appendable appendable37 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonObject16, appendable37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number25 + "' != '" + 1+ "'", number25.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive26);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b2 = jsonPrimitive1.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder3 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.setLenient();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder3.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder3.disableInnerClassSerialization();
    boolean b8 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder7);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull9 = jsonPrimitive1.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    short s19 = jsonArray0.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s19 == (short)1);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy7 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement9 = longSerializationPolicy7.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder0.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.addSerializationExclusionStrategy(exclusionStrategy23);
    com.google.gson.ExclusionStrategy exclusionStrategy25 = null;
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder22.addSerializationExclusionStrategy(exclusionStrategy25);
    com.google.gson.Gson gson27 = gsonBuilder22.create();
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b30 = jsonPrimitive29.isString();
    boolean b31 = jsonPrimitive29.isBoolean();
    java.lang.String str32 = jsonPrimitive29.getAsString();
    boolean b33 = jsonPrimitive29.isJsonObject();
    java.math.BigDecimal bigDecimal34 = jsonPrimitive29.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement35 = gson27.toJsonTree((java.lang.Object)jsonPrimitive29);
    com.google.gson.internal.Excluder excluder36 = gson27.excluder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder19.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder36);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder12.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder36);
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder0.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder36);
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "1"+ "'", str32.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setPrettyPrinting();
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeSpecialFloatingPointValues();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder0.registerTypeHierarchyAdapter(cls5, (java.lang.Object)gsonBuilder10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = gson7.toJson((java.lang.Object)gsonBuilder16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy2 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy2);
    com.google.gson.ExclusionStrategy exclusionStrategy4 = null;
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder1.addDeserializationExclusionStrategy(exclusionStrategy4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    com.google.gson.JsonObject jsonObject26 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray28 = jsonObject26.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray30 = jsonObject26.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive33.getAsJsonPrimitive();
    jsonObject26.add("hi!", (com.google.gson.JsonElement)jsonPrimitive36);
    boolean b38 = jsonObject26.isJsonArray();
    com.google.gson.JsonElement jsonElement40 = jsonObject26.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive42 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d43 = jsonPrimitive42.getAsDouble();
    boolean b44 = jsonPrimitive42.isBoolean();
    boolean b45 = jsonObject26.equals((java.lang.Object)b44);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement46 = jsonObject26.entrySet();
    jsonObject26.addProperty("1", (java.lang.Character)'4');
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement50 = jsonObject26.entrySet();
    boolean b51 = jsonArray6.equals((java.lang.Object)jsonObject26);
    com.google.gson.JsonElement jsonElement53 = jsonArray6.get((int)(short)0);
    com.google.gson.JsonArray jsonArray54 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder55 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder55.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder55.setLenient();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder55.excludeFieldsWithoutExposeAnnotation();
    boolean b59 = jsonArray54.equals((java.lang.Object)gsonBuilder55);
    com.google.gson.JsonPrimitive jsonPrimitive61 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b62 = jsonPrimitive61.isString();
    boolean b63 = jsonPrimitive61.isBoolean();
    java.lang.String str64 = jsonPrimitive61.getAsString();
    boolean b65 = jsonPrimitive61.isJsonObject();
    int i66 = jsonPrimitive61.getAsInt();
    boolean b67 = jsonPrimitive61.getAsBoolean();
    jsonArray54.add((com.google.gson.JsonElement)jsonPrimitive61);
    boolean b69 = jsonPrimitive61.isJsonNull();
    boolean b70 = jsonPrimitive61.isNumber();
    java.math.BigDecimal bigDecimal71 = jsonPrimitive61.getAsBigDecimal();
    jsonArray6.add((java.lang.Number)bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "1"+ "'", str64.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive16 = jsonPrimitive15.getAsJsonPrimitive();
    jsonObject0.add("com.google.gson.stream.MalformedJsonException: 0", (com.google.gson.JsonElement)jsonPrimitive16);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("");
    jsonObject0.addProperty("{\"hi!\":1}", (java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    jsonObject29.addProperty("0", (java.lang.Number)1.0f);
    jsonObject29.addProperty("1", "4");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement36 = jsonObject29.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement36);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    int i3 = jsonPrimitive2.getAsInt();
    float f4 = jsonPrimitive2.getAsFloat();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject5 = jsonPrimitive2.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 1.0f);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.io.Reader reader12 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader13 = gson7.newJsonReader(reader12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.remove("hi!");
    // The following exception was thrown during execution in test generation
    try {
    double d25 = jsonObject0.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isJsonArray();
    boolean b12 = jsonPrimitive9.getAsBoolean();
    java.math.BigInteger bigInteger13 = jsonPrimitive9.getAsBigInteger();
    boolean b14 = jsonPrimitive9.isJsonObject();
    java.lang.Appendable appendable15 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonPrimitive9, appendable15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.JsonElement jsonElement35 = jsonObject18.remove("");
    jsonObject18.addProperty("com.google.gson.stream.MalformedJsonException: 0", "");
    com.google.gson.JsonObject jsonObject40 = jsonObject18.getAsJsonObject("\"4\"");
    // The following exception was thrown during execution in test generation
    try {
    short s41 = jsonObject40.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject40);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.JsonArray jsonArray35 = jsonObject18.getAsJsonArray("4");
    com.google.gson.JsonObject jsonObject37 = jsonObject18.getAsJsonObject("");
    // The following exception was thrown during execution in test generation
    try {
    int i38 = jsonObject37.size();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject37);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1L);
    java.lang.reflect.Type type19 = null;
    java.lang.Appendable appendable20 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)1L, type19, appendable20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    boolean b34 = gson7.serializeNulls();
    com.google.gson.JsonArray jsonArray35 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.setLenient();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder36.excludeFieldsWithoutExposeAnnotation();
    boolean b40 = jsonArray35.equals((java.lang.Object)gsonBuilder36);
    com.google.gson.JsonPrimitive jsonPrimitive42 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b43 = jsonPrimitive42.isString();
    boolean b44 = jsonPrimitive42.isBoolean();
    java.lang.String str45 = jsonPrimitive42.getAsString();
    boolean b46 = jsonPrimitive42.isJsonObject();
    int i47 = jsonPrimitive42.getAsInt();
    boolean b48 = jsonPrimitive42.getAsBoolean();
    jsonArray35.add((com.google.gson.JsonElement)jsonPrimitive42);
    int i50 = jsonArray35.size();
    int i51 = jsonArray35.getAsInt();
    int i52 = jsonArray35.getAsInt();
    boolean b53 = jsonArray35.isJsonObject();
    java.lang.reflect.Type type54 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException55 = gson7.fromJson((com.google.gson.JsonElement)jsonArray35, type54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "1"+ "'", str45.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder4.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder4.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy11);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy15 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setFieldNamingPolicy(fieldNamingPolicy15);
    boolean b17 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder14);
    int[] i_array18 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder14.excludeFieldsWithModifiers(i_array18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.Gson gson5 = gsonBuilder4.create();
    boolean b6 = gson5.htmlSafe();
    java.lang.Class<java.lang.reflect.Type> cls7 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type8 = gson5.getAdapter(cls7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    byte byte24 = jsonArray6.getAsByte();
    jsonArray6.add((java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    float f27 = jsonArray6.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte24 == (byte)1);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setLenient();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.excludeFieldsWithoutExposeAnnotation();
    boolean b27 = jsonArray22.equals((java.lang.Object)gsonBuilder23);
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b30 = jsonPrimitive29.isString();
    boolean b31 = jsonPrimitive29.isBoolean();
    java.lang.String str32 = jsonPrimitive29.getAsString();
    boolean b33 = jsonPrimitive29.isJsonObject();
    int i34 = jsonPrimitive29.getAsInt();
    boolean b35 = jsonPrimitive29.getAsBoolean();
    jsonArray22.add((com.google.gson.JsonElement)jsonPrimitive29);
    jsonArray16.addAll(jsonArray22);
    java.math.BigInteger bigInteger38 = jsonArray22.getAsBigInteger();
    java.math.BigInteger bigInteger39 = jsonArray22.getAsBigInteger();
    jsonArray22.add((java.lang.Number)(byte)0);
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls42 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException43 = gson7.fromJson((com.google.gson.JsonElement)jsonArray22, cls42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "1"+ "'", str32.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger39);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonPrimitive jsonPrimitive29 = jsonElement27.getAsJsonPrimitive();
    int i30 = jsonElement27.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)0L);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull3 = jsonPrimitive2.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable4 = null;
    com.google.gson.JsonParseException jsonParseException5 = new com.google.gson.JsonParseException("", throwable4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException5);
    malformedJsonException2.addSuppressed((java.lang.Throwable)jsonParseException5);
    com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException2);
    java.lang.Throwable[] throwable_array9 = malformedJsonException2.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array9);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.setDateFormat((int)'4', 100);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy12 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy12);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder9.disableHtmlEscaping();
    com.google.gson.ExclusionStrategy exclusionStrategy15 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array16 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy15 };
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder9.setExclusionStrategies(exclusionStrategy_array16);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder8.setExclusionStrategies(exclusionStrategy_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    java.io.Reader reader10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader11 = gson7.newJsonReader(reader10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    jsonArray0.add((java.lang.Character)'#');
    jsonArray0.add((java.lang.Boolean)true);
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Boolean)false);
    boolean b38 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive37);
    java.lang.String str39 = jsonPrimitive37.toString();
    // The following exception was thrown during execution in test generation
    try {
    int i40 = jsonPrimitive37.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "false"+ "'", str39.equals("false"));

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    long long10 = jsonPrimitive9.getAsLong();
    java.lang.Appendable appendable11 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson6.toJson((java.lang.Object)jsonPrimitive9, appendable11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 4L);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonArray jsonArray35 = new com.google.gson.JsonArray();
    jsonArray35.add((java.lang.Boolean)true);
    jsonArray0.addAll(jsonArray35);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str39 = jsonArray0.getAsString();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    com.google.gson.stream.JsonReader jsonReader17 = null;
    java.lang.reflect.Type type18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array19 = gson7.fromJson(jsonReader17, type18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.JsonPrimitive jsonPrimitive6 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i7 = jsonPrimitive6.getAsInt();
    boolean b8 = jsonPrimitive6.isString();
    java.lang.reflect.Type type9 = null;
    java.lang.Appendable appendable10 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson4.toJson((java.lang.Object)jsonPrimitive6, type9, appendable10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.setLenient();
    java.lang.reflect.Type type4 = null;
    com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    boolean b10 = jsonArray5.equals((java.lang.Object)gsonBuilder6);
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b13 = jsonPrimitive12.isString();
    boolean b14 = jsonPrimitive12.isBoolean();
    java.lang.String str15 = jsonPrimitive12.getAsString();
    boolean b16 = jsonPrimitive12.isJsonObject();
    int i17 = jsonPrimitive12.getAsInt();
    boolean b18 = jsonPrimitive12.getAsBoolean();
    jsonArray5.add((com.google.gson.JsonElement)jsonPrimitive12);
    java.math.BigInteger bigInteger20 = jsonArray5.getAsBigInteger();
    int i21 = jsonArray5.getAsInt();
    com.google.gson.JsonNull jsonNull22 = new com.google.gson.JsonNull();
    boolean b23 = jsonArray5.contains((com.google.gson.JsonElement)jsonNull22);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement24 = jsonArray5.iterator();
    java.lang.Number number25 = jsonArray5.getAsNumber();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy29 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder26.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy29);
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder26.enableComplexMapKeySerialization();
    com.google.gson.Gson gson32 = gsonBuilder26.create();
    boolean b33 = gson32.htmlSafe();
    com.google.gson.JsonArray jsonArray34 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder35 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder35.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder35.setLenient();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder35.excludeFieldsWithoutExposeAnnotation();
    boolean b39 = jsonArray34.equals((java.lang.Object)gsonBuilder35);
    com.google.gson.JsonPrimitive jsonPrimitive41 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b42 = jsonPrimitive41.isString();
    boolean b43 = jsonPrimitive41.isBoolean();
    java.lang.String str44 = jsonPrimitive41.getAsString();
    boolean b45 = jsonPrimitive41.isJsonObject();
    int i46 = jsonPrimitive41.getAsInt();
    boolean b47 = jsonPrimitive41.getAsBoolean();
    jsonArray34.add((com.google.gson.JsonElement)jsonPrimitive41);
    int i49 = jsonArray34.size();
    short s50 = jsonArray34.getAsShort();
    int i51 = jsonArray34.getAsInt();
    com.google.gson.JsonElement jsonElement52 = gson32.toJsonTree((java.lang.Object)jsonArray34);
    boolean b53 = jsonArray5.remove((com.google.gson.JsonElement)jsonArray34);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder3.registerTypeAdapter(type4, (java.lang.Object)b53);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number25 + "' != '" + 1+ "'", number25.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "1"+ "'", str44.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    java.lang.reflect.Type type6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable7 = gson4.fromJson("4", type6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder5.setFieldNamingPolicy(fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy20 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder17.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy20);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder17.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder17.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy24 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder17.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder15.setFieldNamingPolicy(fieldNamingPolicy24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    boolean b12 = jsonArray7.equals((java.lang.Object)gsonBuilder8);
    com.google.gson.JsonPrimitive jsonPrimitive14 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b15 = jsonPrimitive14.isString();
    boolean b16 = jsonPrimitive14.isBoolean();
    java.lang.String str17 = jsonPrimitive14.getAsString();
    boolean b18 = jsonPrimitive14.isJsonObject();
    int i19 = jsonPrimitive14.getAsInt();
    boolean b20 = jsonPrimitive14.getAsBoolean();
    jsonArray7.add((com.google.gson.JsonElement)jsonPrimitive14);
    int i22 = jsonArray7.size();
    int i23 = jsonArray7.getAsInt();
    boolean b24 = jsonArray7.isJsonPrimitive();
    int i25 = jsonArray7.size();
    boolean b26 = jsonArray7.getAsBoolean();
    java.lang.reflect.Type type27 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement28 = gson6.toJsonTree((java.lang.Object)b26, type27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    com.google.gson.JsonObject jsonObject53 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray55 = jsonObject53.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray57 = jsonObject53.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement58 = jsonObject53.entrySet();
    java.lang.String str59 = gson7.toJson((com.google.gson.JsonElement)jsonObject53);
    com.google.gson.LongSerializationPolicy longSerializationPolicy60 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement62 = longSerializationPolicy60.serialize((java.lang.Long)(-1L));
    com.google.gson.JsonElement jsonElement64 = longSerializationPolicy60.serialize((java.lang.Long)0L);
    com.google.gson.JsonElement jsonElement66 = longSerializationPolicy60.serialize((java.lang.Long)100L);
    com.google.gson.JsonElement jsonElement68 = longSerializationPolicy60.serialize((java.lang.Long)4L);
    java.lang.reflect.Type type69 = null;
    com.google.gson.stream.JsonWriter jsonWriter70 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)4L, type69, jsonWriter70);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "{}"+ "'", str59.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement68);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b4 = jsonPrimitive3.isString();
    java.lang.Number number5 = jsonPrimitive3.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive6 = jsonPrimitive3.getAsJsonPrimitive();
    byte byte7 = jsonPrimitive3.getAsByte();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement8 = jsonArray0.set((int)(short)10, (com.google.gson.JsonElement)jsonPrimitive3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number5 + "' != '" + 1+ "'", number5.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte7 == (byte)1);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement5 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray7 = jsonObject0.getAsJsonArray("com.google.gson.stream.MalformedJsonException: ");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray7);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    // The following exception was thrown during execution in test generation
    try {
    long long53 = jsonArray13.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    long long2 = jsonPrimitive1.getAsLong();
    boolean b3 = jsonPrimitive1.isBoolean();
    long long4 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 4L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 4L);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    float f17 = jsonArray0.getAsFloat();
    jsonArray0.add((java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger20 = jsonArray0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f17 == 1.0f);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Character)'1');
    jsonObject0.addProperty("{}", "{}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    java.lang.Number number17 = jsonArray0.getAsNumber();
    jsonArray0.add("{\"hi!\":1}");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull20 = jsonArray0.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number17 + "' != '" + 1+ "'", number17.equals(1));

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder12 = gson7.excluder();
    java.lang.Class<java.lang.reflect.Type> cls13 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type14 = gson7.getAdapter(cls13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder12);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    java.lang.reflect.Field field9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = fieldNamingPolicy7.translateName(field9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    int i23 = jsonArray8.size();
    short s24 = jsonArray8.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    java.lang.Number number28 = jsonPrimitive26.getAsNumber();
    boolean b29 = jsonPrimitive26.isBoolean();
    boolean b30 = jsonArray8.remove((com.google.gson.JsonElement)jsonPrimitive26);
    com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    boolean b36 = jsonArray31.equals((java.lang.Object)gsonBuilder32);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b39 = jsonPrimitive38.isString();
    boolean b40 = jsonPrimitive38.isBoolean();
    java.lang.String str41 = jsonPrimitive38.getAsString();
    boolean b42 = jsonPrimitive38.isJsonObject();
    int i43 = jsonPrimitive38.getAsInt();
    boolean b44 = jsonPrimitive38.getAsBoolean();
    jsonArray31.add((com.google.gson.JsonElement)jsonPrimitive38);
    int i46 = jsonArray31.size();
    short s47 = jsonArray31.getAsShort();
    int i48 = jsonArray31.getAsInt();
    jsonArray8.addAll(jsonArray31);
    int i50 = jsonArray31.getAsInt();
    long long51 = jsonArray31.getAsLong();
    java.lang.reflect.Type type52 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str53 = gson7.toJson((java.lang.Object)jsonArray31, type52);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number28 + "' != '" + 1+ "'", number28.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "1"+ "'", str41.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s47 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long51 == 1L);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    short s4 = jsonPrimitive1.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.setLenient();
    com.google.gson.Gson gson4 = gsonBuilder3.create();
    com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    boolean b10 = jsonArray5.equals((java.lang.Object)gsonBuilder6);
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b13 = jsonPrimitive12.isString();
    boolean b14 = jsonPrimitive12.isBoolean();
    java.lang.String str15 = jsonPrimitive12.getAsString();
    boolean b16 = jsonPrimitive12.isJsonObject();
    int i17 = jsonPrimitive12.getAsInt();
    boolean b18 = jsonPrimitive12.getAsBoolean();
    jsonArray5.add((com.google.gson.JsonElement)jsonPrimitive12);
    java.math.BigInteger bigInteger20 = jsonArray5.getAsBigInteger();
    com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder22 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.setLenient();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.excludeFieldsWithoutExposeAnnotation();
    boolean b26 = jsonArray21.equals((java.lang.Object)gsonBuilder22);
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b29 = jsonPrimitive28.isString();
    boolean b30 = jsonPrimitive28.isBoolean();
    java.lang.String str31 = jsonPrimitive28.getAsString();
    boolean b32 = jsonPrimitive28.isJsonObject();
    int i33 = jsonPrimitive28.getAsInt();
    boolean b34 = jsonPrimitive28.getAsBoolean();
    jsonArray21.add((com.google.gson.JsonElement)jsonPrimitive28);
    char char36 = jsonArray21.getAsCharacter();
    com.google.gson.JsonArray jsonArray37 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder38 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder38.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.setLenient();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder38.excludeFieldsWithoutExposeAnnotation();
    boolean b42 = jsonArray37.equals((java.lang.Object)gsonBuilder38);
    com.google.gson.JsonPrimitive jsonPrimitive44 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b45 = jsonPrimitive44.isString();
    boolean b46 = jsonPrimitive44.isBoolean();
    java.lang.String str47 = jsonPrimitive44.getAsString();
    boolean b48 = jsonPrimitive44.isJsonObject();
    int i49 = jsonPrimitive44.getAsInt();
    boolean b50 = jsonPrimitive44.getAsBoolean();
    jsonArray37.add((com.google.gson.JsonElement)jsonPrimitive44);
    jsonArray21.addAll(jsonArray37);
    double d53 = jsonArray37.getAsDouble();
    jsonArray5.addAll(jsonArray37);
    short s55 = jsonArray37.getAsShort();
    java.math.BigDecimal bigDecimal56 = jsonArray37.getAsBigDecimal();
    java.lang.reflect.Type type57 = null;
    com.google.gson.stream.JsonWriter jsonWriter58 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson4.toJson((java.lang.Object)bigDecimal56, type57, jsonWriter58);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "1"+ "'", str31.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char36 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "1"+ "'", str47.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d53 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s55 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    java.lang.reflect.Type type35 = null;
    java.lang.Appendable appendable36 = gson7.fromJson("", type35);
    com.google.gson.stream.JsonReader jsonReader37 = null;
    java.lang.reflect.Type type38 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array39 = gson7.fromJson(jsonReader37, type38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable36);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy16 = null;
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.addSerializationExclusionStrategy(exclusionStrategy16);
    com.google.gson.ExclusionStrategy exclusionStrategy18 = null;
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder15.addSerializationExclusionStrategy(exclusionStrategy18);
    com.google.gson.Gson gson20 = gsonBuilder15.create();
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    java.math.BigDecimal bigDecimal27 = jsonPrimitive22.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement28 = gson20.toJsonTree((java.lang.Object)jsonPrimitive22);
    com.google.gson.internal.Excluder excluder29 = gson20.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive32 = jsonPrimitive31.getAsJsonPrimitive();
    boolean b33 = jsonPrimitive32.isJsonNull();
    boolean b34 = jsonPrimitive32.isJsonArray();
    java.lang.String str35 = gson20.toJson((com.google.gson.JsonElement)jsonPrimitive32);
    java.lang.reflect.Type type36 = null;
    com.google.gson.stream.JsonWriter jsonWriter37 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gson20, type36, jsonWriter37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = jsonArray32.getAsJsonArray();
    java.lang.Throwable throwable53 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException54 = new com.google.gson.stream.MalformedJsonException(throwable53);
    com.google.gson.stream.MalformedJsonException malformedJsonException55 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException54);
    java.lang.Throwable[] throwable_array56 = malformedJsonException54.getSuppressed();
    com.google.gson.JsonParseException jsonParseException57 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException54);
    boolean b58 = jsonArray51.equals((java.lang.Object)malformedJsonException54);
    java.math.BigInteger bigInteger59 = jsonArray51.getAsBigInteger();
    com.google.gson.JsonArray jsonArray61 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder62 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder62.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder62.setLenient();
    com.google.gson.GsonBuilder gsonBuilder65 = gsonBuilder62.excludeFieldsWithoutExposeAnnotation();
    boolean b66 = jsonArray61.equals((java.lang.Object)gsonBuilder62);
    com.google.gson.JsonPrimitive jsonPrimitive68 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b69 = jsonPrimitive68.isString();
    boolean b70 = jsonPrimitive68.isBoolean();
    java.lang.String str71 = jsonPrimitive68.getAsString();
    boolean b72 = jsonPrimitive68.isJsonObject();
    int i73 = jsonPrimitive68.getAsInt();
    boolean b74 = jsonPrimitive68.getAsBoolean();
    jsonArray61.add((com.google.gson.JsonElement)jsonPrimitive68);
    int i76 = jsonArray61.size();
    short s77 = jsonArray61.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive79 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b80 = jsonPrimitive79.isString();
    java.lang.Number number81 = jsonPrimitive79.getAsNumber();
    boolean b82 = jsonPrimitive79.isBoolean();
    boolean b83 = jsonArray61.remove((com.google.gson.JsonElement)jsonPrimitive79);
    com.google.gson.JsonPrimitive jsonPrimitive85 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b86 = jsonPrimitive85.isString();
    java.lang.Number number87 = jsonPrimitive85.getAsNumber();
    long long88 = jsonPrimitive85.getAsLong();
    java.math.BigDecimal bigDecimal89 = jsonPrimitive85.getAsBigDecimal();
    jsonArray61.add((java.lang.Number)bigDecimal89);
    java.math.BigDecimal bigDecimal91 = jsonArray61.getAsBigDecimal();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement92 = jsonArray51.set((int)(byte)4, (com.google.gson.JsonElement)jsonArray61);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "1"+ "'", str71.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s77 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number81 + "' != '" + 1+ "'", number81.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number87 + "' != '" + 1+ "'", number87.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long88 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal91);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement36 = jsonArray16.remove((int)'1');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    boolean b19 = jsonArray14.equals((java.lang.Object)gsonBuilder15);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    boolean b23 = jsonPrimitive21.isBoolean();
    java.lang.String str24 = jsonPrimitive21.getAsString();
    boolean b25 = jsonPrimitive21.isJsonObject();
    int i26 = jsonPrimitive21.getAsInt();
    boolean b27 = jsonPrimitive21.getAsBoolean();
    jsonArray14.add((com.google.gson.JsonElement)jsonPrimitive21);
    int i29 = jsonArray14.size();
    short s30 = jsonArray14.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    java.lang.Number number34 = jsonPrimitive32.getAsNumber();
    boolean b35 = jsonPrimitive32.isBoolean();
    boolean b36 = jsonArray14.remove((com.google.gson.JsonElement)jsonPrimitive32);
    com.google.gson.JsonArray jsonArray37 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder38 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder38.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.setLenient();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder38.excludeFieldsWithoutExposeAnnotation();
    boolean b42 = jsonArray37.equals((java.lang.Object)gsonBuilder38);
    com.google.gson.JsonPrimitive jsonPrimitive44 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b45 = jsonPrimitive44.isString();
    boolean b46 = jsonPrimitive44.isBoolean();
    java.lang.String str47 = jsonPrimitive44.getAsString();
    boolean b48 = jsonPrimitive44.isJsonObject();
    int i49 = jsonPrimitive44.getAsInt();
    boolean b50 = jsonPrimitive44.getAsBoolean();
    jsonArray37.add((com.google.gson.JsonElement)jsonPrimitive44);
    int i52 = jsonArray37.size();
    short s53 = jsonArray37.getAsShort();
    int i54 = jsonArray37.getAsInt();
    jsonArray14.addAll(jsonArray37);
    com.google.gson.JsonObject jsonObject56 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray58 = jsonObject56.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray60 = jsonObject56.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive63 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b64 = jsonPrimitive63.isString();
    java.lang.Number number65 = jsonPrimitive63.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive66 = jsonPrimitive63.getAsJsonPrimitive();
    jsonObject56.add("hi!", (com.google.gson.JsonElement)jsonPrimitive66);
    boolean b68 = jsonObject56.isJsonArray();
    com.google.gson.JsonElement jsonElement70 = jsonObject56.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d73 = jsonPrimitive72.getAsDouble();
    boolean b74 = jsonPrimitive72.isBoolean();
    boolean b75 = jsonObject56.equals((java.lang.Object)b74);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement76 = jsonObject56.entrySet();
    com.google.gson.JsonArray jsonArray78 = jsonObject56.getAsJsonArray("1");
    int i79 = jsonObject56.size();
    boolean b80 = jsonObject56.isJsonObject();
    boolean b81 = jsonArray37.equals((java.lang.Object)jsonObject56);
    java.lang.reflect.Type type82 = null;
    com.google.gson.stream.JsonWriter jsonWriter83 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)b81, type82, jsonWriter83);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s30 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number34 + "' != '" + 1+ "'", number34.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "1"+ "'", str47.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s53 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number65 + "' != '" + 1+ "'", number65.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d73 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement16 = gson7.toJsonTree((java.lang.Object)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonElement jsonElement36 = jsonArray0.remove((int)(short)0);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonPrimitive38.getAsJsonPrimitive();
    int i40 = jsonPrimitive39.getAsInt();
    boolean b41 = jsonArray0.contains((com.google.gson.JsonElement)jsonPrimitive39);
    int i42 = jsonArray0.size();
    // The following exception was thrown during execution in test generation
    try {
    float f43 = jsonArray0.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 2);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy10 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder7.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy10);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy14 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy14);
    java.lang.reflect.Field field17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = fieldNamingPolicy14.translateName(field17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse("");
    java.io.Reader reader9 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement10 = jsonParser0.parse(reader9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy15 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy16 = gson7.getAdapter(typetoken_fieldNamingStrategy15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    jsonArray0.add((java.lang.Boolean)true);
    jsonArray0.add((java.lang.Character)'4');
    jsonArray0.add((java.lang.Number)(-1));
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal25 = jsonArray0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull17 = jsonArray0.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.GsonBuilder gsonBuilder34 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder34.setLenient();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder34.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder34.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder39.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder39.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder39.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder45 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder45.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder45.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy48 = null;
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder47.addSerializationExclusionStrategy(exclusionStrategy48);
    com.google.gson.ExclusionStrategy exclusionStrategy50 = null;
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder47.addSerializationExclusionStrategy(exclusionStrategy50);
    com.google.gson.Gson gson52 = gsonBuilder47.create();
    com.google.gson.JsonPrimitive jsonPrimitive54 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b55 = jsonPrimitive54.isString();
    boolean b56 = jsonPrimitive54.isBoolean();
    java.lang.String str57 = jsonPrimitive54.getAsString();
    boolean b58 = jsonPrimitive54.isJsonObject();
    java.math.BigDecimal bigDecimal59 = jsonPrimitive54.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement60 = gson52.toJsonTree((java.lang.Object)jsonPrimitive54);
    com.google.gson.internal.Excluder excluder61 = gson52.excluder();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder39.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder61);
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long63 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long64 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder61, typetoken_long63);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "1"+ "'", str57.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Character)'1');
    // The following exception was thrown during execution in test generation
    try {
    long long21 = jsonObject0.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.remove("hi!");
    char char25 = jsonElement24.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char25 == '1');

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)'1');
    java.lang.reflect.Type type9 = null;
    com.google.gson.JsonObject jsonObject10 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray12 = jsonObject10.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray14 = jsonObject10.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b18 = jsonPrimitive17.isString();
    java.lang.Number number19 = jsonPrimitive17.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive20 = jsonPrimitive17.getAsJsonPrimitive();
    jsonObject10.add("hi!", (com.google.gson.JsonElement)jsonPrimitive20);
    boolean b22 = jsonObject10.isJsonArray();
    com.google.gson.JsonObject jsonObject24 = jsonObject10.getAsJsonObject("0");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder5.registerTypeAdapter(type9, (java.lang.Object)jsonObject24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number19 + "' != '" + 1+ "'", number19.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject24);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    java.lang.Class<java.lang.reflect.Type> cls16 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type17 = gson7.getAdapter(cls16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder2.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy8 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array9 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy8 };
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder2.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder1.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder1.setFieldNamingStrategy(fieldNamingStrategy12);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setDateFormat((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    com.google.gson.JsonElement jsonElement19 = jsonArray0.get(1);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject20 = jsonArray0.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement19);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement19 = jsonArray0.remove((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    jsonObject0.addProperty("{\"hi!\":1}", "1");
    com.google.gson.JsonElement jsonElement19 = jsonObject0.remove("4");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setLenient();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder21.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder21.setDateFormat((int)'1', (int)'4');
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setDateFormat((int)'#');
    boolean b30 = jsonObject0.equals((java.lang.Object)gsonBuilder27);
    jsonObject0.addProperty("com.google.gson.JsonParseException: {\"hi!\":1}", (java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    int i18 = jsonObject0.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    boolean b23 = jsonArray0.isJsonNull();
    // The following exception was thrown during execution in test generation
    try {
    short s24 = jsonArray0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    com.google.gson.JsonElement jsonElement25 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonElement jsonElement27 = jsonObject0.remove("{}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement27);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    jsonArray0.add((java.lang.Number)1.0f);
    jsonArray0.add((java.lang.Character)'a');
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal54 = jsonArray0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

}
