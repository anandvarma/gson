
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test001"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive4 = jsonPrimitive1.getAsJsonPrimitive();
    byte byte5 = jsonPrimitive1.getAsByte();
    float f6 = jsonPrimitive1.getAsFloat();
    int i7 = jsonPrimitive1.getAsInt();
    float f8 = jsonPrimitive1.getAsFloat();
    boolean b9 = jsonPrimitive1.isString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte5 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f6 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f8 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test002"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    // The following exception was thrown during execution in test generation
    try {
    float f53 = jsonArray13.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test003"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    java.lang.String str15 = gson7.toJson((java.lang.Object)jsonPrimitive9);
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    int i31 = jsonArray16.size();
    short s32 = jsonArray16.getAsShort();
    float f33 = jsonArray16.getAsFloat();
    jsonArray16.add((java.lang.Boolean)true);
    int i36 = jsonArray16.size();
    java.lang.reflect.Type type37 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str38 = gson7.toJson((java.lang.Object)jsonArray16, type37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s32 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f33 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 2);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test004"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("");
    com.google.gson.stream.JsonReader jsonReader3 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse(jsonReader3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test005"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    boolean b23 = jsonArray0.isJsonNull();
    // The following exception was thrown during execution in test generation
    try {
    byte byte24 = jsonArray0.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test006"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement10 = jsonParser0.parse("1");
    com.google.gson.stream.JsonReader jsonReader11 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement12 = jsonParser0.parse(jsonReader11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test007"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.get("0");
    // The following exception was thrown during execution in test generation
    try {
    boolean b25 = jsonElement24.isJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement24);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test008"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy11 = gson7.getAdapter(typetoken_fieldNamingStrategy10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test009"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isJsonArray();
    java.math.BigInteger bigInteger4 = jsonPrimitive1.getAsBigInteger();
    float f5 = jsonPrimitive1.getAsFloat();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray6 = jsonPrimitive1.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f5 == 1.0f);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test010"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    float f24 = jsonArray6.getAsFloat();
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    boolean b36 = jsonArray31.equals((java.lang.Object)gsonBuilder32);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b39 = jsonPrimitive38.isString();
    boolean b40 = jsonPrimitive38.isBoolean();
    java.lang.String str41 = jsonPrimitive38.getAsString();
    boolean b42 = jsonPrimitive38.isJsonObject();
    int i43 = jsonPrimitive38.getAsInt();
    boolean b44 = jsonPrimitive38.getAsBoolean();
    jsonArray31.add((com.google.gson.JsonElement)jsonPrimitive38);
    jsonArray25.addAll(jsonArray31);
    java.math.BigInteger bigInteger47 = jsonArray31.getAsBigInteger();
    short s48 = jsonArray31.getAsShort();
    com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
    jsonArray49.add((java.lang.Boolean)true);
    jsonArray31.add((com.google.gson.JsonElement)jsonArray49);
    boolean b53 = jsonArray6.contains((com.google.gson.JsonElement)jsonArray49);
    boolean b54 = jsonArray49.isJsonNull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f24 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "1"+ "'", str41.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s48 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test011"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder11 = gson7.excluder();
    java.lang.Class<java.lang.reflect.Type> cls12 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type13 = gson7.getAdapter(cls12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder11);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test012"); }


    com.google.gson.LongSerializationPolicy longSerializationPolicy0 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement2 = longSerializationPolicy0.serialize((java.lang.Long)(-1L));
    com.google.gson.JsonElement jsonElement4 = longSerializationPolicy0.serialize((java.lang.Long)0L);
    float f5 = jsonElement4.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f5 == 0.0f);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test013"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder19.setVersion((double)'#');
    com.google.gson.Gson gson25 = gsonBuilder24.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy26 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy26);
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    int[] i_array33 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder30.excludeFieldsWithModifiers(i_array33);
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder27.excludeFieldsWithModifiers(i_array33);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy36 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder27.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy36);
    com.google.gson.GsonBuilder gsonBuilder38 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder38.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder40.disableInnerClassSerialization();
    int[] i_array43 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder40.excludeFieldsWithModifiers(i_array43);
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder27.excludeFieldsWithModifiers(i_array43);
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder18.excludeFieldsWithModifiers(i_array43);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement47 = gson7.toJsonTree((java.lang.Object)gsonBuilder18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test014"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.setLenient();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test015"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    int[] i_array5 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.excludeFieldsWithModifiers(i_array5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder2.setDateFormat(2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test016"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    com.google.gson.LongSerializationPolicy longSerializationPolicy19 = com.google.gson.LongSerializationPolicy.DEFAULT;
    boolean b20 = jsonNull17.equals((java.lang.Object)longSerializationPolicy19);
    // The following exception was thrown during execution in test generation
    try {
    boolean b21 = jsonNull17.getAsBoolean();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test017"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder52 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setLenient();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithoutExposeAnnotation();
    boolean b56 = jsonArray51.equals((java.lang.Object)gsonBuilder52);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    jsonArray51.addAll(jsonArray57);
    java.math.BigInteger bigInteger73 = jsonArray57.getAsBigInteger();
    boolean b74 = jsonArray57.isJsonPrimitive();
    jsonArray57.add((java.lang.Character)'#');
    boolean b77 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray57);
    // The following exception was thrown during execution in test generation
    try {
    long long78 = jsonArray57.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test018"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    java.lang.Class<java.lang.reflect.Type> cls13 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type14 = gson7.getAdapter(cls13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test019"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    java.lang.String str9 = gson7.toString();
    java.lang.Class<java.math.BigDecimal> cls11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal12 = gson7.fromJson("{}", cls11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test020"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d54 = jsonPrimitive53.getAsDouble();
    boolean b55 = jsonPrimitive53.isJsonObject();
    byte byte56 = jsonPrimitive53.getAsByte();
    int i57 = jsonPrimitive53.getAsInt();
    java.math.BigInteger bigInteger58 = jsonPrimitive53.getAsBigInteger();
    jsonArray32.add((java.lang.Number)bigInteger58);
    com.google.gson.JsonArray jsonArray60 = jsonArray32.getAsJsonArray();
    jsonArray32.add((java.lang.Character)'#');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number63 = jsonArray32.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte56 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray60);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test021"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder52 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setLenient();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithoutExposeAnnotation();
    boolean b56 = jsonArray51.equals((java.lang.Object)gsonBuilder52);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    jsonArray51.addAll(jsonArray57);
    java.math.BigInteger bigInteger73 = jsonArray57.getAsBigInteger();
    boolean b74 = jsonArray57.isJsonPrimitive();
    jsonArray57.add((java.lang.Character)'#');
    boolean b77 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray57);
    float f78 = jsonArray32.getAsFloat();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement79 = jsonArray32.iterator();
    com.google.gson.JsonArray jsonArray80 = null;
    // The following exception was thrown during execution in test generation
    try {
    jsonArray32.addAll(jsonArray80);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f78 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement79);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test022"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy16 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.setFieldNamingPolicy(fieldNamingPolicy16);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setDateFormat((-1));
    java.lang.reflect.Type type20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = gson7.toJson((java.lang.Object)(-1), type20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test023"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy7 = gson6.fieldNamingStrategy();
    java.lang.Class<java.lang.reflect.Type> cls8 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type9 = gson6.getAdapter(cls8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy7);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test024"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    boolean b34 = gson7.serializeNulls();
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    java.lang.Number number38 = jsonPrimitive36.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonPrimitive36.getAsJsonPrimitive();
    java.math.BigInteger bigInteger40 = jsonPrimitive36.getAsBigInteger();
    java.lang.reflect.Type type41 = null;
    com.google.gson.stream.JsonWriter jsonWriter42 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)bigInteger40, type41, jsonWriter42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number38 + "' != '" + 1+ "'", number38.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger40);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test025"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    float f17 = jsonArray0.getAsFloat();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy20 = null;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.addSerializationExclusionStrategy(exclusionStrategy20);
    boolean b22 = jsonArray0.equals((java.lang.Object)exclusionStrategy20);
    jsonArray0.add("1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f17 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test026"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    boolean b21 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: hi!");
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonObject0.getAsJsonPrimitive("null");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number24 = jsonPrimitive23.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive23);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test027"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    byte byte4 = jsonPrimitive1.getAsByte();
    int i5 = jsonPrimitive1.getAsInt();
    java.math.BigInteger bigInteger6 = jsonPrimitive1.getAsBigInteger();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive1.getAsBigDecimal();
    boolean b8 = jsonPrimitive1.isString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test028"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b20 = jsonPrimitive19.isString();
    java.lang.Number number21 = jsonPrimitive19.getAsNumber();
    long long22 = jsonPrimitive19.getAsLong();
    java.math.BigDecimal bigDecimal23 = jsonPrimitive19.getAsBigDecimal();
    java.lang.String str24 = jsonPrimitive19.toString();
    long long25 = jsonPrimitive19.getAsLong();
    java.lang.reflect.Type type26 = null;
    java.lang.Appendable appendable27 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson17.toJson((java.lang.Object)jsonPrimitive19, type26, appendable27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number21 + "' != '" + 1+ "'", number21.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 1L);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test029"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setDateFormat("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.GsonBuilder gsonBuilder5 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy8 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy8);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder5.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder5.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy12 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy12);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy12);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.Gson gson15 = gsonBuilder14.create();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test030"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement10 = jsonParser0.parse("1");
    java.io.Reader reader11 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement12 = jsonParser0.parse(reader11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test031"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    jsonArray0.add((java.lang.Boolean)true);
    char char3 = jsonArray0.getAsCharacter();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement5 = jsonArray0.remove((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == 't');

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test032"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
    boolean b6 = jsonPrimitive1.equals((java.lang.Object)jsonArray5);
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i9 = jsonPrimitive8.getAsInt();
    boolean b10 = jsonPrimitive8.getAsBoolean();
    short s11 = jsonPrimitive8.getAsShort();
    java.math.BigInteger bigInteger12 = jsonPrimitive8.getAsBigInteger();
    jsonArray5.add((java.lang.Number)bigInteger12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s11 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger12);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test033"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    byte byte4 = jsonPrimitive1.getAsByte();
    boolean b5 = jsonPrimitive1.isBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test034"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.stream.JsonReader jsonReader8 = null;
    java.lang.reflect.Type type9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array10 = gson6.fromJson(jsonReader8, type9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test035"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    java.lang.reflect.Type type6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = gson4.toJson((java.lang.Object)'a', type6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test036"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger32 = jsonArray0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test037"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.setVersion((double)'#');
    com.google.gson.Gson gson12 = gsonBuilder11.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder11.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    java.lang.reflect.Type type16 = null;
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder17.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy26 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder23.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy26);
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder23.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy30 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy30);
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder22.setFieldNamingPolicy(fieldNamingPolicy30);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder15.registerTypeAdapter(type16, (java.lang.Object)gsonBuilder32);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test038"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    java.lang.String str11 = gson7.toString();
    java.lang.String str12 = gson7.toString();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    char char28 = jsonArray13.getAsCharacter();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    jsonArray13.addAll(jsonArray29);
    int i45 = jsonArray29.getAsInt();
    java.math.BigDecimal bigDecimal46 = jsonArray29.getAsBigDecimal();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str47 = gson7.toJson((java.lang.Object)bigDecimal46);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test039"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy7 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement9 = longSerializationPolicy7.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder0.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.JsonElement jsonElement13 = longSerializationPolicy7.serialize((java.lang.Long)(-1L));
    boolean b14 = jsonElement13.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test040"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.JsonPrimitive jsonPrimitive6 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d7 = jsonPrimitive6.getAsDouble();
    boolean b8 = jsonPrimitive6.isJsonObject();
    float f9 = jsonPrimitive6.getAsFloat();
    java.math.BigInteger bigInteger10 = jsonPrimitive6.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger10);
    java.lang.String str12 = jsonPrimitive11.getAsString();
    double d13 = jsonPrimitive11.getAsDouble();
    java.lang.reflect.Type type14 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException15 = gson4.fromJson((com.google.gson.JsonElement)jsonPrimitive11, type14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f9 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "4"+ "'", str12.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 4.0d);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test041"); }


    java.lang.Throwable throwable1 = null;
    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("", throwable1);
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException2);
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException2);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException5);
    java.lang.String str7 = malformedJsonException6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "com.google.gson.stream.MalformedJsonException"+ "'", str7.equals("com.google.gson.stream.MalformedJsonException"));

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test042"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    // The following exception was thrown during execution in test generation
    try {
    byte byte53 = jsonArray13.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test043"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonPrimitive jsonPrimitive15 = jsonObject13.getAsJsonPrimitive("{\"hi!\":1}");
    jsonObject13.addProperty("com.google.gson.JsonParseException: hi!", "{}");
    java.lang.reflect.Type type19 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement20 = gson7.toJsonTree((java.lang.Object)"{}", type19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive15);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test044"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    boolean b11 = gson7.htmlSafe();
    java.io.Reader reader12 = null;
    java.lang.reflect.Type type13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal14 = gson7.fromJson(reader12, type13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test045"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.JsonObject jsonObject12 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray14 = jsonObject12.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray16 = jsonObject12.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b20 = jsonPrimitive19.isString();
    java.lang.Number number21 = jsonPrimitive19.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive22 = jsonPrimitive19.getAsJsonPrimitive();
    jsonObject12.add("hi!", (com.google.gson.JsonElement)jsonPrimitive22);
    boolean b24 = jsonObject12.isJsonArray();
    java.lang.reflect.Type type25 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement26 = gson7.toJsonTree((java.lang.Object)jsonObject12, type25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number21 + "' != '" + 1+ "'", number21.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test046"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.math.BigDecimal bigDecimal51 = jsonArray32.getAsBigDecimal();
    short s52 = jsonArray32.getAsShort();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement54 = jsonArray32.remove((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s52 == (short)1);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test047"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy9 = gson7.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.addSerializationExclusionStrategy(exclusionStrategy13);
    java.lang.reflect.Type type15 = null;
    com.google.gson.stream.JsonWriter jsonWriter16 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)exclusionStrategy13, type15, jsonWriter16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test048"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setDateFormat(100);
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.addSerializationExclusionStrategy(exclusionStrategy9);
    java.lang.reflect.Type type11 = null;
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy15 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder12.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy15);
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder12.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder12.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setDateFormat(100);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder10.registerTypeAdapter(type11, (java.lang.Object)gsonBuilder20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test049"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy21);
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy23);
    com.google.gson.Gson gson25 = gsonBuilder20.create();
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b28 = jsonPrimitive27.isString();
    boolean b29 = jsonPrimitive27.isBoolean();
    java.lang.String str30 = jsonPrimitive27.getAsString();
    boolean b31 = jsonPrimitive27.isJsonObject();
    java.math.BigDecimal bigDecimal32 = jsonPrimitive27.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement33 = gson25.toJsonTree((java.lang.Object)jsonPrimitive27);
    com.google.gson.internal.Excluder excluder34 = gson25.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long35 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long36 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder34, typetoken_long35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "1"+ "'", str30.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder34);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test050"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    boolean b34 = gson7.serializeNulls();
    com.google.gson.JsonArray jsonArray35 = new com.google.gson.JsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d38 = jsonPrimitive37.getAsDouble();
    jsonArray35.add((com.google.gson.JsonElement)jsonPrimitive37);
    java.lang.String str40 = jsonArray35.getAsString();
    char char41 = jsonArray35.getAsCharacter();
    char char42 = jsonArray35.getAsCharacter();
    com.google.gson.stream.JsonWriter jsonWriter43 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonArray35, jsonWriter43);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d38 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "4"+ "'", str40.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char41 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '4');

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test051"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.math.BigDecimal bigDecimal51 = jsonArray32.getAsBigDecimal();
    short s52 = jsonArray32.getAsShort();
    java.lang.Number number53 = jsonArray32.getAsNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s52 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number53 + "' != '" + 1+ "'", number53.equals(1));

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test052"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setPrettyPrinting();
    java.lang.Appendable appendable20 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gsonBuilder19, appendable20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test053"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    long long5 = jsonPrimitive1.getAsLong();
    boolean b6 = jsonPrimitive1.isNumber();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive1.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test054"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isNumber();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject4 = jsonPrimitive1.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test055"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    boolean b9 = gson7.htmlSafe();
    java.lang.Class<java.math.BigDecimal> cls11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal12 = gson7.fromJson("", cls11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test056"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    java.lang.Number number17 = jsonArray0.getAsNumber();
    java.lang.Number number18 = jsonArray0.getAsNumber();
    jsonArray0.add("[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number17 + "' != '" + 1+ "'", number17.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number18 + "' != '" + 1+ "'", number18.equals(1));

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test057"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b25 = jsonPrimitive24.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder26.disableInnerClassSerialization();
    boolean b31 = jsonPrimitive24.equals((java.lang.Object)gsonBuilder30);
    boolean b32 = jsonArray0.equals((java.lang.Object)jsonPrimitive24);
    int i33 = jsonArray0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal34 = jsonArray0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test058"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    java.lang.Class<java.math.BigDecimal> cls16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal17 = gson7.fromJson("0", cls16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test059"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    byte byte5 = jsonPrimitive1.getAsByte();
    char char6 = jsonPrimitive1.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte5 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '1');

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test060"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy16 = gson7.fieldNamingStrategy();
    boolean b17 = gson7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy21);
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy23);
    com.google.gson.Gson gson25 = gsonBuilder20.create();
    boolean b26 = gson25.htmlSafe();
    com.google.gson.JsonNull jsonNull27 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str28 = gson25.toJson((com.google.gson.JsonElement)jsonNull27);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy29 = gson25.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder30 = gson25.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long31 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long32 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder30, typetoken_long31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "null"+ "'", str28.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder30);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test061"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    short s23 = jsonArray6.getAsShort();
    com.google.gson.JsonArray jsonArray24 = new com.google.gson.JsonArray();
    jsonArray24.add((java.lang.Boolean)true);
    jsonArray6.add((com.google.gson.JsonElement)jsonArray24);
    // The following exception was thrown during execution in test generation
    try {
    float f28 = jsonArray6.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s23 == (short)1);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test062"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    com.google.gson.JsonArray jsonArray53 = jsonElement52.getAsJsonArray();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull54 = jsonElement52.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray53);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test063"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("[1]");
    boolean b2 = jsonPrimitive1.isNumber();
    // The following exception was thrown during execution in test generation
    try {
    float f3 = jsonPrimitive1.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test064"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b13 = jsonPrimitive12.isString();
    java.lang.String str14 = jsonPrimitive12.getAsString();
    java.lang.reflect.Type type15 = null;
    com.google.gson.stream.JsonWriter jsonWriter16 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)str14, type15, jsonWriter16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test065"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonArray jsonArray52 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder53 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder53.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder53.setLenient();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder53.excludeFieldsWithoutExposeAnnotation();
    boolean b57 = jsonArray52.equals((java.lang.Object)gsonBuilder53);
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    boolean b61 = jsonPrimitive59.isBoolean();
    java.lang.String str62 = jsonPrimitive59.getAsString();
    boolean b63 = jsonPrimitive59.isJsonObject();
    int i64 = jsonPrimitive59.getAsInt();
    boolean b65 = jsonPrimitive59.getAsBoolean();
    jsonArray52.add((com.google.gson.JsonElement)jsonPrimitive59);
    int i67 = jsonArray52.size();
    short s68 = jsonArray52.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive70 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b71 = jsonPrimitive70.isString();
    java.lang.Number number72 = jsonPrimitive70.getAsNumber();
    boolean b73 = jsonPrimitive70.isBoolean();
    boolean b74 = jsonArray52.remove((com.google.gson.JsonElement)jsonPrimitive70);
    com.google.gson.JsonArray jsonArray75 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder76 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder77 = gsonBuilder76.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder76.setLenient();
    com.google.gson.GsonBuilder gsonBuilder79 = gsonBuilder76.excludeFieldsWithoutExposeAnnotation();
    boolean b80 = jsonArray75.equals((java.lang.Object)gsonBuilder76);
    com.google.gson.JsonPrimitive jsonPrimitive82 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b83 = jsonPrimitive82.isString();
    boolean b84 = jsonPrimitive82.isBoolean();
    java.lang.String str85 = jsonPrimitive82.getAsString();
    boolean b86 = jsonPrimitive82.isJsonObject();
    int i87 = jsonPrimitive82.getAsInt();
    boolean b88 = jsonPrimitive82.getAsBoolean();
    jsonArray75.add((com.google.gson.JsonElement)jsonPrimitive82);
    int i90 = jsonArray75.size();
    short s91 = jsonArray75.getAsShort();
    int i92 = jsonArray75.getAsInt();
    jsonArray52.addAll(jsonArray75);
    int i94 = jsonArray75.getAsInt();
    boolean b95 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray75);
    jsonArray32.add((java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str98 = jsonArray32.getAsString();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "1"+ "'", str62.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s68 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number72 + "' != '" + 1+ "'", number72.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "1"+ "'", str85.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s91 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test066"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    jsonArray0.add((java.lang.Number)1.0f);
    jsonArray0.add("");
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger54 = jsonArray0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test067"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isJsonArray();
    boolean b16 = jsonPrimitive13.getAsBoolean();
    java.math.BigInteger bigInteger17 = jsonPrimitive13.getAsBigInteger();
    float f18 = jsonPrimitive13.getAsFloat();
    java.lang.reflect.Type type19 = null;
    java.lang.Appendable appendable20 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonPrimitive13, type19, appendable20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f18 == 1.0f);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test068"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.Class<java.math.BigDecimal> cls13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal14 = gson7.fromJson("com.google.gson.stream.MalformedJsonException", cls13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test069"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.reflect.Type type13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable14 = gson7.fromJson("com.google.gson.stream.MalformedJsonException: 0", type13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test070"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    jsonArray16.add((java.lang.Number)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull37 = jsonArray16.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test071"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse("");
    com.google.gson.stream.JsonReader jsonReader9 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement10 = jsonParser0.parse(jsonReader9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test072"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    jsonArray0.add((java.lang.Boolean)true);
    java.lang.String str3 = jsonArray0.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "true"+ "'", str3.equals("true"));

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test073"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy7 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.enableComplexMapKeySerialization();
    com.google.gson.LongSerializationPolicy longSerializationPolicy10 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement12 = longSerializationPolicy10.serialize((java.lang.Long)(-1L));
    com.google.gson.JsonElement jsonElement14 = longSerializationPolicy10.serialize((java.lang.Long)0L);
    com.google.gson.JsonElement jsonElement16 = longSerializationPolicy10.serialize((java.lang.Long)100L);
    com.google.gson.JsonElement jsonElement18 = longSerializationPolicy10.serialize((java.lang.Long)(-1L));
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder9.setLongSerializationPolicy(longSerializationPolicy10);
    com.google.gson.JsonElement jsonElement21 = longSerializationPolicy10.serialize((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement21);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test074"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    java.lang.String str9 = gson7.toString();
    java.io.Reader reader10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader11 = gson7.newJsonReader(reader10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test075"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    boolean b23 = jsonArray6.isJsonPrimitive();
    int i24 = jsonArray6.getAsInt();
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    int i37 = jsonPrimitive32.getAsInt();
    boolean b38 = jsonPrimitive32.getAsBoolean();
    jsonArray25.add((com.google.gson.JsonElement)jsonPrimitive32);
    java.math.BigInteger bigInteger40 = jsonArray25.getAsBigInteger();
    int i41 = jsonArray25.getAsInt();
    java.lang.Number number42 = jsonArray25.getAsNumber();
    jsonArray25.add("{\"hi!\":1}");
    jsonArray6.add((com.google.gson.JsonElement)jsonArray25);
    // The following exception was thrown during execution in test generation
    try {
    float f46 = jsonArray6.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number42 + "' != '" + 1+ "'", number42.equals(1));

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test076"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    java.math.BigDecimal bigDecimal3 = jsonPrimitive1.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test077"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b9 = jsonPrimitive8.isString();
    boolean b10 = jsonPrimitive8.isBoolean();
    java.lang.String str11 = jsonPrimitive8.getAsString();
    boolean b12 = jsonPrimitive8.isJsonObject();
    java.math.BigDecimal bigDecimal13 = jsonPrimitive8.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement14 = gson6.toJsonTree((java.lang.Object)bigDecimal13);
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    boolean b20 = jsonArray15.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    int i27 = jsonPrimitive22.getAsInt();
    boolean b28 = jsonPrimitive22.getAsBoolean();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive22);
    java.math.BigInteger bigInteger30 = jsonArray15.getAsBigInteger();
    int i31 = jsonArray15.getAsInt();
    com.google.gson.JsonNull jsonNull32 = new com.google.gson.JsonNull();
    boolean b33 = jsonArray15.contains((com.google.gson.JsonElement)jsonNull32);
    jsonArray15.add((java.lang.Boolean)true);
    jsonArray15.add((java.lang.Character)'4');
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls38 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException39 = gson6.fromJson((com.google.gson.JsonElement)jsonArray15, cls38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1"+ "'", str11.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test078"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    int[] i_array5 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.excludeFieldsWithModifiers(i_array5);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setDateFormat((int)(byte)10);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.setLenient();
    com.google.gson.ExclusionStrategy exclusionStrategy10 = null;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy10);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.setDateFormat((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test079"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    boolean b15 = gson7.htmlSafe();
    java.lang.Object obj16 = null;
    java.lang.reflect.Type type17 = null;
    java.lang.Appendable appendable18 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(obj16, type17, appendable18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test080"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    com.google.gson.JsonElement jsonElement18 = null;
    java.lang.Appendable appendable19 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson17.toJson(jsonElement18, appendable19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test081"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    com.google.gson.GsonBuilder gsonBuilder53 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder53.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder53.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy56 = null;
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder55.addSerializationExclusionStrategy(exclusionStrategy56);
    com.google.gson.ExclusionStrategy exclusionStrategy58 = null;
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder55.addSerializationExclusionStrategy(exclusionStrategy58);
    com.google.gson.Gson gson60 = gsonBuilder55.create();
    com.google.gson.JsonPrimitive jsonPrimitive62 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b63 = jsonPrimitive62.isString();
    boolean b64 = jsonPrimitive62.isBoolean();
    java.lang.String str65 = jsonPrimitive62.getAsString();
    boolean b66 = jsonPrimitive62.isJsonObject();
    java.math.BigDecimal bigDecimal67 = jsonPrimitive62.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement68 = gson60.toJsonTree((java.lang.Object)jsonPrimitive62);
    com.google.gson.internal.Excluder excluder69 = gson60.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive71 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive72 = jsonPrimitive71.getAsJsonPrimitive();
    boolean b73 = jsonPrimitive72.isJsonNull();
    boolean b74 = jsonPrimitive72.isJsonArray();
    java.lang.String str75 = gson60.toJson((com.google.gson.JsonElement)jsonPrimitive72);
    com.google.gson.JsonPrimitive jsonPrimitive77 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b78 = jsonPrimitive77.isString();
    boolean b79 = jsonPrimitive77.isJsonArray();
    java.lang.String str80 = gson60.toJson((java.lang.Object)jsonPrimitive77);
    java.lang.reflect.Type type81 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException82 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive77, type81);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "1"+ "'", str65.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "1"+ "'", str75.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "1"+ "'", str80.equals("1"));

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test082"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy39 = null;
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy39);
    com.google.gson.ExclusionStrategy exclusionStrategy41 = null;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy41);
    com.google.gson.Gson gson43 = gsonBuilder38.create();
    java.lang.String str44 = gson43.toString();
    java.lang.reflect.Type type46 = null;
    java.lang.Appendable appendable47 = gson43.fromJson("", type46);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy48 = gson43.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setLenient();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder50.excludeFieldsWithoutExposeAnnotation();
    boolean b54 = jsonArray49.equals((java.lang.Object)gsonBuilder50);
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    boolean b58 = jsonPrimitive56.isBoolean();
    java.lang.String str59 = jsonPrimitive56.getAsString();
    boolean b60 = jsonPrimitive56.isJsonObject();
    int i61 = jsonPrimitive56.getAsInt();
    boolean b62 = jsonPrimitive56.getAsBoolean();
    jsonArray49.add((com.google.gson.JsonElement)jsonPrimitive56);
    int i64 = jsonArray49.size();
    com.google.gson.JsonArray jsonArray65 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder66 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder66.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder66.setLenient();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder66.excludeFieldsWithoutExposeAnnotation();
    boolean b70 = jsonArray65.equals((java.lang.Object)gsonBuilder66);
    com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b73 = jsonPrimitive72.isString();
    boolean b74 = jsonPrimitive72.isBoolean();
    java.lang.String str75 = jsonPrimitive72.getAsString();
    boolean b76 = jsonPrimitive72.isJsonObject();
    int i77 = jsonPrimitive72.getAsInt();
    boolean b78 = jsonPrimitive72.getAsBoolean();
    jsonArray65.add((com.google.gson.JsonElement)jsonPrimitive72);
    char char80 = jsonArray65.getAsCharacter();
    com.google.gson.JsonElement jsonElement81 = null;
    jsonArray65.add(jsonElement81);
    jsonArray49.addAll(jsonArray65);
    com.google.gson.JsonArray jsonArray84 = new com.google.gson.JsonArray();
    jsonArray84.add((java.lang.Boolean)true);
    jsonArray49.addAll(jsonArray84);
    com.google.gson.JsonElement jsonElement88 = gson43.toJsonTree((java.lang.Object)jsonArray49);
    com.google.gson.JsonElement jsonElement89 = jsonArray0.set((int)(byte)0, (com.google.gson.JsonElement)jsonArray49);
    com.google.gson.JsonArray jsonArray90 = jsonArray49.getAsJsonArray();
    // The following exception was thrown during execution in test generation
    try {
    double d91 = jsonArray49.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1"+ "'", str59.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "1"+ "'", str75.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray90);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test083"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setLenient();
    int[] i_array54 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithModifiers(i_array54);
    boolean b56 = jsonArray0.equals((java.lang.Object)gsonBuilder52);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject57 = jsonArray0.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test084"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    com.google.gson.JsonArray jsonArray52 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder53 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder53.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder53.setLenient();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder53.excludeFieldsWithoutExposeAnnotation();
    boolean b57 = jsonArray52.equals((java.lang.Object)gsonBuilder53);
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    boolean b61 = jsonPrimitive59.isBoolean();
    java.lang.String str62 = jsonPrimitive59.getAsString();
    boolean b63 = jsonPrimitive59.isJsonObject();
    int i64 = jsonPrimitive59.getAsInt();
    boolean b65 = jsonPrimitive59.getAsBoolean();
    jsonArray52.add((com.google.gson.JsonElement)jsonPrimitive59);
    java.math.BigInteger bigInteger67 = jsonArray52.getAsBigInteger();
    int i68 = jsonArray52.getAsInt();
    com.google.gson.JsonNull jsonNull69 = new com.google.gson.JsonNull();
    boolean b70 = jsonArray52.contains((com.google.gson.JsonElement)jsonNull69);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement71 = jsonArray52.iterator();
    java.lang.Number number72 = jsonArray52.getAsNumber();
    boolean b73 = jsonArray52.isJsonObject();
    java.lang.String str74 = jsonArray52.getAsString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement75 = jsonArray32.set((int)' ', (com.google.gson.JsonElement)jsonArray52);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "1"+ "'", str62.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number72 + "' != '" + 1+ "'", number72.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "1"+ "'", str74.equals("1"));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test085"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    // The following exception was thrown during execution in test generation
    try {
    char char50 = jsonArray0.getAsCharacter();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test086"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    jsonArray0.add((java.lang.Number)1.0f);
    jsonArray0.add((java.lang.Character)'a');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number54 = jsonArray0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test087"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    int i17 = jsonArray0.getAsInt();
    boolean b18 = jsonArray0.isJsonObject();
    double d19 = jsonArray0.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 1.0d);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test088"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    boolean b20 = jsonArray15.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    int i27 = jsonPrimitive22.getAsInt();
    boolean b28 = jsonPrimitive22.getAsBoolean();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive22);
    int i30 = jsonArray15.size();
    short s31 = jsonArray15.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    boolean b36 = jsonPrimitive33.isBoolean();
    boolean b37 = jsonArray15.remove((com.google.gson.JsonElement)jsonPrimitive33);
    jsonArray15.add((java.lang.Number)(byte)10);
    java.lang.String str40 = gson7.toJson((java.lang.Object)jsonArray15);
    com.google.gson.GsonBuilder gsonBuilder41 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder41.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder41.setDateFormat("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.GsonBuilder gsonBuilder46 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder46.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder46.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy49 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder46.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy49);
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder46.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder46.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy53 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder46.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy53);
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder41.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy53);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str56 = gson7.toJson((java.lang.Object)fieldNamingPolicy53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s31 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[10]"+ "'", str40.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test089"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    boolean b23 = jsonArray0.isJsonNull();
    // The following exception was thrown during execution in test generation
    try {
    int i24 = jsonArray0.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test090"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    boolean b34 = gson7.serializeNulls();
    java.lang.reflect.Type type36 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable37 = gson7.fromJson("\"4\"", type36);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test091"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.Gson gson5 = gsonBuilder4.create();
    java.io.Writer writer6 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter7 = gson5.newJsonWriter(writer6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson5);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test092"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    boolean b23 = jsonArray18.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    int i30 = jsonPrimitive25.getAsInt();
    boolean b31 = jsonPrimitive25.getAsBoolean();
    jsonArray18.add((com.google.gson.JsonElement)jsonPrimitive25);
    java.math.BigInteger bigInteger33 = jsonArray18.getAsBigInteger();
    int i34 = jsonArray18.getAsInt();
    com.google.gson.JsonNull jsonNull35 = new com.google.gson.JsonNull();
    boolean b36 = jsonArray18.contains((com.google.gson.JsonElement)jsonNull35);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement37 = jsonArray18.iterator();
    java.math.BigDecimal bigDecimal38 = jsonArray18.getAsBigDecimal();
    boolean b39 = jsonArray18.getAsBoolean();
    java.lang.String str40 = gson7.toJson((com.google.gson.JsonElement)jsonArray18);
    com.google.gson.JsonPrimitive jsonPrimitive42 = new com.google.gson.JsonPrimitive("1");
    boolean b43 = jsonPrimitive42.getAsBoolean();
    byte byte44 = jsonPrimitive42.getAsByte();
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls45 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException46 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive42, cls45);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[1]"+ "'", str40.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte44 == (byte)1);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test093"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy18 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement20 = longSerializationPolicy18.serialize((java.lang.Long)0L);
    java.lang.Appendable appendable21 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson17.toJson((java.lang.Object)0L, appendable21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement20);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test094"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    jsonArray0.add((java.lang.Number)(byte)10);
    java.lang.Number number25 = jsonArray0.getAsNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number25 + "' != '" + (byte)10+ "'", number25.equals((byte)10));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test095"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    java.lang.String str5 = jsonPrimitive1.toString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray6 = jsonPrimitive1.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1"+ "'", str5.equals("1"));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test096"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    com.google.gson.JsonObject jsonObject42 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray44 = jsonObject42.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray46 = jsonObject42.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive49 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b50 = jsonPrimitive49.isString();
    java.lang.Number number51 = jsonPrimitive49.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive52 = jsonPrimitive49.getAsJsonPrimitive();
    jsonObject42.add("hi!", (com.google.gson.JsonElement)jsonPrimitive52);
    boolean b54 = jsonObject42.isJsonArray();
    com.google.gson.JsonElement jsonElement56 = jsonObject42.get("hi!");
    jsonObject18.add("", (com.google.gson.JsonElement)jsonObject42);
    // The following exception was thrown during execution in test generation
    try {
    long long58 = jsonObject18.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number51 + "' != '" + 1+ "'", number51.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement56);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test097"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    com.google.gson.JsonElement jsonElement25 = jsonObject0.get("hi!");
    java.lang.Number number26 = jsonElement25.getAsNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number26 + "' != '" + 1+ "'", number26.equals(1));

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test098"); }


    com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
    boolean b2 = jsonNull0.equals((java.lang.Object)"com.google.gson.stream.MalformedJsonException: hi!");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive3 = jsonNull0.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test099"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithoutExposeAnnotation();
    boolean b28 = jsonArray23.equals((java.lang.Object)gsonBuilder24);
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b31 = jsonPrimitive30.isString();
    boolean b32 = jsonPrimitive30.isBoolean();
    java.lang.String str33 = jsonPrimitive30.getAsString();
    boolean b34 = jsonPrimitive30.isJsonObject();
    int i35 = jsonPrimitive30.getAsInt();
    boolean b36 = jsonPrimitive30.getAsBoolean();
    jsonArray23.add((com.google.gson.JsonElement)jsonPrimitive30);
    int i38 = jsonArray23.size();
    short s39 = jsonArray23.getAsShort();
    int i40 = jsonArray23.getAsInt();
    jsonArray0.addAll(jsonArray23);
    com.google.gson.JsonObject jsonObject42 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray44 = jsonObject42.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray46 = jsonObject42.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive49 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b50 = jsonPrimitive49.isString();
    java.lang.Number number51 = jsonPrimitive49.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive52 = jsonPrimitive49.getAsJsonPrimitive();
    jsonObject42.add("hi!", (com.google.gson.JsonElement)jsonPrimitive52);
    boolean b54 = jsonObject42.isJsonArray();
    com.google.gson.JsonElement jsonElement56 = jsonObject42.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive58 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d59 = jsonPrimitive58.getAsDouble();
    boolean b60 = jsonPrimitive58.isBoolean();
    boolean b61 = jsonObject42.equals((java.lang.Object)b60);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement62 = jsonObject42.entrySet();
    com.google.gson.JsonArray jsonArray64 = jsonObject42.getAsJsonArray("1");
    int i65 = jsonObject42.size();
    boolean b66 = jsonObject42.isJsonObject();
    boolean b67 = jsonArray23.equals((java.lang.Object)jsonObject42);
    int i68 = jsonObject42.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s39 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number51 + "' != '" + 1+ "'", number51.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d59 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test100"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    java.lang.String str11 = gson7.toString();
    java.io.Reader reader12 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader13 = gson7.newJsonReader(reader12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test101"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    // The following exception was thrown during execution in test generation
    try {
    double d13 = jsonObject0.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test102"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.lang.Number number20 = jsonArray0.getAsNumber();
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy24 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder21.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder21.enableComplexMapKeySerialization();
    com.google.gson.Gson gson27 = gsonBuilder21.create();
    boolean b28 = gson27.htmlSafe();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    int i44 = jsonArray29.size();
    short s45 = jsonArray29.getAsShort();
    int i46 = jsonArray29.getAsInt();
    com.google.gson.JsonElement jsonElement47 = gson27.toJsonTree((java.lang.Object)jsonArray29);
    boolean b48 = jsonArray0.remove((com.google.gson.JsonElement)jsonArray29);
    boolean b49 = jsonArray0.getAsBoolean();
    java.math.BigDecimal bigDecimal50 = jsonArray0.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s45 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test103"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder52 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setLenient();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithoutExposeAnnotation();
    boolean b56 = jsonArray51.equals((java.lang.Object)gsonBuilder52);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    jsonArray51.addAll(jsonArray57);
    java.math.BigInteger bigInteger73 = jsonArray57.getAsBigInteger();
    boolean b74 = jsonArray57.isJsonPrimitive();
    jsonArray57.add((java.lang.Character)'#');
    boolean b77 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray57);
    float f78 = jsonArray32.getAsFloat();
    int i79 = jsonArray32.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f78 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test104"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    boolean b12 = gson7.htmlSafe();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d30 = jsonPrimitive29.getAsDouble();
    boolean b31 = jsonPrimitive29.isBoolean();
    boolean b32 = jsonObject13.equals((java.lang.Object)b31);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement33 = jsonObject13.entrySet();
    jsonObject13.addProperty("1", (java.lang.Character)'4');
    com.google.gson.JsonElement jsonElement38 = jsonObject13.get("hi!");
    java.lang.reflect.Type type39 = null;
    java.lang.Appendable appendable40 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonObject13, type39, appendable40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d30 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test105"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    java.lang.String str5 = jsonPrimitive1.toString();
    byte byte6 = jsonPrimitive1.getAsByte();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull7 = jsonPrimitive1.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1"+ "'", str5.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte6 == (byte)1);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test106"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isJsonArray();
    java.math.BigInteger bigInteger4 = jsonPrimitive1.getAsBigInteger();
    float f5 = jsonPrimitive1.getAsFloat();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull6 = jsonPrimitive1.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f5 == 1.0f);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test107"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy41 = gson7.fieldNamingStrategy();
    com.google.gson.JsonObject jsonObject42 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray44 = jsonObject42.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray46 = jsonObject42.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive49 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b50 = jsonPrimitive49.isString();
    java.lang.Number number51 = jsonPrimitive49.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive52 = jsonPrimitive49.getAsJsonPrimitive();
    jsonObject42.add("hi!", (com.google.gson.JsonElement)jsonPrimitive52);
    boolean b54 = jsonObject42.isJsonArray();
    com.google.gson.JsonObject jsonObject55 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray57 = jsonObject55.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray59 = jsonObject55.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive62 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b63 = jsonPrimitive62.isString();
    java.lang.Number number64 = jsonPrimitive62.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive65 = jsonPrimitive62.getAsJsonPrimitive();
    jsonObject55.add("hi!", (com.google.gson.JsonElement)jsonPrimitive65);
    boolean b67 = jsonObject55.isJsonArray();
    com.google.gson.JsonElement jsonElement69 = jsonObject55.get("hi!");
    boolean b70 = jsonObject42.equals((java.lang.Object)jsonElement69);
    com.google.gson.JsonObject jsonObject71 = jsonObject42.getAsJsonObject();
    jsonObject71.addProperty("0", (java.lang.Number)1.0f);
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls75 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException76 = gson7.fromJson((com.google.gson.JsonElement)jsonObject71, cls75);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number51 + "' != '" + 1+ "'", number51.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number64 + "' != '" + 1+ "'", number64.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject71);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test108"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    double d6 = jsonPrimitive1.getAsDouble();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive1.getAsBigDecimal();
    boolean b8 = jsonPrimitive1.isJsonObject();
    short s9 = jsonPrimitive1.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test109"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    boolean b20 = jsonArray15.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    int i27 = jsonPrimitive22.getAsInt();
    boolean b28 = jsonPrimitive22.getAsBoolean();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive22);
    int i30 = jsonArray15.size();
    short s31 = jsonArray15.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    boolean b36 = jsonPrimitive33.isBoolean();
    boolean b37 = jsonArray15.remove((com.google.gson.JsonElement)jsonPrimitive33);
    jsonArray15.add((java.lang.Number)(byte)10);
    java.lang.String str40 = gson7.toJson((java.lang.Object)jsonArray15);
    java.lang.Throwable throwable44 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException45 = new com.google.gson.stream.MalformedJsonException(throwable44);
    com.google.gson.stream.MalformedJsonException malformedJsonException46 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException45);
    com.google.gson.stream.MalformedJsonException malformedJsonException47 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException45);
    com.google.gson.stream.MalformedJsonException malformedJsonException48 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException45);
    com.google.gson.JsonParseException jsonParseException49 = new com.google.gson.JsonParseException("4", (java.lang.Throwable)malformedJsonException48);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str50 = gson7.toJson((java.lang.Object)jsonParseException49);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s31 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[10]"+ "'", str40.equals("[10]"));

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test110"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    int[] i_array16 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithModifiers(i_array16);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy22 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder19.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy22);
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder19.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy26 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy26);
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder17.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy26);
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder17.setDateFormat("0");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement31 = gson7.toJsonTree((java.lang.Object)"0");
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test111"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    boolean b5 = jsonPrimitive1.getAsBoolean();
    long long6 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1L);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test112"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    boolean b17 = gson7.htmlSafe();
    java.lang.reflect.Type type19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable20 = gson7.fromJson("{}", type19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test113"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array7 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy6 };
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder0.setExclusionStrategies(exclusionStrategy_array7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder0.setDateFormat((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test114"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive14 = jsonPrimitive13.getAsJsonPrimitive();
    int i15 = jsonPrimitive14.getAsInt();
    float f16 = jsonPrimitive14.getAsFloat();
    short s17 = jsonPrimitive14.getAsShort();
    java.lang.Appendable appendable18 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive14, appendable18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f16 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s17 == (short)1);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test115"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    int i34 = jsonObject18.size();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray35 = jsonObject18.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test116"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    jsonArray0.add((java.lang.Boolean)true);
    char char3 = jsonArray0.getAsCharacter();
    // The following exception was thrown during execution in test generation
    try {
    byte byte4 = jsonArray0.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == 't');

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test117"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    // The following exception was thrown during execution in test generation
    try {
    boolean b20 = jsonPrimitive19.getAsBoolean();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test118"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    int i31 = jsonObject29.size();
    jsonObject29.addProperty("1", "{\"hi!\":1}");
    com.google.gson.JsonArray jsonArray36 = jsonObject29.getAsJsonArray("com.google.gson.stream.MalformedJsonException: 0");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject37 = jsonArray36.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray36);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test119"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement23 = jsonObject0.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)(byte)100);
    boolean b26 = jsonObject0.equals((java.lang.Object)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test120"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addDeserializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder2.setDateFormat("4");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test121"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    boolean b24 = jsonObject0.isJsonObject();
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Number)1L);
    boolean b29 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test122"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    java.lang.Class<java.lang.reflect.Type> cls7 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type8 = gson6.getAdapter(cls7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test123"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    boolean b23 = jsonArray0.isJsonNull();
    boolean b24 = jsonArray0.isJsonObject();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test124"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setLenient();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder10.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder10.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder10.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder17.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array24 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy23 };
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder17.setExclusionStrategies(exclusionStrategy_array24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder16.setExclusionStrategies(exclusionStrategy_array24);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder5.registerTypeHierarchyAdapter(cls9, (java.lang.Object)gsonBuilder26);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test125"); }


    java.lang.Throwable throwable3 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException(throwable3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException4);
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException4);
    com.google.gson.JsonParseException jsonParseException8 = new com.google.gson.JsonParseException("[10]", (java.lang.Throwable)malformedJsonException4);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test126"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.Gson gson5 = gsonBuilder4.create();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.disableHtmlEscaping();
    java.lang.reflect.Type type7 = null;
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    boolean b23 = jsonPrimitive15.isJsonNull();
    boolean b24 = jsonPrimitive15.isNumber();
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    int i37 = jsonPrimitive32.getAsInt();
    boolean b38 = jsonPrimitive32.getAsBoolean();
    jsonArray25.add((com.google.gson.JsonElement)jsonPrimitive32);
    boolean b40 = jsonPrimitive15.equals((java.lang.Object)jsonPrimitive32);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder4.registerTypeAdapter(type7, (java.lang.Object)jsonPrimitive15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test127"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    boolean b34 = gson7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder35 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder35.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder35.setLenient();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder35.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder35.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder35.excludeFieldsWithoutExposeAnnotation();
    java.lang.Appendable appendable42 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gsonBuilder41, appendable42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test128"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.Gson gson2 = gsonBuilder0.create();
    java.lang.Class<java.math.BigDecimal> cls4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal5 = gson2.fromJson("com.google.gson.stream.MalformedJsonException: hi!", cls4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson2);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test129"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("com.google.gson.stream.MalformedJsonException: ");

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test130"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonParseException jsonParseException13 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException15 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException13.addSuppressed((java.lang.Throwable)jsonParseException15);
    com.google.gson.JsonParseException jsonParseException17 = new com.google.gson.JsonParseException("null", (java.lang.Throwable)jsonParseException13);
    java.lang.String str18 = jsonParseException13.toString();
    com.google.gson.JsonParseException jsonParseException19 = new com.google.gson.JsonParseException("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Throwable)jsonParseException13);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = gson7.toJson((java.lang.Object)"com.google.gson.stream.MalformedJsonException: hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "com.google.gson.JsonParseException: hi!"+ "'", str18.equals("com.google.gson.JsonParseException: hi!"));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test131"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    jsonArray0.add((java.lang.Number)1.0f);
    jsonArray0.add((java.lang.Character)'t');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test132"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    boolean b15 = jsonArray0.getAsBoolean();
    java.lang.String str16 = jsonArray0.getAsString();
    boolean b18 = jsonArray0.equals((java.lang.Object)2);
    jsonArray0.add("{\"hi!\":1}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test133"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    java.io.Writer writer5 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter6 = gson4.newJsonWriter(writer5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test134"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat("1");
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder1.setDateFormat("");
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls7 = null;
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder8.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.generateNonExecutableJson();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder1.registerTypeHierarchyAdapter(cls7, (java.lang.Object)gsonBuilder14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test135"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d22 = jsonPrimitive21.getAsDouble();
    boolean b23 = jsonPrimitive21.isJsonObject();
    boolean b24 = jsonPrimitive21.isNumber();
    boolean b25 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive21);
    boolean b26 = jsonPrimitive21.getAsBoolean();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull27 = jsonPrimitive21.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test136"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    double d5 = jsonPrimitive1.getAsDouble();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray6 = jsonPrimitive1.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 1.0d);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test137"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i2 = jsonPrimitive1.getAsInt();
    boolean b3 = jsonPrimitive1.isString();
    short s4 = jsonPrimitive1.getAsShort();
    double d5 = jsonPrimitive1.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 1.0d);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test138"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    int[] i_array5 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.excludeFieldsWithModifiers(i_array5);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setDateFormat((int)(byte)10);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy11 = null;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.addDeserializationExclusionStrategy(exclusionStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test139"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.Gson gson2 = gsonBuilder0.create();
    java.io.Reader reader3 = null;
    java.lang.reflect.Type type4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal5 = gson2.fromJson(reader3, type4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson2);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test140"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.addDeserializationExclusionStrategy(exclusionStrategy6);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.setDateFormat((int)(short)1, (-1));
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    int[] i_array18 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder15.excludeFieldsWithModifiers(i_array18);
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder12.excludeFieldsWithModifiers(i_array18);
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test141"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonElement jsonElement16 = null;
    jsonArray0.add(jsonElement16);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonElement jsonElement23 = jsonArray0.set(0, (com.google.gson.JsonElement)jsonPrimitive20);
    // The following exception was thrown during execution in test generation
    try {
    short s24 = jsonArray0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement23);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test142"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    com.google.gson.JsonObject jsonObject21 = jsonObject0.getAsJsonObject("\"4\"");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject21);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test143"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.Throwable throwable13 = null;
    com.google.gson.JsonParseException jsonParseException14 = new com.google.gson.JsonParseException("", throwable13);
    java.lang.reflect.Type type15 = null;
    com.google.gson.stream.JsonWriter jsonWriter16 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonParseException14, type15, jsonWriter16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test144"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    boolean b11 = gson7.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy15 = null;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.addSerializationExclusionStrategy(exclusionStrategy15);
    com.google.gson.ExclusionStrategy exclusionStrategy17 = null;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder14.addSerializationExclusionStrategy(exclusionStrategy17);
    com.google.gson.Gson gson19 = gsonBuilder14.create();
    boolean b20 = gson19.serializeNulls();
    boolean b21 = gson19.htmlSafe();
    boolean b22 = gson19.serializeNulls();
    java.lang.String str23 = gson19.toString();
    java.lang.reflect.Type type24 = null;
    java.lang.Appendable appendable25 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gson19, type24, appendable25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test145"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    boolean b7 = gson6.htmlSafe();
    java.lang.Throwable throwable8 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException(throwable8);
    java.lang.reflect.Type type10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = gson6.toJson((java.lang.Object)malformedJsonException9, type10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test146"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    long long5 = jsonPrimitive1.getAsLong();
    boolean b6 = jsonPrimitive1.isNumber();
    float f7 = jsonPrimitive1.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f7 == 1.0f);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test147"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
    boolean b2 = jsonPrimitive1.isString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test148"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    com.google.gson.JsonElement jsonElement19 = jsonArray0.get(1);
    // The following exception was thrown during execution in test generation
    try {
    boolean b20 = jsonArray0.getAsBoolean();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement19);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test149"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson7 = gsonBuilder5.create();
    java.io.Reader reader8 = null;
    java.lang.Class<int[]> cls9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array10 = gson7.fromJson(reader8, cls9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test150"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    jsonArray16.add((java.lang.Number)(byte)1);
    com.google.gson.JsonElement jsonElement38 = jsonArray16.remove((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    double d39 = jsonArray16.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement38);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test151"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    boolean b7 = gson6.htmlSafe();
    java.lang.reflect.Type type9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable10 = gson6.fromJson("com.google.gson.JsonParseException: {\"hi!\":1}", type9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test152"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("");
    java.io.Reader reader3 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse(reader3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test153"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    boolean b17 = gson7.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy21 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder18.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy21);
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder18.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder18.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setDateFormat(100);
    com.google.gson.ExclusionStrategy exclusionStrategy27 = null;
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.addSerializationExclusionStrategy(exclusionStrategy27);
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.serializeSpecialFloatingPointValues();
    java.lang.reflect.Type type32 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str33 = gson7.toJson((java.lang.Object)gsonBuilder31, type32);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test154"); }


    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException1.addSuppressed((java.lang.Throwable)jsonParseException3);
    java.lang.Throwable[] throwable_array5 = jsonParseException1.getSuppressed();
    com.google.gson.JsonParseException jsonParseException6 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array5);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test155"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.Object obj12 = null;
    java.lang.String str13 = gson7.toJson(obj12);
    com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    boolean b19 = jsonArray14.equals((java.lang.Object)gsonBuilder15);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    boolean b23 = jsonPrimitive21.isBoolean();
    java.lang.String str24 = jsonPrimitive21.getAsString();
    boolean b25 = jsonPrimitive21.isJsonObject();
    int i26 = jsonPrimitive21.getAsInt();
    boolean b27 = jsonPrimitive21.getAsBoolean();
    jsonArray14.add((com.google.gson.JsonElement)jsonPrimitive21);
    int i29 = jsonArray14.size();
    short s30 = jsonArray14.getAsShort();
    float f31 = jsonArray14.getAsFloat();
    jsonArray14.add((java.lang.Boolean)true);
    com.google.gson.stream.JsonWriter jsonWriter34 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonArray14, jsonWriter34);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null"+ "'", str13.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s30 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f31 == 1.0f);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test156"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    com.google.gson.JsonObject jsonObject26 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray28 = jsonObject26.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray30 = jsonObject26.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive33.getAsJsonPrimitive();
    jsonObject26.add("hi!", (com.google.gson.JsonElement)jsonPrimitive36);
    boolean b38 = jsonObject26.isJsonArray();
    com.google.gson.JsonElement jsonElement40 = jsonObject26.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive42 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d43 = jsonPrimitive42.getAsDouble();
    boolean b44 = jsonPrimitive42.isBoolean();
    boolean b45 = jsonObject26.equals((java.lang.Object)b44);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement46 = jsonObject26.entrySet();
    jsonObject26.addProperty("1", (java.lang.Character)'4');
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement50 = jsonObject26.entrySet();
    boolean b51 = jsonArray6.equals((java.lang.Object)jsonObject26);
    com.google.gson.JsonObject jsonObject52 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray54 = jsonObject52.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray56 = jsonObject52.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    java.lang.Number number61 = jsonPrimitive59.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive62 = jsonPrimitive59.getAsJsonPrimitive();
    jsonObject52.add("hi!", (com.google.gson.JsonElement)jsonPrimitive62);
    boolean b64 = jsonObject52.isJsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive67 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive68 = jsonPrimitive67.getAsJsonPrimitive();
    jsonObject52.add("com.google.gson.stream.MalformedJsonException: 0", (com.google.gson.JsonElement)jsonPrimitive68);
    boolean b70 = jsonObject52.isJsonNull();
    boolean b71 = jsonArray6.remove((com.google.gson.JsonElement)jsonObject52);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number72 = jsonArray6.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number61 + "' != '" + 1+ "'", number61.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test157"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Character)'a');
    java.lang.String str10 = gson6.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.stream.JsonReader jsonReader11 = null;
    java.lang.reflect.Type type12 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array13 = gson6.fromJson(jsonReader11, type12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\"a\""+ "'", str10.equals("\"a\""));

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test158"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy16 = gson7.fieldNamingStrategy();
    boolean b17 = gson7.serializeNulls();
    java.lang.Class<java.lang.reflect.Type> cls18 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type19 = gson7.getAdapter(cls18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test159"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject14 = jsonObject0.getAsJsonObject("0");
    boolean b15 = jsonObject0.isJsonArray();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement16 = jsonObject0.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive18 = jsonObject0.getAsJsonPrimitive("{\"hi!\":1}");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive18);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test160"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    com.google.gson.JsonPrimitive jsonPrimitive4 = new com.google.gson.JsonPrimitive((java.lang.Number)100.0f);
    boolean b5 = jsonPrimitive4.isJsonArray();
    double d6 = jsonPrimitive4.getAsDouble();
    boolean b7 = jsonPrimitive2.equals((java.lang.Object)d6);
    byte byte8 = jsonPrimitive2.getAsByte();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte8 == (byte)1);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test161"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder2.serializeSpecialFloatingPointValues();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test162"); }


    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException("{\"hi!\":1,\"{\\\"hi!\\\":1}\":\"1\"}", (java.lang.Throwable)jsonParseException2);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test163"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy3 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement5 = longSerializationPolicy3.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.setLongSerializationPolicy(longSerializationPolicy3);
    com.google.gson.JsonElement jsonElement8 = longSerializationPolicy3.serialize((java.lang.Long)0L);
    java.math.BigDecimal bigDecimal9 = jsonElement8.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test164"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonPrimitive18.getAsJsonPrimitive();
    boolean b20 = jsonPrimitive19.isJsonNull();
    boolean b21 = jsonPrimitive19.isJsonArray();
    java.lang.String str22 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive19);
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy25 = null;
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.addSerializationExclusionStrategy(exclusionStrategy25);
    com.google.gson.Gson gson27 = gsonBuilder23.create();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement28 = gson7.toJsonTree((java.lang.Object)gson27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "1"+ "'", str22.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson27);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test165"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy41 = gson7.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder42 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder42.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder42.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder42.setLenient();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder45.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder47 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder47.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder47.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder49.disableInnerClassSerialization();
    int[] i_array52 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder49.excludeFieldsWithModifiers(i_array52);
    int[] i_array58 = new int[] { '1', ' ', (short)1, '4' };
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder53.excludeFieldsWithModifiers(i_array58);
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder45.excludeFieldsWithModifiers(i_array58);
    java.lang.reflect.Type type61 = null;
    com.google.gson.stream.JsonWriter jsonWriter62 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gsonBuilder45, type61, jsonWriter62);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test166"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    com.google.gson.JsonObject jsonObject26 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray28 = jsonObject26.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray30 = jsonObject26.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive33.getAsJsonPrimitive();
    jsonObject26.add("hi!", (com.google.gson.JsonElement)jsonPrimitive36);
    boolean b38 = jsonObject26.isJsonArray();
    com.google.gson.JsonElement jsonElement40 = jsonObject26.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive42 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d43 = jsonPrimitive42.getAsDouble();
    boolean b44 = jsonPrimitive42.isBoolean();
    boolean b45 = jsonObject26.equals((java.lang.Object)b44);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement46 = jsonObject26.entrySet();
    jsonObject26.addProperty("1", (java.lang.Character)'4');
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement50 = jsonObject26.entrySet();
    boolean b51 = jsonArray6.equals((java.lang.Object)jsonObject26);
    com.google.gson.JsonElement jsonElement53 = jsonObject26.remove("com.google.gson.stream.MalformedJsonException: ");
    jsonObject26.addProperty("com.google.gson.JsonParseException: hi!", (java.lang.Number)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement53);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test167"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    float f17 = jsonArray0.getAsFloat();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy20 = null;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.addSerializationExclusionStrategy(exclusionStrategy20);
    boolean b22 = jsonArray0.equals((java.lang.Object)exclusionStrategy20);
    int i23 = jsonArray0.size();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement24 = jsonArray0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f17 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement24);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test168"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    java.io.Reader reader16 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader17 = gson7.newJsonReader(reader16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test169"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d54 = jsonPrimitive53.getAsDouble();
    boolean b55 = jsonPrimitive53.isJsonObject();
    byte byte56 = jsonPrimitive53.getAsByte();
    int i57 = jsonPrimitive53.getAsInt();
    java.math.BigInteger bigInteger58 = jsonPrimitive53.getAsBigInteger();
    jsonArray32.add((java.lang.Number)bigInteger58);
    com.google.gson.JsonArray jsonArray60 = jsonArray32.getAsJsonArray();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str61 = jsonArray32.getAsString();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte56 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray60);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test170"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonPrimitive7.getAsInt();
    java.lang.String str16 = jsonPrimitive7.getAsString();
    int i17 = jsonPrimitive7.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test171"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    jsonArray0.add((java.lang.Number)(byte)10);
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    int i37 = jsonPrimitive32.getAsInt();
    boolean b38 = jsonPrimitive32.getAsBoolean();
    jsonArray25.add((com.google.gson.JsonElement)jsonPrimitive32);
    int i40 = jsonArray25.size();
    int i41 = jsonArray25.getAsInt();
    boolean b42 = jsonArray25.isJsonPrimitive();
    boolean b43 = jsonArray0.remove((com.google.gson.JsonElement)jsonArray25);
    com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder45 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder45.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder45.setLenient();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder45.excludeFieldsWithoutExposeAnnotation();
    boolean b49 = jsonArray44.equals((java.lang.Object)gsonBuilder45);
    com.google.gson.JsonPrimitive jsonPrimitive51 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b52 = jsonPrimitive51.isString();
    boolean b53 = jsonPrimitive51.isBoolean();
    java.lang.String str54 = jsonPrimitive51.getAsString();
    boolean b55 = jsonPrimitive51.isJsonObject();
    int i56 = jsonPrimitive51.getAsInt();
    boolean b57 = jsonPrimitive51.getAsBoolean();
    jsonArray44.add((com.google.gson.JsonElement)jsonPrimitive51);
    java.math.BigInteger bigInteger59 = jsonArray44.getAsBigInteger();
    com.google.gson.JsonArray jsonArray60 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder61 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder61.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder61.setLenient();
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder61.excludeFieldsWithoutExposeAnnotation();
    boolean b65 = jsonArray60.equals((java.lang.Object)gsonBuilder61);
    com.google.gson.JsonPrimitive jsonPrimitive67 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b68 = jsonPrimitive67.isString();
    boolean b69 = jsonPrimitive67.isBoolean();
    java.lang.String str70 = jsonPrimitive67.getAsString();
    boolean b71 = jsonPrimitive67.isJsonObject();
    int i72 = jsonPrimitive67.getAsInt();
    boolean b73 = jsonPrimitive67.getAsBoolean();
    jsonArray60.add((com.google.gson.JsonElement)jsonPrimitive67);
    char char75 = jsonArray60.getAsCharacter();
    com.google.gson.JsonArray jsonArray76 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder77 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder77.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder79 = gsonBuilder77.setLenient();
    com.google.gson.GsonBuilder gsonBuilder80 = gsonBuilder77.excludeFieldsWithoutExposeAnnotation();
    boolean b81 = jsonArray76.equals((java.lang.Object)gsonBuilder77);
    com.google.gson.JsonPrimitive jsonPrimitive83 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b84 = jsonPrimitive83.isString();
    boolean b85 = jsonPrimitive83.isBoolean();
    java.lang.String str86 = jsonPrimitive83.getAsString();
    boolean b87 = jsonPrimitive83.isJsonObject();
    int i88 = jsonPrimitive83.getAsInt();
    boolean b89 = jsonPrimitive83.getAsBoolean();
    jsonArray76.add((com.google.gson.JsonElement)jsonPrimitive83);
    jsonArray60.addAll(jsonArray76);
    double d92 = jsonArray76.getAsDouble();
    jsonArray44.addAll(jsonArray76);
    short s94 = jsonArray76.getAsShort();
    com.google.gson.JsonArray jsonArray95 = jsonArray76.getAsJsonArray();
    long long96 = jsonArray95.getAsLong();
    jsonArray25.addAll(jsonArray95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "1"+ "'", str54.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "1"+ "'", str70.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char75 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "1"+ "'", str86.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d92 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s94 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long96 == 1L);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test172"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    boolean b15 = gson7.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy19 = null;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.addSerializationExclusionStrategy(exclusionStrategy19);
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder18.addSerializationExclusionStrategy(exclusionStrategy21);
    com.google.gson.Gson gson23 = gsonBuilder18.create();
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    java.math.BigDecimal bigDecimal30 = jsonPrimitive25.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement31 = gson23.toJsonTree((java.lang.Object)jsonPrimitive25);
    com.google.gson.internal.Excluder excluder32 = gson23.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long33 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long34 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder32, typetoken_long33);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder32);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test173"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d30 = jsonPrimitive29.getAsDouble();
    boolean b31 = jsonPrimitive29.isBoolean();
    boolean b32 = jsonObject13.equals((java.lang.Object)b31);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement33 = jsonObject13.entrySet();
    com.google.gson.JsonArray jsonArray35 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement37 = jsonObject13.remove("hi!");
    jsonObject13.addProperty("hi!", (java.lang.Character)'1');
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls41 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException42 = gson7.fromJson((com.google.gson.JsonElement)jsonObject13, cls41);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d30 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement37);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test174"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    long long4 = jsonPrimitive1.getAsLong();
    java.math.BigDecimal bigDecimal5 = jsonPrimitive1.getAsBigDecimal();
    java.lang.String str6 = jsonPrimitive1.toString();
    java.math.BigInteger bigInteger7 = jsonPrimitive1.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1"+ "'", str6.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger7);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test175"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    java.lang.reflect.Type type8 = null;
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.setDateFormat("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder14.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder14.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder14.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy21 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder14.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy21);
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder9.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy21);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder6.registerTypeAdapter(type8, (java.lang.Object)fieldNamingPolicy21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test176"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive("1");
    java.lang.reflect.Type type11 = null;
    com.google.gson.stream.JsonWriter jsonWriter12 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)"1", type11, jsonWriter12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test177"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy11 = null;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.addSerializationExclusionStrategy(exclusionStrategy11);
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder10.addSerializationExclusionStrategy(exclusionStrategy13);
    com.google.gson.Gson gson15 = gsonBuilder10.create();
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b18 = jsonPrimitive17.isString();
    boolean b19 = jsonPrimitive17.isBoolean();
    java.lang.String str20 = jsonPrimitive17.getAsString();
    boolean b21 = jsonPrimitive17.isJsonObject();
    java.math.BigDecimal bigDecimal22 = jsonPrimitive17.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement23 = gson15.toJsonTree((java.lang.Object)jsonPrimitive17);
    com.google.gson.internal.Excluder excluder24 = gson15.excluder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder7.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder0.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder24);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.generateNonExecutableJson();
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls28 = null;
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    boolean b44 = jsonPrimitive36.isJsonArray();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder26.registerTypeHierarchyAdapter(cls28, (java.lang.Object)b44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "1"+ "'", str20.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test178"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    int i20 = jsonObject0.size();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray21 = jsonObject0.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test179"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    float f24 = jsonArray6.getAsFloat();
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    boolean b36 = jsonArray31.equals((java.lang.Object)gsonBuilder32);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b39 = jsonPrimitive38.isString();
    boolean b40 = jsonPrimitive38.isBoolean();
    java.lang.String str41 = jsonPrimitive38.getAsString();
    boolean b42 = jsonPrimitive38.isJsonObject();
    int i43 = jsonPrimitive38.getAsInt();
    boolean b44 = jsonPrimitive38.getAsBoolean();
    jsonArray31.add((com.google.gson.JsonElement)jsonPrimitive38);
    jsonArray25.addAll(jsonArray31);
    java.math.BigInteger bigInteger47 = jsonArray31.getAsBigInteger();
    short s48 = jsonArray31.getAsShort();
    com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
    jsonArray49.add((java.lang.Boolean)true);
    jsonArray31.add((com.google.gson.JsonElement)jsonArray49);
    boolean b53 = jsonArray6.contains((com.google.gson.JsonElement)jsonArray49);
    // The following exception was thrown during execution in test generation
    try {
    int i54 = jsonArray49.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f24 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "1"+ "'", str41.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s48 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test180"); }


    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException4);
    java.lang.Throwable[] throwable_array6 = jsonParseException2.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException2);
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable12 = null;
    com.google.gson.JsonParseException jsonParseException13 = new com.google.gson.JsonParseException("", throwable12);
    com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException13);
    malformedJsonException10.addSuppressed((java.lang.Throwable)jsonParseException13);
    com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException10);
    malformedJsonException7.addSuppressed((java.lang.Throwable)malformedJsonException10);
    java.lang.Throwable[] throwable_array18 = malformedJsonException7.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array18);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test181"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    char char23 = jsonPrimitive18.getAsCharacter();
    int i24 = jsonPrimitive18.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char23 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test182"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse("");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement10 = jsonParser0.parse("com.google.gson.stream.MalformedJsonException: 0");
      org.junit.Assert.fail("Expected exception of type com.google.gson.JsonSyntaxException");
    } catch (com.google.gson.JsonSyntaxException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("com.google.gson.JsonSyntaxException")) {
        org.junit.Assert.fail("Expected exception of type com.google.gson.JsonSyntaxException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test183"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    com.google.gson.stream.JsonReader jsonReader13 = null;
    java.lang.reflect.Type type14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array15 = gson7.fromJson(jsonReader13, type14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test184"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    jsonArray6.add((java.lang.Number)(byte)0);
    com.google.gson.JsonObject jsonObject26 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray28 = jsonObject26.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray30 = jsonObject26.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive36 = jsonPrimitive33.getAsJsonPrimitive();
    jsonObject26.add("hi!", (com.google.gson.JsonElement)jsonPrimitive36);
    boolean b38 = jsonObject26.isJsonArray();
    com.google.gson.JsonElement jsonElement40 = jsonObject26.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive42 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d43 = jsonPrimitive42.getAsDouble();
    boolean b44 = jsonPrimitive42.isBoolean();
    boolean b45 = jsonObject26.equals((java.lang.Object)b44);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement46 = jsonObject26.entrySet();
    jsonObject26.addProperty("1", (java.lang.Character)'4');
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement50 = jsonObject26.entrySet();
    boolean b51 = jsonArray6.equals((java.lang.Object)jsonObject26);
    com.google.gson.JsonElement jsonElement53 = jsonArray6.get((int)(short)0);
    boolean b54 = jsonElement53.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test185"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Character)'1');
    com.google.gson.JsonElement jsonElement22 = jsonObject0.get("");
    jsonObject0.addProperty("null", "4");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement22);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test186"); }


    com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
    boolean b2 = jsonNull0.equals((java.lang.Object)(-1L));
    com.google.gson.JsonObject jsonObject3 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray5 = jsonObject3.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray7 = jsonObject3.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b11 = jsonPrimitive10.isString();
    java.lang.Number number12 = jsonPrimitive10.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive13 = jsonPrimitive10.getAsJsonPrimitive();
    jsonObject3.add("hi!", (com.google.gson.JsonElement)jsonPrimitive13);
    boolean b15 = jsonObject3.isJsonArray();
    com.google.gson.JsonElement jsonElement17 = jsonObject3.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d20 = jsonPrimitive19.getAsDouble();
    boolean b21 = jsonPrimitive19.isBoolean();
    boolean b22 = jsonObject3.equals((java.lang.Object)b21);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement23 = jsonObject3.entrySet();
    com.google.gson.JsonArray jsonArray25 = jsonObject3.getAsJsonArray("1");
    int i26 = jsonObject3.size();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement27 = jsonObject3.entrySet();
    boolean b28 = jsonNull0.equals((java.lang.Object)set_entry_str_jsonElement27);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject29 = jsonNull0.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number12 + "' != '" + 1+ "'", number12.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test187"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    char char5 = jsonPrimitive1.getAsCharacter();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull6 = jsonPrimitive1.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '1');

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test188"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    java.io.Reader reader14 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader15 = gson7.newJsonReader(reader14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test189"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat(10, 0);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.Gson gson9 = gsonBuilder8.create();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test190"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Character)'a');
    java.lang.String str10 = gson6.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.GsonBuilder gsonBuilder11 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.setLenient();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder11.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy16 = null;
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder11.addSerializationExclusionStrategy(exclusionStrategy16);
    java.lang.reflect.Type type18 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement19 = gson6.toJsonTree((java.lang.Object)exclusionStrategy16, type18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\"a\""+ "'", str10.equals("\"a\""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test191"); }


    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException("0");

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test192"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    float f4 = jsonPrimitive1.getAsFloat();
    boolean b5 = jsonPrimitive1.getAsBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test193"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    double d32 = jsonArray16.getAsDouble();
    char char33 = jsonArray16.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '1');

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test194"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    java.io.Reader reader7 = null;
    java.lang.Class<int[]> cls8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array9 = gson6.fromJson(reader7, cls8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test195"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement24 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray26 = jsonObject0.getAsJsonArray("10");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray26);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test196"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger18 = jsonArray0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test197"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number35 = jsonArray0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test198"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)0L);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull3 = jsonPrimitive1.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test199"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable11 = gson7.fromJson("{}", type10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test200"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setFieldNamingPolicy(fieldNamingPolicy9);
    java.lang.reflect.Field field11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str12 = fieldNamingPolicy9.translateName(field11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test201"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement24 = jsonObject0.remove("hi!");
    jsonObject0.addProperty("hi!", (java.lang.Character)'1');
    jsonObject0.addProperty("{}", (java.lang.Character)'1');
    // The following exception was thrown during execution in test generation
    try {
    float f31 = jsonObject0.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test202"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder5 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.addSerializationExclusionStrategy(exclusionStrategy12);
    com.google.gson.ExclusionStrategy exclusionStrategy14 = null;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.addSerializationExclusionStrategy(exclusionStrategy14);
    com.google.gson.Gson gson16 = gsonBuilder11.create();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    java.math.BigDecimal bigDecimal23 = jsonPrimitive18.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement24 = gson16.toJsonTree((java.lang.Object)jsonPrimitive18);
    com.google.gson.internal.Excluder excluder25 = gson16.excluder();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder8.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder25);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder8.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.setLenient();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder28.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder32.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder37.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder39 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.setLenient();
    int[] i_array43 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder41.excludeFieldsWithModifiers(i_array43);
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder38.excludeFieldsWithModifiers(i_array43);
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder31.excludeFieldsWithModifiers(i_array43);
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder8.excludeFieldsWithModifiers(i_array43);
    java.lang.reflect.Type type48 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str49 = gson4.toJson((java.lang.Object)gsonBuilder8, type48);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test203"); }


    java.lang.Throwable throwable2 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException(throwable2);
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException3);
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException3);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException3);
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException3);
    java.lang.String str8 = malformedJsonException7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "com.google.gson.stream.MalformedJsonException"+ "'", str8.equals("com.google.gson.stream.MalformedJsonException"));

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test204"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    com.google.gson.JsonObject jsonObject42 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray44 = jsonObject42.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray46 = jsonObject42.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive49 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b50 = jsonPrimitive49.isString();
    java.lang.Number number51 = jsonPrimitive49.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive52 = jsonPrimitive49.getAsJsonPrimitive();
    jsonObject42.add("hi!", (com.google.gson.JsonElement)jsonPrimitive52);
    boolean b54 = jsonObject42.isJsonArray();
    com.google.gson.JsonElement jsonElement56 = jsonObject42.get("hi!");
    jsonObject18.add("", (com.google.gson.JsonElement)jsonObject42);
    com.google.gson.JsonObject jsonObject59 = jsonObject42.getAsJsonObject("com.google.gson.stream.MalformedJsonException: hi!");
    com.google.gson.JsonArray jsonArray60 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder61 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder61.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder63 = gsonBuilder61.setLenient();
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder61.excludeFieldsWithoutExposeAnnotation();
    boolean b65 = jsonArray60.equals((java.lang.Object)gsonBuilder61);
    com.google.gson.JsonArray jsonArray66 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder67 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder67.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder67.setLenient();
    com.google.gson.GsonBuilder gsonBuilder70 = gsonBuilder67.excludeFieldsWithoutExposeAnnotation();
    boolean b71 = jsonArray66.equals((java.lang.Object)gsonBuilder67);
    com.google.gson.JsonPrimitive jsonPrimitive73 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b74 = jsonPrimitive73.isString();
    boolean b75 = jsonPrimitive73.isBoolean();
    java.lang.String str76 = jsonPrimitive73.getAsString();
    boolean b77 = jsonPrimitive73.isJsonObject();
    int i78 = jsonPrimitive73.getAsInt();
    boolean b79 = jsonPrimitive73.getAsBoolean();
    jsonArray66.add((com.google.gson.JsonElement)jsonPrimitive73);
    jsonArray60.addAll(jsonArray66);
    java.math.BigInteger bigInteger82 = jsonArray66.getAsBigInteger();
    boolean b83 = jsonArray66.isJsonPrimitive();
    jsonArray66.add((java.lang.Character)'#');
    boolean b86 = jsonObject42.equals((java.lang.Object)jsonArray66);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number87 = jsonArray66.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number51 + "' != '" + 1+ "'", number51.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "1"+ "'", str76.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test205"); }


    java.lang.Throwable throwable1 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException(throwable1);
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException2);
    java.lang.Throwable[] throwable_array4 = malformedJsonException2.getSuppressed();
    java.lang.Throwable throwable6 = null;
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("", throwable6);
    // The following exception was thrown during execution in test generation
    try {
    malformedJsonException2.addSuppressed(throwable6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test206"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    byte byte16 = jsonArray0.getAsByte();
    short s17 = jsonArray0.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte16 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s17 == (short)1);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test207"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    jsonArray0.add((java.lang.Number)(byte)10);
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    int i37 = jsonPrimitive32.getAsInt();
    boolean b38 = jsonPrimitive32.getAsBoolean();
    jsonArray25.add((com.google.gson.JsonElement)jsonPrimitive32);
    int i40 = jsonArray25.size();
    int i41 = jsonArray25.getAsInt();
    boolean b42 = jsonArray25.isJsonPrimitive();
    boolean b43 = jsonArray0.remove((com.google.gson.JsonElement)jsonArray25);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull44 = jsonArray25.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test208"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    java.lang.reflect.Type type35 = null;
    java.lang.Appendable appendable36 = gson7.fromJson("", type35);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy37 = gson7.fieldNamingStrategy();
    com.google.gson.JsonObject jsonObject38 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray40 = jsonObject38.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray42 = jsonObject38.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b46 = jsonPrimitive45.isString();
    java.lang.Number number47 = jsonPrimitive45.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive48 = jsonPrimitive45.getAsJsonPrimitive();
    jsonObject38.add("hi!", (com.google.gson.JsonElement)jsonPrimitive48);
    boolean b50 = jsonObject38.isJsonArray();
    com.google.gson.JsonElement jsonElement52 = jsonObject38.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive54 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d55 = jsonPrimitive54.getAsDouble();
    boolean b56 = jsonPrimitive54.isBoolean();
    boolean b57 = jsonObject38.equals((java.lang.Object)b56);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement58 = jsonObject38.entrySet();
    com.google.gson.JsonArray jsonArray60 = jsonObject38.getAsJsonArray("1");
    com.google.gson.JsonElement jsonElement62 = jsonObject38.remove("hi!");
    com.google.gson.JsonElement jsonElement64 = jsonObject38.get("[1]");
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls65 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException66 = gson7.fromJson((com.google.gson.JsonElement)jsonObject38, cls65);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number47 + "' != '" + 1+ "'", number47.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d55 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement64);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test209"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    java.lang.String str18 = gson7.toString();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy19 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy20 = gson7.getAdapter(typetoken_fieldNamingStrategy19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test210"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject14 = jsonObject0.getAsJsonObject("0");
    boolean b15 = jsonObject0.isJsonArray();
    int i16 = jsonObject0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = jsonObject0.getAsString();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test211"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i2 = jsonPrimitive1.getAsInt();
    long long3 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 1L);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test212"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("{}");

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test213"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonElement jsonElement36 = jsonArray0.remove((int)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal37 = jsonArray0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement36);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test214"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    int i24 = jsonObject0.size();
    jsonObject0.addProperty("com.google.gson.JsonParseException: {\"hi!\":1}", (java.lang.Character)'h');
    com.google.gson.JsonArray jsonArray29 = jsonObject0.getAsJsonArray("{}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test215"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d22 = jsonPrimitive21.getAsDouble();
    boolean b23 = jsonPrimitive21.isJsonObject();
    boolean b24 = jsonPrimitive21.isNumber();
    boolean b25 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive21);
    boolean b26 = jsonPrimitive21.getAsBoolean();
    char char27 = jsonPrimitive21.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char27 == '4');

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test216"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy3 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement5 = longSerializationPolicy3.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.setLongSerializationPolicy(longSerializationPolicy3);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy8 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setFieldNamingPolicy(fieldNamingPolicy8);
    java.lang.reflect.Field field10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = fieldNamingPolicy8.translateName(field10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test217"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    java.lang.String str11 = gson7.toString();
    java.lang.String str12 = gson7.toString();
    boolean b13 = gson7.htmlSafe();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test218"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    byte byte4 = jsonPrimitive1.getAsByte();
    int i5 = jsonPrimitive1.getAsInt();
    java.math.BigInteger bigInteger6 = jsonPrimitive1.getAsBigInteger();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive1.getAsBigDecimal();
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test219"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    java.math.BigDecimal bigDecimal52 = jsonArray32.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test220"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    boolean b23 = jsonArray6.isJsonPrimitive();
    com.google.gson.JsonObject jsonObject25 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray27 = jsonObject25.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray29 = jsonObject25.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    java.lang.Number number34 = jsonPrimitive32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive35 = jsonPrimitive32.getAsJsonPrimitive();
    jsonObject25.add("hi!", (com.google.gson.JsonElement)jsonPrimitive35);
    boolean b37 = jsonObject25.isJsonArray();
    com.google.gson.JsonElement jsonElement39 = jsonObject25.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive41 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d42 = jsonPrimitive41.getAsDouble();
    boolean b43 = jsonPrimitive41.isBoolean();
    boolean b44 = jsonObject25.equals((java.lang.Object)b43);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement45 = jsonObject25.entrySet();
    com.google.gson.JsonArray jsonArray47 = jsonObject25.getAsJsonArray("1");
    int i48 = jsonObject25.size();
    boolean b49 = jsonObject25.isJsonObject();
    boolean b50 = jsonObject25.isJsonPrimitive();
    com.google.gson.JsonElement jsonElement52 = jsonObject25.remove("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonArray jsonArray54 = jsonObject25.getAsJsonArray("1");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement55 = jsonArray6.set((int)(byte)10, (com.google.gson.JsonElement)jsonObject25);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number34 + "' != '" + 1+ "'", number34.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d42 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray54);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test221"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy10 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder7.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy10);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder7.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy14 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setFieldNamingPolicy(fieldNamingPolicy14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    boolean b18 = gson17.htmlSafe();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy19 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy20 = gson17.getAdapter(typetoken_fieldNamingStrategy19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test222"); }


    java.lang.Throwable throwable4 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException(throwable4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException5);
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("hi!", (java.lang.Throwable)malformedJsonException5);
    com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("com.google.gson.JsonParseException: {\"hi!\":1}", (java.lang.Throwable)jsonParseException7);
    com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Throwable)jsonParseException7);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test223"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Boolean)false);
    jsonObject0.addProperty("{\"hi!\":1}", (java.lang.Character)' ');
    boolean b21 = jsonObject0.isJsonNull();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray23 = jsonObject0.getAsJsonArray("{\"hi!\":1}");
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test224"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonPrimitive7.getAsInt();
    java.lang.Number number16 = jsonPrimitive7.getAsNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number16 + "' != '" + 1+ "'", number16.equals(1));

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test225"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy41 = gson7.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive43 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b44 = jsonPrimitive43.isString();
    boolean b45 = jsonPrimitive43.isBoolean();
    java.lang.String str46 = jsonPrimitive43.getAsString();
    boolean b47 = jsonPrimitive43.isJsonObject();
    double d48 = jsonPrimitive43.getAsDouble();
    boolean b49 = jsonPrimitive43.isString();
    java.lang.reflect.Type type50 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException51 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive43, type50);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "1"+ "'", str46.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test226"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    com.google.gson.JsonArray jsonArray41 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder42 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder42.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder42.setLenient();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder42.excludeFieldsWithoutExposeAnnotation();
    boolean b46 = jsonArray41.equals((java.lang.Object)gsonBuilder42);
    com.google.gson.JsonPrimitive jsonPrimitive48 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b49 = jsonPrimitive48.isString();
    boolean b50 = jsonPrimitive48.isBoolean();
    java.lang.String str51 = jsonPrimitive48.getAsString();
    boolean b52 = jsonPrimitive48.isJsonObject();
    int i53 = jsonPrimitive48.getAsInt();
    boolean b54 = jsonPrimitive48.getAsBoolean();
    jsonArray41.add((com.google.gson.JsonElement)jsonPrimitive48);
    int i56 = jsonArray41.size();
    short s57 = jsonArray41.getAsShort();
    float f58 = jsonArray41.getAsFloat();
    com.google.gson.GsonBuilder gsonBuilder59 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder59.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy61 = null;
    com.google.gson.GsonBuilder gsonBuilder62 = gsonBuilder60.addSerializationExclusionStrategy(exclusionStrategy61);
    boolean b63 = jsonArray41.equals((java.lang.Object)exclusionStrategy61);
    java.lang.String str64 = jsonArray41.getAsString();
    char char65 = jsonArray41.getAsCharacter();
    com.google.gson.JsonPrimitive jsonPrimitive67 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d68 = jsonPrimitive67.getAsDouble();
    java.lang.Number number69 = jsonPrimitive67.getAsNumber();
    com.google.gson.GsonBuilder gsonBuilder70 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder71 = gsonBuilder70.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder72 = gsonBuilder70.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy73 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder74 = gsonBuilder70.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy73);
    com.google.gson.GsonBuilder gsonBuilder75 = gsonBuilder70.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder76 = gsonBuilder75.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy77 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder76.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy77);
    com.google.gson.GsonBuilder gsonBuilder80 = gsonBuilder78.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy81 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder82 = gsonBuilder80.setFieldNamingPolicy(fieldNamingPolicy81);
    boolean b83 = jsonPrimitive67.equals((java.lang.Object)gsonBuilder80);
    double d84 = jsonPrimitive67.getAsDouble();
    float f85 = jsonPrimitive67.getAsFloat();
    boolean b86 = jsonArray41.equals((java.lang.Object)jsonPrimitive67);
    int i87 = jsonArray41.getAsInt();
    java.lang.Appendable appendable88 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonArray41, appendable88);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s57 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f58 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "1"+ "'", str64.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char65 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d68 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d84 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f85 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test227"); }


    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException4);
    java.lang.Throwable[] throwable_array6 = jsonParseException2.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException2);
    java.lang.String str8 = jsonParseException2.toString();
    java.lang.Throwable[] throwable_array9 = jsonParseException2.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "com.google.gson.JsonParseException: hi!"+ "'", str8.equals("com.google.gson.JsonParseException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array9);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test228"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.setLenient();
    com.google.gson.Gson gson4 = gsonBuilder3.create();
    com.google.gson.JsonPrimitive jsonPrimitive6 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d7 = jsonPrimitive6.getAsDouble();
    boolean b8 = jsonPrimitive6.isJsonObject();
    byte byte9 = jsonPrimitive6.getAsByte();
    int i10 = jsonPrimitive6.getAsInt();
    java.math.BigInteger bigInteger11 = jsonPrimitive6.getAsBigInteger();
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls12 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException13 = gson4.fromJson((com.google.gson.JsonElement)jsonPrimitive6, cls12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte9 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger11);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test229"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    java.lang.Number number18 = jsonPrimitive11.getAsNumber();
    boolean b19 = jsonPrimitive11.isJsonArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number18 + "' != '" + 1+ "'", number18.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test230"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive2 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d3 = jsonPrimitive2.getAsDouble();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive2);
    java.lang.String str5 = jsonArray0.getAsString();
    char char6 = jsonArray0.getAsCharacter();
    char char7 = jsonArray0.getAsCharacter();
    boolean b8 = jsonArray0.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.addSerializationExclusionStrategy(exclusionStrategy12);
    com.google.gson.ExclusionStrategy exclusionStrategy14 = null;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.addSerializationExclusionStrategy(exclusionStrategy14);
    com.google.gson.Gson gson16 = gsonBuilder11.create();
    boolean b17 = gson16.serializeNulls();
    boolean b18 = gson16.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    java.lang.Number number24 = jsonPrimitive20.getAsNumber();
    long long25 = jsonPrimitive20.getAsLong();
    java.lang.String str26 = gson16.toJson((java.lang.Object)jsonPrimitive20);
    com.google.gson.JsonObject jsonObject27 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray29 = jsonObject27.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray31 = jsonObject27.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    java.lang.Number number36 = jsonPrimitive34.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive37 = jsonPrimitive34.getAsJsonPrimitive();
    jsonObject27.add("hi!", (com.google.gson.JsonElement)jsonPrimitive37);
    boolean b39 = jsonObject27.isJsonArray();
    com.google.gson.JsonElement jsonElement41 = jsonObject27.get("hi!");
    java.lang.String str42 = gson16.toJson((com.google.gson.JsonElement)jsonObject27);
    com.google.gson.JsonArray jsonArray44 = jsonObject27.getAsJsonArray("4");
    boolean b45 = jsonArray0.remove((com.google.gson.JsonElement)jsonArray44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "4"+ "'", str5.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char7 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number24 + "' != '" + 1+ "'", number24.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number36 + "' != '" + 1+ "'", number36.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "{\"hi!\":1}"+ "'", str42.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test231"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingPolicy(fieldNamingPolicy11);
    com.google.gson.Gson gson13 = gsonBuilder10.create();
    java.lang.Appendable appendable15 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson13.toJson((java.lang.Object)'4', appendable15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson13);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test232"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy2 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy2);
    com.google.gson.JsonNull jsonNull4 = new com.google.gson.JsonNull();
    com.google.gson.GsonBuilder gsonBuilder5 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setLenient();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.setFieldNamingPolicy(fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.excludeFieldsWithoutExposeAnnotation();
    int[] i_array12 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder10.excludeFieldsWithModifiers(i_array12);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder10.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.setLenient();
    boolean b16 = jsonNull4.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setLenient();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder23.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy29 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array30 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy29 };
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder23.setExclusionStrategies(exclusionStrategy_array30);
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder22.setExclusionStrategies(exclusionStrategy_array30);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder14.setExclusionStrategies(exclusionStrategy_array30);
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder3.setExclusionStrategies(exclusionStrategy_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test233"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    boolean b30 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: 0");
    // The following exception was thrown during execution in test generation
    try {
    byte byte31 = jsonObject0.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test234"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder5.setFieldNamingPolicy(fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.serializeNulls();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy19 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy19);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder16.setFieldNamingPolicy(fieldNamingPolicy19);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls22 = null;
    com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithoutExposeAnnotation();
    boolean b28 = jsonArray23.equals((java.lang.Object)gsonBuilder24);
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b31 = jsonPrimitive30.isString();
    boolean b32 = jsonPrimitive30.isBoolean();
    java.lang.String str33 = jsonPrimitive30.getAsString();
    boolean b34 = jsonPrimitive30.isJsonObject();
    int i35 = jsonPrimitive30.getAsInt();
    boolean b36 = jsonPrimitive30.getAsBoolean();
    jsonArray23.add((com.google.gson.JsonElement)jsonPrimitive30);
    int i38 = jsonArray23.size();
    short s39 = jsonArray23.getAsShort();
    java.math.BigInteger bigInteger40 = jsonArray23.getAsBigInteger();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder21.registerTypeHierarchyAdapter(cls22, (java.lang.Object)jsonArray23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s39 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger40);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test235"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    java.lang.String str11 = gson7.toString();
    java.lang.String str12 = gson7.toString();
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy16 = null;
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.addSerializationExclusionStrategy(exclusionStrategy16);
    com.google.gson.ExclusionStrategy exclusionStrategy18 = null;
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder15.addSerializationExclusionStrategy(exclusionStrategy18);
    com.google.gson.Gson gson20 = gsonBuilder15.create();
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    java.lang.Number number24 = jsonPrimitive22.getAsNumber();
    java.math.BigDecimal bigDecimal25 = jsonPrimitive22.getAsBigDecimal();
    long long26 = jsonPrimitive22.getAsLong();
    boolean b27 = jsonPrimitive22.isNumber();
    java.lang.String str28 = gson20.toJson((com.google.gson.JsonElement)jsonPrimitive22);
    com.google.gson.JsonObject jsonObject29 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray31 = jsonObject29.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray33 = jsonObject29.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    java.lang.Number number38 = jsonPrimitive36.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive39 = jsonPrimitive36.getAsJsonPrimitive();
    jsonObject29.add("hi!", (com.google.gson.JsonElement)jsonPrimitive39);
    boolean b41 = jsonObject29.isJsonArray();
    com.google.gson.JsonElement jsonElement43 = jsonObject29.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d46 = jsonPrimitive45.getAsDouble();
    boolean b47 = jsonPrimitive45.isBoolean();
    boolean b48 = jsonObject29.equals((java.lang.Object)b47);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement49 = jsonObject29.entrySet();
    com.google.gson.JsonArray jsonArray51 = jsonObject29.getAsJsonArray("1");
    int i52 = jsonObject29.size();
    boolean b53 = jsonObject29.isJsonObject();
    jsonObject29.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Number)1L);
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    java.lang.Number number61 = jsonPrimitive59.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive62 = jsonPrimitive59.getAsJsonPrimitive();
    boolean b63 = jsonPrimitive62.isString();
    java.math.BigDecimal bigDecimal64 = jsonPrimitive62.getAsBigDecimal();
    jsonObject29.addProperty("hi!", (java.lang.Number)bigDecimal64);
    boolean b66 = jsonPrimitive22.equals((java.lang.Object)bigDecimal64);
    java.lang.Number number67 = jsonPrimitive22.getAsNumber();
    char char68 = jsonPrimitive22.getAsCharacter();
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls69 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException70 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive22, cls69);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number24 + "' != '" + 1+ "'", number24.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number38 + "' != '" + 1+ "'", number38.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d46 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number61 + "' != '" + 1+ "'", number61.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number67 + "' != '" + 1+ "'", number67.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char68 == '1');

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test236"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat(10, 0);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("\"4\"");
    com.google.gson.GsonBuilder gsonBuilder11 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.setLenient();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy15 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.setFieldNamingPolicy(fieldNamingPolicy15);
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setLenient();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder18.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder18.setVersion((double)'#');
    com.google.gson.Gson gson24 = gsonBuilder23.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy25 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy25);
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.disableInnerClassSerialization();
    int[] i_array32 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder29.excludeFieldsWithModifiers(i_array32);
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder26.excludeFieldsWithModifiers(i_array32);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy35 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder26.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy35);
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder17.setFieldNamingPolicy(fieldNamingPolicy35);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder10.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test237"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder4.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder4.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy11);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy15 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setFieldNamingPolicy(fieldNamingPolicy15);
    boolean b17 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder14);
    java.math.BigInteger bigInteger18 = jsonPrimitive1.getAsBigInteger();
    char char19 = jsonPrimitive1.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char19 == '4');

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test238"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test239"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy4 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.setFieldNamingPolicy(fieldNamingPolicy4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    int[] i_array7 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.excludeFieldsWithModifiers(i_array7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableHtmlEscaping();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test240"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    boolean b25 = jsonPrimitive24.getAsBoolean();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder26.disableInnerClassSerialization();
    boolean b31 = jsonPrimitive24.equals((java.lang.Object)gsonBuilder30);
    boolean b32 = jsonArray0.equals((java.lang.Object)jsonPrimitive24);
    // The following exception was thrown during execution in test generation
    try {
    float f33 = jsonPrimitive24.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test241"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    boolean b9 = gson7.htmlSafe();
    java.lang.Class<java.math.BigDecimal> cls11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal12 = gson7.fromJson("{}", cls11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test242"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy20 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setFieldNamingPolicy(fieldNamingPolicy20);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    java.lang.Appendable appendable23 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gsonBuilder22, appendable23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test243"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d54 = jsonPrimitive53.getAsDouble();
    java.lang.Number number55 = jsonPrimitive53.getAsNumber();
    jsonArray32.add(number55);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    java.math.BigInteger bigInteger72 = jsonArray57.getAsBigInteger();
    int i73 = jsonArray57.getAsInt();
    com.google.gson.JsonNull jsonNull74 = new com.google.gson.JsonNull();
    boolean b75 = jsonArray57.contains((com.google.gson.JsonElement)jsonNull74);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement76 = jsonArray57.iterator();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement77 = jsonArray57.iterator();
    int i78 = jsonArray57.getAsInt();
    com.google.gson.JsonArray jsonArray79 = new com.google.gson.JsonArray();
    jsonArray79.add((java.lang.Boolean)true);
    char char82 = jsonArray79.getAsCharacter();
    jsonArray57.addAll(jsonArray79);
    jsonArray32.addAll(jsonArray79);
    boolean b85 = jsonArray79.isJsonArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char82 == 't');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test244"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy7 = null;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.addSerializationExclusionStrategy(exclusionStrategy7);
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.addSerializationExclusionStrategy(exclusionStrategy9);
    com.google.gson.Gson gson11 = gsonBuilder6.create();
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    java.math.BigDecimal bigDecimal18 = jsonPrimitive13.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement19 = gson11.toJsonTree((java.lang.Object)jsonPrimitive13);
    com.google.gson.internal.Excluder excluder20 = gson11.excluder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder3.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder20);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder3.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder3.addSerializationExclusionStrategy(exclusionStrategy23);
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array25 = new com.google.gson.ExclusionStrategy[] {  };
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setExclusionStrategies(exclusionStrategy_array25);
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setDateFormat("[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test245"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    boolean b5 = jsonPrimitive1.getAsBoolean();
    java.math.BigInteger bigInteger6 = jsonPrimitive1.getAsBigInteger();
    long long7 = jsonPrimitive1.getAsLong();
    double d8 = jsonPrimitive1.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 1.0d);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test246"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.lang.Number number20 = jsonArray0.getAsNumber();
    char char21 = jsonArray0.getAsCharacter();
    com.google.gson.JsonObject jsonObject23 = new com.google.gson.JsonObject();
    com.google.gson.JsonPrimitive jsonPrimitive25 = jsonObject23.getAsJsonPrimitive("{\"hi!\":1}");
    jsonObject23.addProperty("com.google.gson.JsonParseException: hi!", "{}");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement29 = jsonArray0.set(2, (com.google.gson.JsonElement)jsonObject23);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive25);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test247"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.serializeNulls();
    java.lang.reflect.Type type6 = null;
    com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    boolean b12 = jsonArray7.equals((java.lang.Object)gsonBuilder8);
    com.google.gson.JsonPrimitive jsonPrimitive14 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b15 = jsonPrimitive14.isString();
    boolean b16 = jsonPrimitive14.isBoolean();
    java.lang.String str17 = jsonPrimitive14.getAsString();
    boolean b18 = jsonPrimitive14.isJsonObject();
    int i19 = jsonPrimitive14.getAsInt();
    boolean b20 = jsonPrimitive14.getAsBoolean();
    jsonArray7.add((com.google.gson.JsonElement)jsonPrimitive14);
    int i22 = jsonArray7.size();
    com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithoutExposeAnnotation();
    boolean b28 = jsonArray23.equals((java.lang.Object)gsonBuilder24);
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b31 = jsonPrimitive30.isString();
    boolean b32 = jsonPrimitive30.isBoolean();
    java.lang.String str33 = jsonPrimitive30.getAsString();
    boolean b34 = jsonPrimitive30.isJsonObject();
    int i35 = jsonPrimitive30.getAsInt();
    boolean b36 = jsonPrimitive30.getAsBoolean();
    jsonArray23.add((com.google.gson.JsonElement)jsonPrimitive30);
    char char38 = jsonArray23.getAsCharacter();
    com.google.gson.JsonElement jsonElement39 = null;
    jsonArray23.add(jsonElement39);
    jsonArray7.addAll(jsonArray23);
    jsonArray23.add((java.lang.Number)(byte)1);
    com.google.gson.JsonElement jsonElement45 = jsonArray23.remove((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder2.registerTypeAdapter(type6, (java.lang.Object)jsonArray23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char38 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement45);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test248"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    jsonArray0.add((java.lang.Boolean)true);
    char char3 = jsonArray0.getAsCharacter();
    // The following exception was thrown during execution in test generation
    try {
    float f4 = jsonArray0.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == 't');

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test249"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.math.BigDecimal bigDecimal51 = jsonArray32.getAsBigDecimal();
    short s52 = jsonArray32.getAsShort();
    byte byte53 = jsonArray32.getAsByte();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement54 = jsonArray32.iterator();
    double d55 = jsonArray32.getAsDouble();
    jsonArray32.add((java.lang.Character)'1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s52 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte53 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d55 == 1.0d);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test250"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull29 = jsonElement27.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test251"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder3.setDateFormat((int)(byte)10, (int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test252"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonElement jsonElement2 = jsonObject0.get("\"4\"");
    // The following exception was thrown during execution in test generation
    try {
    boolean b3 = jsonElement2.isJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement2);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test253"); }


    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException4);
    java.lang.Throwable[] throwable_array6 = jsonParseException2.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException2);
    java.lang.String str8 = jsonParseException2.toString();
    com.google.gson.JsonParseException jsonParseException10 = new com.google.gson.JsonParseException("");
    com.google.gson.JsonParseException jsonParseException11 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException10);
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException11);
    java.lang.Throwable throwable14 = null;
    com.google.gson.JsonParseException jsonParseException15 = new com.google.gson.JsonParseException("", throwable14);
    jsonParseException11.addSuppressed((java.lang.Throwable)jsonParseException15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "com.google.gson.JsonParseException: hi!"+ "'", str8.equals("com.google.gson.JsonParseException: hi!"));

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test254"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    float f4 = jsonPrimitive1.getAsFloat();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive6 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger5);
    boolean b7 = jsonPrimitive6.isJsonNull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test255"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)0L);
    boolean b17 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive16);
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d20 = jsonPrimitive19.getAsDouble();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 4.0d);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test256"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    float f4 = jsonPrimitive1.getAsFloat();
    float f5 = jsonPrimitive1.getAsFloat();
    byte byte6 = jsonPrimitive1.getAsByte();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f5 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte6 == (byte)1);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test257"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    java.lang.String str18 = jsonArray0.toString();
    boolean b19 = jsonArray0.getAsBoolean();
    java.lang.String str20 = jsonArray0.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[1]"+ "'", str18.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "1"+ "'", str20.equals("1"));

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test258"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array7 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy6 };
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder0.setExclusionStrategies(exclusionStrategy_array7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder0.generateNonExecutableJson();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test259"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)'1');
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    java.lang.String str10 = gson9.toString();
    com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    boolean b16 = jsonArray11.equals((java.lang.Object)gsonBuilder12);
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    int i23 = jsonPrimitive18.getAsInt();
    boolean b24 = jsonPrimitive18.getAsBoolean();
    jsonArray11.add((com.google.gson.JsonElement)jsonPrimitive18);
    boolean b26 = jsonPrimitive18.isJsonArray();
    java.lang.reflect.Type type27 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str28 = gson9.toJson((java.lang.Object)b26, type27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test260"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder0.setDateFormat((int)(short)0, 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test261"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.setPrettyPrinting();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test262"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    int i24 = jsonObject0.size();
    int i25 = jsonObject0.size();
    int i26 = jsonObject0.size();
    // The following exception was thrown during execution in test generation
    try {
    boolean b27 = jsonObject0.getAsBoolean();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 2);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test263"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.Gson gson9 = gsonBuilder8.create();
    com.google.gson.JsonArray jsonArray10 = new com.google.gson.JsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d13 = jsonPrimitive12.getAsDouble();
    jsonArray10.add((com.google.gson.JsonElement)jsonPrimitive12);
    java.lang.String str15 = gson9.toJson((com.google.gson.JsonElement)jsonArray10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[\"4\"]"+ "'", str15.equals("[\"4\"]"));

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test264"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setDateFormat("1");
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.setLenient();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test265"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy39 = null;
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy39);
    com.google.gson.ExclusionStrategy exclusionStrategy41 = null;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy41);
    com.google.gson.Gson gson43 = gsonBuilder38.create();
    java.lang.String str44 = gson43.toString();
    java.lang.reflect.Type type46 = null;
    java.lang.Appendable appendable47 = gson43.fromJson("", type46);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy48 = gson43.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setLenient();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder50.excludeFieldsWithoutExposeAnnotation();
    boolean b54 = jsonArray49.equals((java.lang.Object)gsonBuilder50);
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    boolean b58 = jsonPrimitive56.isBoolean();
    java.lang.String str59 = jsonPrimitive56.getAsString();
    boolean b60 = jsonPrimitive56.isJsonObject();
    int i61 = jsonPrimitive56.getAsInt();
    boolean b62 = jsonPrimitive56.getAsBoolean();
    jsonArray49.add((com.google.gson.JsonElement)jsonPrimitive56);
    int i64 = jsonArray49.size();
    com.google.gson.JsonArray jsonArray65 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder66 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder66.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder66.setLenient();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder66.excludeFieldsWithoutExposeAnnotation();
    boolean b70 = jsonArray65.equals((java.lang.Object)gsonBuilder66);
    com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b73 = jsonPrimitive72.isString();
    boolean b74 = jsonPrimitive72.isBoolean();
    java.lang.String str75 = jsonPrimitive72.getAsString();
    boolean b76 = jsonPrimitive72.isJsonObject();
    int i77 = jsonPrimitive72.getAsInt();
    boolean b78 = jsonPrimitive72.getAsBoolean();
    jsonArray65.add((com.google.gson.JsonElement)jsonPrimitive72);
    char char80 = jsonArray65.getAsCharacter();
    com.google.gson.JsonElement jsonElement81 = null;
    jsonArray65.add(jsonElement81);
    jsonArray49.addAll(jsonArray65);
    com.google.gson.JsonArray jsonArray84 = new com.google.gson.JsonArray();
    jsonArray84.add((java.lang.Boolean)true);
    jsonArray49.addAll(jsonArray84);
    com.google.gson.JsonElement jsonElement88 = gson43.toJsonTree((java.lang.Object)jsonArray49);
    com.google.gson.JsonElement jsonElement89 = jsonArray0.set((int)(byte)0, (com.google.gson.JsonElement)jsonArray49);
    com.google.gson.JsonArray jsonArray90 = jsonArray49.getAsJsonArray();
    // The following exception was thrown during execution in test generation
    try {
    float f91 = jsonArray49.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1"+ "'", str59.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "1"+ "'", str75.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray90);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test266"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder4.serializeNulls();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test267"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    boolean b20 = jsonArray15.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    int i27 = jsonPrimitive22.getAsInt();
    boolean b28 = jsonPrimitive22.getAsBoolean();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive22);
    int i30 = jsonArray15.size();
    short s31 = jsonArray15.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    boolean b36 = jsonPrimitive33.isBoolean();
    boolean b37 = jsonArray15.remove((com.google.gson.JsonElement)jsonPrimitive33);
    jsonArray15.add((java.lang.Number)(byte)10);
    java.lang.String str40 = gson7.toJson((java.lang.Object)jsonArray15);
    java.lang.String str41 = jsonArray15.getAsString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement43 = jsonArray15.get(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s31 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[10]"+ "'", str40.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "10"+ "'", str41.equals("10"));

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test268"); }


    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException4);
    java.lang.Throwable[] throwable_array6 = jsonParseException2.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException2);
    com.google.gson.stream.MalformedJsonException malformedJsonException10 = new com.google.gson.stream.MalformedJsonException("1");
    java.lang.Throwable throwable12 = null;
    com.google.gson.JsonParseException jsonParseException13 = new com.google.gson.JsonParseException("", throwable12);
    com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException13);
    malformedJsonException10.addSuppressed((java.lang.Throwable)jsonParseException13);
    com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("0", (java.lang.Throwable)malformedJsonException10);
    malformedJsonException7.addSuppressed((java.lang.Throwable)malformedJsonException10);
    com.google.gson.JsonParseException jsonParseException18 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test269"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.JsonArray jsonArray35 = jsonObject18.getAsJsonArray("4");
    com.google.gson.JsonObject jsonObject37 = jsonObject18.getAsJsonObject("");
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d41 = jsonPrimitive40.getAsDouble();
    boolean b42 = jsonPrimitive40.isJsonObject();
    byte byte43 = jsonPrimitive40.getAsByte();
    int i44 = jsonPrimitive40.getAsInt();
    java.math.BigInteger bigInteger45 = jsonPrimitive40.getAsBigInteger();
    java.lang.String str46 = jsonPrimitive40.toString();
    // The following exception was thrown during execution in test generation
    try {
    jsonObject37.add("[\"4\"]", (com.google.gson.JsonElement)jsonPrimitive40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d41 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte43 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "\"4\""+ "'", str46.equals("\"4\""));

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test270"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException("true");
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException("true", (java.lang.Throwable)malformedJsonException2);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test271"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException1 = new com.google.gson.stream.MalformedJsonException("null");

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test272"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive16 = jsonObject0.getAsJsonPrimitive("null");
    com.google.gson.JsonArray jsonArray18 = jsonObject0.getAsJsonArray("\"4\"");
    // The following exception was thrown during execution in test generation
    try {
    byte byte19 = jsonArray18.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test273"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy41 = gson7.fieldNamingStrategy();
    com.google.gson.JsonNull jsonNull42 = new com.google.gson.JsonNull();
    boolean b44 = jsonNull42.equals((java.lang.Object)(-1L));
    com.google.gson.JsonObject jsonObject45 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray47 = jsonObject45.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray49 = jsonObject45.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive52 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b53 = jsonPrimitive52.isString();
    java.lang.Number number54 = jsonPrimitive52.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive55 = jsonPrimitive52.getAsJsonPrimitive();
    jsonObject45.add("hi!", (com.google.gson.JsonElement)jsonPrimitive55);
    boolean b57 = jsonObject45.isJsonArray();
    com.google.gson.JsonElement jsonElement59 = jsonObject45.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive61 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d62 = jsonPrimitive61.getAsDouble();
    boolean b63 = jsonPrimitive61.isBoolean();
    boolean b64 = jsonObject45.equals((java.lang.Object)b63);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement65 = jsonObject45.entrySet();
    com.google.gson.JsonArray jsonArray67 = jsonObject45.getAsJsonArray("1");
    int i68 = jsonObject45.size();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement69 = jsonObject45.entrySet();
    boolean b70 = jsonNull42.equals((java.lang.Object)set_entry_str_jsonElement69);
    com.google.gson.GsonBuilder gsonBuilder71 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder72 = gsonBuilder71.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder73 = gsonBuilder71.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder74 = gsonBuilder71.setLenient();
    boolean b75 = jsonNull42.equals((java.lang.Object)gsonBuilder71);
    java.lang.reflect.Type type76 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException77 = gson7.fromJson((com.google.gson.JsonElement)jsonNull42, type76);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number54 + "' != '" + 1+ "'", number54.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d62 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test274"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    java.lang.Class<java.lang.reflect.Type> cls5 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type6 = gson4.getAdapter(cls5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test275"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    boolean b4 = jsonPrimitive1.isNumber();
    byte byte5 = jsonPrimitive1.getAsByte();
    int i6 = jsonPrimitive1.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte5 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test276"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    java.lang.String str11 = gson7.toString();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy15 = null;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.addSerializationExclusionStrategy(exclusionStrategy15);
    com.google.gson.ExclusionStrategy exclusionStrategy17 = null;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder14.addSerializationExclusionStrategy(exclusionStrategy17);
    com.google.gson.Gson gson19 = gsonBuilder14.create();
    boolean b20 = gson19.serializeNulls();
    boolean b21 = gson19.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    java.lang.Number number27 = jsonPrimitive23.getAsNumber();
    long long28 = jsonPrimitive23.getAsLong();
    java.lang.String str29 = gson19.toJson((java.lang.Object)jsonPrimitive23);
    com.google.gson.JsonObject jsonObject30 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray32 = jsonObject30.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray34 = jsonObject30.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b38 = jsonPrimitive37.isString();
    java.lang.Number number39 = jsonPrimitive37.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive40 = jsonPrimitive37.getAsJsonPrimitive();
    jsonObject30.add("hi!", (com.google.gson.JsonElement)jsonPrimitive40);
    boolean b42 = jsonObject30.isJsonArray();
    com.google.gson.JsonElement jsonElement44 = jsonObject30.get("hi!");
    java.lang.String str45 = gson19.toJson((com.google.gson.JsonElement)jsonObject30);
    boolean b46 = gson19.serializeNulls();
    com.google.gson.internal.Excluder excluder47 = gson19.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long48 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long49 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder47, typetoken_long48);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long28 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number39 + "' != '" + 1+ "'", number39.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "{\"hi!\":1}"+ "'", str45.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder47);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test277"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    java.math.BigInteger bigInteger23 = jsonArray8.getAsBigInteger();
    com.google.gson.JsonArray jsonArray24 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder25 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.setLenient();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder25.excludeFieldsWithoutExposeAnnotation();
    boolean b29 = jsonArray24.equals((java.lang.Object)gsonBuilder25);
    com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b32 = jsonPrimitive31.isString();
    boolean b33 = jsonPrimitive31.isBoolean();
    java.lang.String str34 = jsonPrimitive31.getAsString();
    boolean b35 = jsonPrimitive31.isJsonObject();
    int i36 = jsonPrimitive31.getAsInt();
    boolean b37 = jsonPrimitive31.getAsBoolean();
    jsonArray24.add((com.google.gson.JsonElement)jsonPrimitive31);
    char char39 = jsonArray24.getAsCharacter();
    com.google.gson.JsonArray jsonArray40 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder41 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder41.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder41.setLenient();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder41.excludeFieldsWithoutExposeAnnotation();
    boolean b45 = jsonArray40.equals((java.lang.Object)gsonBuilder41);
    com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b48 = jsonPrimitive47.isString();
    boolean b49 = jsonPrimitive47.isBoolean();
    java.lang.String str50 = jsonPrimitive47.getAsString();
    boolean b51 = jsonPrimitive47.isJsonObject();
    int i52 = jsonPrimitive47.getAsInt();
    boolean b53 = jsonPrimitive47.getAsBoolean();
    jsonArray40.add((com.google.gson.JsonElement)jsonPrimitive47);
    jsonArray24.addAll(jsonArray40);
    double d56 = jsonArray40.getAsDouble();
    jsonArray8.addAll(jsonArray40);
    short s58 = jsonArray40.getAsShort();
    com.google.gson.JsonArray jsonArray59 = jsonArray40.getAsJsonArray();
    java.lang.Throwable throwable61 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException62 = new com.google.gson.stream.MalformedJsonException(throwable61);
    com.google.gson.stream.MalformedJsonException malformedJsonException63 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException62);
    java.lang.Throwable[] throwable_array64 = malformedJsonException62.getSuppressed();
    com.google.gson.JsonParseException jsonParseException65 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException62);
    boolean b66 = jsonArray59.equals((java.lang.Object)malformedJsonException62);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str67 = gson7.toJson((java.lang.Object)malformedJsonException62);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "1"+ "'", str34.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char39 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "1"+ "'", str50.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d56 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s58 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test278"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.generateNonExecutableJson();
    com.google.gson.ExclusionStrategy exclusionStrategy10 = null;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder5.addDeserializationExclusionStrategy(exclusionStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test279"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    java.lang.String str9 = gson7.toString();
    com.google.gson.JsonElement jsonElement10 = null;
    com.google.gson.stream.JsonWriter jsonWriter11 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(jsonElement10, jsonWriter11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test280"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    int[] i_array11 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy14 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLongSerializationPolicy(longSerializationPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy14);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder6.setDateFormat((int)(byte)4, 4);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setDateFormat((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test281"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    boolean b20 = jsonArray15.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    int i27 = jsonPrimitive22.getAsInt();
    boolean b28 = jsonPrimitive22.getAsBoolean();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive22);
    java.math.BigInteger bigInteger30 = jsonArray15.getAsBigInteger();
    com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    boolean b36 = jsonArray31.equals((java.lang.Object)gsonBuilder32);
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b39 = jsonPrimitive38.isString();
    boolean b40 = jsonPrimitive38.isBoolean();
    java.lang.String str41 = jsonPrimitive38.getAsString();
    boolean b42 = jsonPrimitive38.isJsonObject();
    int i43 = jsonPrimitive38.getAsInt();
    boolean b44 = jsonPrimitive38.getAsBoolean();
    jsonArray31.add((com.google.gson.JsonElement)jsonPrimitive38);
    char char46 = jsonArray31.getAsCharacter();
    com.google.gson.JsonArray jsonArray47 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder48 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder48.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder48.setLenient();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder48.excludeFieldsWithoutExposeAnnotation();
    boolean b52 = jsonArray47.equals((java.lang.Object)gsonBuilder48);
    com.google.gson.JsonPrimitive jsonPrimitive54 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b55 = jsonPrimitive54.isString();
    boolean b56 = jsonPrimitive54.isBoolean();
    java.lang.String str57 = jsonPrimitive54.getAsString();
    boolean b58 = jsonPrimitive54.isJsonObject();
    int i59 = jsonPrimitive54.getAsInt();
    boolean b60 = jsonPrimitive54.getAsBoolean();
    jsonArray47.add((com.google.gson.JsonElement)jsonPrimitive54);
    jsonArray31.addAll(jsonArray47);
    double d63 = jsonArray47.getAsDouble();
    jsonArray15.addAll(jsonArray47);
    com.google.gson.GsonBuilder gsonBuilder65 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder66 = gsonBuilder65.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder65.setLenient();
    int[] i_array69 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder70 = gsonBuilder67.excludeFieldsWithModifiers(i_array69);
    boolean b71 = jsonArray15.equals((java.lang.Object)gsonBuilder67);
    boolean b72 = jsonArray0.equals((java.lang.Object)b71);
    char char73 = jsonArray0.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "1"+ "'", str41.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char46 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "1"+ "'", str57.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d63 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char73 == '1');

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test282"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.JsonPrimitive jsonPrimitive6 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i7 = jsonPrimitive6.getAsInt();
    boolean b8 = jsonPrimitive6.isString();
    short s9 = jsonPrimitive6.getAsShort();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson4.toJson((java.lang.Object)s9, type10, appendable11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test283"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addDeserializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.ExclusionStrategy exclusionStrategy7 = null;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test284"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.enableComplexMapKeySerialization();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test285"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.Object obj12 = null;
    java.lang.String str13 = gson7.toJson(obj12);
    java.io.Reader reader14 = null;
    java.lang.Class<int[]> cls15 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array16 = gson7.fromJson(reader14, cls15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null"+ "'", str13.equals("null"));

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test286"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    java.lang.Number number5 = jsonPrimitive1.getAsNumber();
    long long6 = jsonPrimitive1.getAsLong();
    java.lang.Number number7 = jsonPrimitive1.getAsNumber();
    java.math.BigInteger bigInteger8 = jsonPrimitive1.getAsBigInteger();
    char char9 = jsonPrimitive1.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number5 + "' != '" + 1+ "'", number5.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number7 + "' != '" + 1+ "'", number7.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '1');

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test287"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.Gson gson5 = gsonBuilder4.create();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy17 = null;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.addSerializationExclusionStrategy(exclusionStrategy17);
    com.google.gson.ExclusionStrategy exclusionStrategy19 = null;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder16.addSerializationExclusionStrategy(exclusionStrategy19);
    com.google.gson.Gson gson21 = gsonBuilder16.create();
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    java.math.BigDecimal bigDecimal28 = jsonPrimitive23.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement29 = gson21.toJsonTree((java.lang.Object)jsonPrimitive23);
    com.google.gson.internal.Excluder excluder30 = gson21.excluder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder13.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder30);
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder6.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder30);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setDateFormat("com.google.gson.stream.MalformedJsonException: hi!");
    java.lang.Appendable appendable36 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson5.toJson((java.lang.Object)gsonBuilder33, appendable36);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test288"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException1 = new com.google.gson.stream.MalformedJsonException("0");
    java.lang.String str2 = malformedJsonException1.toString();
    java.lang.Throwable[] throwable_array3 = malformedJsonException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "com.google.gson.stream.MalformedJsonException: 0"+ "'", str2.equals("com.google.gson.stream.MalformedJsonException: 0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array3);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test289"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    int i23 = jsonArray8.size();
    short s24 = jsonArray8.getAsShort();
    int i25 = jsonArray8.getAsInt();
    com.google.gson.JsonElement jsonElement26 = gson6.toJsonTree((java.lang.Object)jsonArray8);
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d29 = jsonPrimitive28.getAsDouble();
    boolean b30 = jsonPrimitive28.isBoolean();
    boolean b31 = jsonPrimitive28.isJsonArray();
    java.lang.String str32 = gson6.toJson((com.google.gson.JsonElement)jsonPrimitive28);
    char char33 = jsonPrimitive28.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "\"4\""+ "'", str32.equals("\"4\""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char33 == '4');

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test290"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls3 = null;
    com.google.gson.JsonPrimitive jsonPrimitive5 = new com.google.gson.JsonPrimitive("1");
    double d6 = jsonPrimitive5.getAsDouble();
    float f7 = jsonPrimitive5.getAsFloat();
    java.math.BigInteger bigInteger8 = jsonPrimitive5.getAsBigInteger();
    double d9 = jsonPrimitive5.getAsDouble();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder0.registerTypeHierarchyAdapter(cls3, (java.lang.Object)jsonPrimitive5);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f7 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 1.0d);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test291"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    java.lang.Class<java.math.BigDecimal> cls18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal19 = gson7.fromJson("1", cls18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test292"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isJsonObject();
    byte byte4 = jsonPrimitive1.getAsByte();
    int i5 = jsonPrimitive1.getAsInt();
    boolean b6 = jsonPrimitive1.isBoolean();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test293"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    java.lang.String str5 = jsonPrimitive1.getAsString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonNull jsonNull6 = jsonPrimitive1.getAsJsonNull();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1"+ "'", str5.equals("1"));

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test294"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    float f4 = jsonPrimitive1.getAsFloat();
    double d5 = jsonPrimitive1.getAsDouble();
    float f6 = jsonPrimitive1.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f6 == 1.0f);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test295"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setDateFormat(100);
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.addSerializationExclusionStrategy(exclusionStrategy9);
    com.google.gson.GsonBuilder gsonBuilder11 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.setLenient();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder11.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder11.setVersion((double)'#');
    com.google.gson.Gson gson17 = gsonBuilder16.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy18 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy18);
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder10.setFieldNamingPolicy(fieldNamingPolicy18);
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test296"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder13 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive("com.google.gson.stream.MalformedJsonException: 0");
    java.lang.Appendable appendable16 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive15, appendable16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder13);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test297"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder2.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy8 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array9 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy8 };
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder2.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder1.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder1.setFieldNamingStrategy(fieldNamingStrategy12);
    com.google.gson.ExclusionStrategy exclusionStrategy14 = null;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder1.addSerializationExclusionStrategy(exclusionStrategy14);
    java.lang.reflect.Type type16 = null;
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy21 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.setFieldNamingPolicy(fieldNamingPolicy21);
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder24.setVersion((double)'#');
    com.google.gson.Gson gson30 = gsonBuilder29.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy31 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy31);
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder35.disableInnerClassSerialization();
    int[] i_array38 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder35.excludeFieldsWithModifiers(i_array38);
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder32.excludeFieldsWithModifiers(i_array38);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy41 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder32.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy41);
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder23.setFieldNamingPolicy(fieldNamingPolicy41);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder15.registerTypeAdapter(type16, (java.lang.Object)gsonBuilder23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test298"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder8.excludeFieldsWithModifiers(i_array14);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy17 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder8.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy17);
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    int[] i_array24 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder21.excludeFieldsWithModifiers(i_array24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder8.excludeFieldsWithModifiers(i_array24);
    com.google.gson.LongSerializationPolicy longSerializationPolicy27 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement29 = longSerializationPolicy27.serialize((java.lang.Long)(-1L));
    com.google.gson.JsonElement jsonElement31 = longSerializationPolicy27.serialize((java.lang.Long)0L);
    com.google.gson.JsonElement jsonElement33 = longSerializationPolicy27.serialize((java.lang.Long)100L);
    com.google.gson.JsonElement jsonElement35 = longSerializationPolicy27.serialize((java.lang.Long)(-1L));
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder26.setLongSerializationPolicy(longSerializationPolicy27);
    java.lang.reflect.Type type37 = null;
    com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder39 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.setLenient();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder39.excludeFieldsWithoutExposeAnnotation();
    boolean b43 = jsonArray38.equals((java.lang.Object)gsonBuilder39);
    com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b46 = jsonPrimitive45.isString();
    boolean b47 = jsonPrimitive45.isBoolean();
    java.lang.String str48 = jsonPrimitive45.getAsString();
    boolean b49 = jsonPrimitive45.isJsonObject();
    int i50 = jsonPrimitive45.getAsInt();
    boolean b51 = jsonPrimitive45.getAsBoolean();
    jsonArray38.add((com.google.gson.JsonElement)jsonPrimitive45);
    int i53 = jsonArray38.size();
    int i54 = jsonArray38.getAsInt();
    boolean b55 = jsonArray38.isJsonPrimitive();
    java.lang.String str56 = jsonArray38.toString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder36.registerTypeAdapter(type37, (java.lang.Object)jsonArray38);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "1"+ "'", str48.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[1]"+ "'", str56.equals("[1]"));

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test299"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy6 = null;
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.addDeserializationExclusionStrategy(exclusionStrategy6);
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy11 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder8.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder8.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy15 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy15);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setDateFormat("1");
    com.google.gson.FieldNamingPolicy fieldNamingPolicy19 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.setFieldNamingPolicy(fieldNamingPolicy19);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder5.setFieldNamingPolicy(fieldNamingPolicy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test300"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isBoolean();
    boolean b4 = jsonPrimitive1.isJsonArray();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    double d6 = jsonPrimitive1.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 4.0d);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test301"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive52 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d53 = jsonPrimitive52.getAsDouble();
    boolean b54 = jsonPrimitive52.isJsonObject();
    float f55 = jsonPrimitive52.getAsFloat();
    java.math.BigInteger bigInteger56 = jsonPrimitive52.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive57 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger56);
    jsonArray32.add((java.lang.Number)bigInteger56);
    jsonArray32.add((java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive62 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b63 = jsonPrimitive62.getAsBoolean();
    java.lang.String str64 = jsonPrimitive62.getAsString();
    java.math.BigInteger bigInteger65 = jsonPrimitive62.getAsBigInteger();
    jsonArray32.add((java.lang.Number)bigInteger65);
    com.google.gson.JsonArray jsonArray67 = new com.google.gson.JsonArray();
    jsonArray32.addAll(jsonArray67);
    com.google.gson.GsonBuilder gsonBuilder70 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder71 = gsonBuilder70.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder72 = gsonBuilder70.setLenient();
    com.google.gson.GsonBuilder gsonBuilder73 = gsonBuilder70.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder76 = gsonBuilder70.setDateFormat((int)'1', (int)'4');
    com.google.gson.GsonBuilder gsonBuilder77 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder77.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder79 = gsonBuilder77.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy80 = null;
    com.google.gson.GsonBuilder gsonBuilder81 = gsonBuilder79.addSerializationExclusionStrategy(exclusionStrategy80);
    com.google.gson.ExclusionStrategy exclusionStrategy82 = null;
    com.google.gson.GsonBuilder gsonBuilder83 = gsonBuilder79.addSerializationExclusionStrategy(exclusionStrategy82);
    com.google.gson.GsonBuilder gsonBuilder84 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder85 = gsonBuilder84.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder86 = gsonBuilder84.setLenient();
    int[] i_array88 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder89 = gsonBuilder86.excludeFieldsWithModifiers(i_array88);
    com.google.gson.GsonBuilder gsonBuilder90 = gsonBuilder86.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy91 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder92 = gsonBuilder90.setLongSerializationPolicy(longSerializationPolicy91);
    com.google.gson.GsonBuilder gsonBuilder93 = gsonBuilder83.setLongSerializationPolicy(longSerializationPolicy91);
    com.google.gson.GsonBuilder gsonBuilder94 = gsonBuilder76.setLongSerializationPolicy(longSerializationPolicy91);
    com.google.gson.JsonElement jsonElement96 = longSerializationPolicy91.serialize((java.lang.Long)1L);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement97 = jsonArray32.set((int)(byte)-1, jsonElement96);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d53 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f55 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "1"+ "'", str64.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement96);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test302"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setDateFormat(100);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls9 = null;
    java.lang.Object obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.registerTypeHierarchyAdapter(cls9, obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test303"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    java.lang.Number number18 = jsonArray0.getAsNumber();
    com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    boolean b24 = jsonArray19.equals((java.lang.Object)gsonBuilder20);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    int i31 = jsonPrimitive26.getAsInt();
    boolean b32 = jsonPrimitive26.getAsBoolean();
    jsonArray19.add((com.google.gson.JsonElement)jsonPrimitive26);
    java.math.BigInteger bigInteger34 = jsonArray19.getAsBigInteger();
    int i35 = jsonArray19.getAsInt();
    com.google.gson.JsonNull jsonNull36 = new com.google.gson.JsonNull();
    boolean b37 = jsonArray19.contains((com.google.gson.JsonElement)jsonNull36);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement38 = jsonArray19.iterator();
    java.lang.Number number39 = jsonArray19.getAsNumber();
    char char40 = jsonArray19.getAsCharacter();
    jsonArray0.addAll(jsonArray19);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger42 = jsonArray0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number18 + "' != '" + 1+ "'", number18.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number39 + "' != '" + 1+ "'", number39.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '1');

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test304"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    double d4 = jsonPrimitive1.getAsDouble();
    com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    boolean b10 = jsonArray5.equals((java.lang.Object)gsonBuilder6);
    com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    boolean b16 = jsonArray11.equals((java.lang.Object)gsonBuilder12);
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    int i23 = jsonPrimitive18.getAsInt();
    boolean b24 = jsonPrimitive18.getAsBoolean();
    jsonArray11.add((com.google.gson.JsonElement)jsonPrimitive18);
    jsonArray5.addAll(jsonArray11);
    java.math.BigInteger bigInteger27 = jsonArray11.getAsBigInteger();
    java.math.BigInteger bigInteger28 = jsonArray11.getAsBigInteger();
    jsonArray11.add((java.lang.Number)(byte)0);
    com.google.gson.JsonObject jsonObject31 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray33 = jsonObject31.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray35 = jsonObject31.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b39 = jsonPrimitive38.isString();
    java.lang.Number number40 = jsonPrimitive38.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive41 = jsonPrimitive38.getAsJsonPrimitive();
    jsonObject31.add("hi!", (com.google.gson.JsonElement)jsonPrimitive41);
    boolean b43 = jsonObject31.isJsonArray();
    com.google.gson.JsonElement jsonElement45 = jsonObject31.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d48 = jsonPrimitive47.getAsDouble();
    boolean b49 = jsonPrimitive47.isBoolean();
    boolean b50 = jsonObject31.equals((java.lang.Object)b49);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement51 = jsonObject31.entrySet();
    jsonObject31.addProperty("1", (java.lang.Character)'4');
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement55 = jsonObject31.entrySet();
    boolean b56 = jsonArray11.equals((java.lang.Object)jsonObject31);
    com.google.gson.JsonObject jsonObject57 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray59 = jsonObject57.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray61 = jsonObject57.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    java.lang.Number number66 = jsonPrimitive64.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive67 = jsonPrimitive64.getAsJsonPrimitive();
    jsonObject57.add("hi!", (com.google.gson.JsonElement)jsonPrimitive67);
    boolean b69 = jsonObject57.isJsonArray();
    com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive73 = jsonPrimitive72.getAsJsonPrimitive();
    jsonObject57.add("com.google.gson.stream.MalformedJsonException: 0", (com.google.gson.JsonElement)jsonPrimitive73);
    boolean b75 = jsonObject57.isJsonNull();
    boolean b76 = jsonArray11.remove((com.google.gson.JsonElement)jsonObject57);
    boolean b77 = jsonPrimitive1.equals((java.lang.Object)b76);
    double d78 = jsonPrimitive1.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number40 + "' != '" + 1+ "'", number40.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number66 + "' != '" + 1+ "'", number66.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d78 == 1.0d);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test305"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement20 = jsonArray0.iterator();
    short s21 = jsonArray0.getAsShort();
    char char22 = jsonArray0.getAsCharacter();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonArray0.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s21 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '1');

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test306"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy4 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.setFieldNamingPolicy(fieldNamingPolicy4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    int[] i_array7 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.excludeFieldsWithModifiers(i_array7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setVersion((double)0.0f);
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.addSerializationExclusionStrategy(exclusionStrategy23);
    com.google.gson.ExclusionStrategy exclusionStrategy25 = null;
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder22.addSerializationExclusionStrategy(exclusionStrategy25);
    com.google.gson.Gson gson27 = gsonBuilder22.create();
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b30 = jsonPrimitive29.isString();
    boolean b31 = jsonPrimitive29.isBoolean();
    java.lang.String str32 = jsonPrimitive29.getAsString();
    boolean b33 = jsonPrimitive29.isJsonObject();
    java.math.BigDecimal bigDecimal34 = jsonPrimitive29.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement35 = gson27.toJsonTree((java.lang.Object)jsonPrimitive29);
    com.google.gson.internal.Excluder excluder36 = gson27.excluder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder19.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder36);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder12.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder36);
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder11.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder36);
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.generateNonExecutableJson();
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls41 = null;
    com.google.gson.GsonBuilder gsonBuilder42 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder42.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder42.setLenient();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder42.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder46 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder46.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder46.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder48.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy53 = null;
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.addSerializationExclusionStrategy(exclusionStrategy53);
    com.google.gson.ExclusionStrategy exclusionStrategy55 = null;
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder52.addSerializationExclusionStrategy(exclusionStrategy55);
    com.google.gson.Gson gson57 = gsonBuilder52.create();
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    boolean b61 = jsonPrimitive59.isBoolean();
    java.lang.String str62 = jsonPrimitive59.getAsString();
    boolean b63 = jsonPrimitive59.isJsonObject();
    java.math.BigDecimal bigDecimal64 = jsonPrimitive59.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement65 = gson57.toJsonTree((java.lang.Object)jsonPrimitive59);
    com.google.gson.internal.Excluder excluder66 = gson57.excluder();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder49.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder66);
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder42.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder66);
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder42.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder71 = gsonBuilder69.setDateFormat("com.google.gson.stream.MalformedJsonException: hi!");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder72 = gsonBuilder40.registerTypeHierarchyAdapter(cls41, (java.lang.Object)gsonBuilder69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "1"+ "'", str32.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "1"+ "'", str62.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder71);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test307"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setDateFormat("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setDateFormat((-1));
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.enableComplexMapKeySerialization();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test308"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy11 = null;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.addSerializationExclusionStrategy(exclusionStrategy11);
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder10.addSerializationExclusionStrategy(exclusionStrategy13);
    com.google.gson.Gson gson15 = gsonBuilder10.create();
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b18 = jsonPrimitive17.isString();
    boolean b19 = jsonPrimitive17.isBoolean();
    java.lang.String str20 = jsonPrimitive17.getAsString();
    boolean b21 = jsonPrimitive17.isJsonObject();
    java.math.BigDecimal bigDecimal22 = jsonPrimitive17.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement23 = gson15.toJsonTree((java.lang.Object)jsonPrimitive17);
    com.google.gson.internal.Excluder excluder24 = gson15.excluder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder7.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder0.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder24);
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy30 = null;
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.addSerializationExclusionStrategy(exclusionStrategy30);
    com.google.gson.ExclusionStrategy exclusionStrategy32 = null;
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder29.addSerializationExclusionStrategy(exclusionStrategy32);
    com.google.gson.Gson gson34 = gsonBuilder29.create();
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    java.lang.Number number38 = jsonPrimitive36.getAsNumber();
    java.math.BigDecimal bigDecimal39 = jsonPrimitive36.getAsBigDecimal();
    long long40 = jsonPrimitive36.getAsLong();
    boolean b41 = jsonPrimitive36.isNumber();
    java.lang.String str42 = gson34.toJson((com.google.gson.JsonElement)jsonPrimitive36);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy43 = gson34.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder26.setFieldNamingStrategy(fieldNamingStrategy43);
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder44.disableInnerClassSerialization();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "1"+ "'", str20.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number38 + "' != '" + 1+ "'", number38.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test309"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy39 = null;
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy39);
    com.google.gson.ExclusionStrategy exclusionStrategy41 = null;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy41);
    com.google.gson.Gson gson43 = gsonBuilder38.create();
    java.lang.String str44 = gson43.toString();
    java.lang.reflect.Type type46 = null;
    java.lang.Appendable appendable47 = gson43.fromJson("", type46);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy48 = gson43.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setLenient();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder50.excludeFieldsWithoutExposeAnnotation();
    boolean b54 = jsonArray49.equals((java.lang.Object)gsonBuilder50);
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    boolean b58 = jsonPrimitive56.isBoolean();
    java.lang.String str59 = jsonPrimitive56.getAsString();
    boolean b60 = jsonPrimitive56.isJsonObject();
    int i61 = jsonPrimitive56.getAsInt();
    boolean b62 = jsonPrimitive56.getAsBoolean();
    jsonArray49.add((com.google.gson.JsonElement)jsonPrimitive56);
    int i64 = jsonArray49.size();
    com.google.gson.JsonArray jsonArray65 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder66 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder66.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder66.setLenient();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder66.excludeFieldsWithoutExposeAnnotation();
    boolean b70 = jsonArray65.equals((java.lang.Object)gsonBuilder66);
    com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b73 = jsonPrimitive72.isString();
    boolean b74 = jsonPrimitive72.isBoolean();
    java.lang.String str75 = jsonPrimitive72.getAsString();
    boolean b76 = jsonPrimitive72.isJsonObject();
    int i77 = jsonPrimitive72.getAsInt();
    boolean b78 = jsonPrimitive72.getAsBoolean();
    jsonArray65.add((com.google.gson.JsonElement)jsonPrimitive72);
    char char80 = jsonArray65.getAsCharacter();
    com.google.gson.JsonElement jsonElement81 = null;
    jsonArray65.add(jsonElement81);
    jsonArray49.addAll(jsonArray65);
    com.google.gson.JsonArray jsonArray84 = new com.google.gson.JsonArray();
    jsonArray84.add((java.lang.Boolean)true);
    jsonArray49.addAll(jsonArray84);
    com.google.gson.JsonElement jsonElement88 = gson43.toJsonTree((java.lang.Object)jsonArray49);
    com.google.gson.JsonElement jsonElement89 = jsonArray0.set((int)(byte)0, (com.google.gson.JsonElement)jsonArray49);
    // The following exception was thrown during execution in test generation
    try {
    short s90 = jsonArray49.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1"+ "'", str59.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "1"+ "'", str75.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement89);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test310"); }


    com.google.gson.JsonNull jsonNull0 = com.google.gson.JsonNull.INSTANCE;
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException5 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException3.addSuppressed((java.lang.Throwable)jsonParseException5);
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("null", (java.lang.Throwable)jsonParseException3);
    java.lang.String str8 = jsonParseException3.toString();
    boolean b9 = jsonNull0.equals((java.lang.Object)str8);
    // The following exception was thrown during execution in test generation
    try {
    short s10 = jsonNull0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "com.google.gson.JsonParseException: hi!"+ "'", str8.equals("com.google.gson.JsonParseException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test311"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setLenient();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder4.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder11 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.setLenient();
    int[] i_array15 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder13.excludeFieldsWithModifiers(i_array15);
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder10.excludeFieldsWithModifiers(i_array15);
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder3.excludeFieldsWithModifiers(i_array15);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.disableHtmlEscaping();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test312"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException("hi!");
    java.lang.String str3 = malformedJsonException2.toString();
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException2);
    java.lang.String str5 = malformedJsonException2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "com.google.gson.stream.MalformedJsonException: hi!"+ "'", str3.equals("com.google.gson.stream.MalformedJsonException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "com.google.gson.stream.MalformedJsonException: hi!"+ "'", str5.equals("com.google.gson.stream.MalformedJsonException: hi!"));

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test313"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy10 = gson7.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive13 = jsonPrimitive12.getAsJsonPrimitive();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive13.getAsBigDecimal();
    com.google.gson.stream.JsonWriter jsonWriter15 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive13, jsonWriter15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test314"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy16 = gson7.fieldNamingStrategy();
    boolean b17 = gson7.serializeNulls();
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive34 = jsonObject18.getAsJsonPrimitive("null");
    com.google.gson.JsonArray jsonArray36 = jsonObject18.getAsJsonArray("\"4\"");
    boolean b38 = jsonObject18.has("com.google.gson.stream.MalformedJsonException: 0");
    java.lang.reflect.Type type39 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException40 = gson7.fromJson((com.google.gson.JsonElement)jsonObject18, type39);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test315"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("\"4\"");

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test316"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.ExclusionStrategy exclusionStrategy2 = null;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.addSerializationExclusionStrategy(exclusionStrategy2);
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy7 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement9 = longSerializationPolicy7.serialize((java.lang.Long)0L);
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder0.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.addSerializationExclusionStrategy(exclusionStrategy23);
    com.google.gson.ExclusionStrategy exclusionStrategy25 = null;
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder22.addSerializationExclusionStrategy(exclusionStrategy25);
    com.google.gson.Gson gson27 = gsonBuilder22.create();
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b30 = jsonPrimitive29.isString();
    boolean b31 = jsonPrimitive29.isBoolean();
    java.lang.String str32 = jsonPrimitive29.getAsString();
    boolean b33 = jsonPrimitive29.isJsonObject();
    java.math.BigDecimal bigDecimal34 = jsonPrimitive29.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement35 = gson27.toJsonTree((java.lang.Object)jsonPrimitive29);
    com.google.gson.internal.Excluder excluder36 = gson27.excluder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder19.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder36);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder12.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder36);
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder0.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder36);
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder0.enableComplexMapKeySerialization();
    java.lang.reflect.Type type41 = null;
    com.google.gson.JsonArray jsonArray42 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder43 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder43.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder43.setLenient();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder43.excludeFieldsWithoutExposeAnnotation();
    boolean b47 = jsonArray42.equals((java.lang.Object)gsonBuilder43);
    com.google.gson.JsonPrimitive jsonPrimitive49 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b50 = jsonPrimitive49.isString();
    boolean b51 = jsonPrimitive49.isBoolean();
    java.lang.String str52 = jsonPrimitive49.getAsString();
    boolean b53 = jsonPrimitive49.isJsonObject();
    int i54 = jsonPrimitive49.getAsInt();
    boolean b55 = jsonPrimitive49.getAsBoolean();
    jsonArray42.add((com.google.gson.JsonElement)jsonPrimitive49);
    int i57 = jsonArray42.size();
    int i58 = jsonArray42.getAsInt();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder40.registerTypeAdapter(type41, (java.lang.Object)jsonArray42);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "1"+ "'", str32.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "1"+ "'", str52.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test317"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.Gson gson2 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder3 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy6 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder3.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy6);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder3.enableComplexMapKeySerialization();
    com.google.gson.Gson gson9 = gsonBuilder3.create();
    boolean b10 = gson9.htmlSafe();
    com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    boolean b16 = jsonArray11.equals((java.lang.Object)gsonBuilder12);
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    int i23 = jsonPrimitive18.getAsInt();
    boolean b24 = jsonPrimitive18.getAsBoolean();
    jsonArray11.add((com.google.gson.JsonElement)jsonPrimitive18);
    int i26 = jsonArray11.size();
    short s27 = jsonArray11.getAsShort();
    int i28 = jsonArray11.getAsInt();
    com.google.gson.JsonElement jsonElement29 = gson9.toJsonTree((java.lang.Object)jsonArray11);
    byte byte30 = jsonArray11.getAsByte();
    java.lang.Appendable appendable31 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson2.toJson((com.google.gson.JsonElement)jsonArray11, appendable31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s27 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte30 == (byte)1);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test318"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    java.lang.Class<java.lang.reflect.Type> cls17 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type18 = gson7.getAdapter(cls17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test319"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.serializeSpecialFloatingPointValues();
    com.google.gson.JsonElement jsonElement17 = gson6.toJsonTree((java.lang.Object)gsonBuilder16);
    java.lang.reflect.Type type19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable20 = gson6.fromJson("\"a\"", type19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement17);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test320"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b17 = jsonPrimitive16.isString();
    boolean b18 = jsonPrimitive16.isBoolean();
    java.lang.String str19 = jsonPrimitive16.getAsString();
    boolean b20 = jsonPrimitive16.isJsonObject();
    int i21 = jsonPrimitive16.getAsInt();
    char char22 = jsonPrimitive16.getAsCharacter();
    byte byte23 = jsonPrimitive16.getAsByte();
    java.lang.String str24 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive16);
    com.google.gson.JsonObject jsonObject25 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray27 = jsonObject25.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray29 = jsonObject25.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    java.lang.Number number34 = jsonPrimitive32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive35 = jsonPrimitive32.getAsJsonPrimitive();
    jsonObject25.add("hi!", (com.google.gson.JsonElement)jsonPrimitive35);
    jsonObject25.addProperty("0", (java.lang.Character)'a');
    com.google.gson.JsonPrimitive jsonPrimitive41 = jsonObject25.getAsJsonPrimitive("null");
    com.google.gson.JsonArray jsonArray43 = jsonObject25.getAsJsonArray("\"4\"");
    boolean b45 = jsonObject25.has("com.google.gson.stream.MalformedJsonException: 0");
    jsonObject25.addProperty("\"a\"", (java.lang.Boolean)true);
    java.lang.reflect.Type type49 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str50 = gson7.toJson((java.lang.Object)true, type49);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1"+ "'", str19.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte23 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number34 + "' != '" + 1+ "'", number34.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test321"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    long long52 = jsonArray32.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long52 == 1L);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test322"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    jsonArray0.add((java.lang.Character)'#');
    jsonArray0.add((java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str36 = jsonArray0.getAsString();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test323"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number32 = jsonArray0.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test324"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject18.addProperty("hi!", (java.lang.Boolean)false);
    jsonObject18.addProperty("1", (java.lang.Boolean)true);
    int i39 = jsonObject18.size();
    com.google.gson.JsonElement jsonElement40 = gson7.toJsonTree((java.lang.Object)jsonObject18);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy41 = gson7.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder42 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder42.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder42.setLenient();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder42.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder42.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder47.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder47.setDateFormat((int)'1');
    com.google.gson.Gson gson51 = gsonBuilder47.create();
    java.lang.String str52 = gson51.toString();
    com.google.gson.internal.Excluder excluder53 = gson51.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long54 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long55 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder53, typetoken_long54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder53);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test325"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Character)'a');
    java.lang.String str10 = gson6.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    // The following exception was thrown during execution in test generation
    try {
    int i11 = jsonPrimitive9.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\"a\""+ "'", str10.equals("\"a\""));

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test326"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.internal.Excluder excluder8 = gson7.excluder();
    boolean b9 = gson7.serializeNulls();
    java.io.Reader reader10 = null;
    java.lang.Class<int[]> cls11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array12 = gson7.fromJson(reader10, cls11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test327"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy7 = gson6.fieldNamingStrategy();
    boolean b8 = gson6.htmlSafe();
    com.google.gson.JsonObject jsonObject9 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray11 = jsonObject9.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray13 = jsonObject9.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b17 = jsonPrimitive16.isString();
    java.lang.Number number18 = jsonPrimitive16.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonPrimitive16.getAsJsonPrimitive();
    jsonObject9.add("hi!", (com.google.gson.JsonElement)jsonPrimitive19);
    boolean b21 = jsonObject9.isJsonPrimitive();
    java.lang.reflect.Type type22 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement23 = gson6.toJsonTree((java.lang.Object)b21, type22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number18 + "' != '" + 1+ "'", number18.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test328"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    int[] i_array11 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy14 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLongSerializationPolicy(longSerializationPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy14);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.setDateFormat(4, (int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test329"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement51 = jsonArray32.get((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test330"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive52 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d53 = jsonPrimitive52.getAsDouble();
    boolean b54 = jsonPrimitive52.isJsonObject();
    float f55 = jsonPrimitive52.getAsFloat();
    java.math.BigInteger bigInteger56 = jsonPrimitive52.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive57 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger56);
    jsonArray32.add((java.lang.Number)bigInteger56);
    // The following exception was thrown during execution in test generation
    try {
    int i59 = jsonArray32.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d53 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f55 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger56);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test331"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d54 = jsonPrimitive53.getAsDouble();
    java.lang.Number number55 = jsonPrimitive53.getAsNumber();
    jsonArray32.add(number55);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    java.math.BigInteger bigInteger72 = jsonArray57.getAsBigInteger();
    int i73 = jsonArray57.getAsInt();
    com.google.gson.JsonNull jsonNull74 = new com.google.gson.JsonNull();
    boolean b75 = jsonArray57.contains((com.google.gson.JsonElement)jsonNull74);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement76 = jsonArray57.iterator();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement77 = jsonArray57.iterator();
    int i78 = jsonArray57.getAsInt();
    com.google.gson.JsonArray jsonArray79 = new com.google.gson.JsonArray();
    jsonArray79.add((java.lang.Boolean)true);
    char char82 = jsonArray79.getAsCharacter();
    jsonArray57.addAll(jsonArray79);
    jsonArray32.addAll(jsonArray79);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal85 = jsonArray32.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char82 == 't');

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test332"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy5 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setFieldNamingPolicy(fieldNamingPolicy5);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder4.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder4.setDateFormat(2);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls10 = null;
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    boolean b13 = jsonPrimitive12.isString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder4.registerTypeHierarchyAdapter(cls10, (java.lang.Object)jsonPrimitive12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test333"); }


    java.lang.Throwable throwable4 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException(throwable4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException5);
    com.google.gson.JsonParseException jsonParseException7 = new com.google.gson.JsonParseException("hi!", (java.lang.Throwable)malformedJsonException5);
    com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("com.google.gson.JsonParseException: {\"hi!\":1}", (java.lang.Throwable)jsonParseException7);
    com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("com.google.gson.JsonParseException: hi!", (java.lang.Throwable)malformedJsonException8);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test334"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy10 = null;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy10);
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy12);
    com.google.gson.Gson gson14 = gsonBuilder9.create();
    boolean b15 = gson14.serializeNulls();
    boolean b16 = gson14.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    java.lang.Number number22 = jsonPrimitive18.getAsNumber();
    long long23 = jsonPrimitive18.getAsLong();
    java.lang.String str24 = gson14.toJson((java.lang.Object)jsonPrimitive18);
    com.google.gson.JsonObject jsonObject25 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray27 = jsonObject25.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray29 = jsonObject25.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    java.lang.Number number34 = jsonPrimitive32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive35 = jsonPrimitive32.getAsJsonPrimitive();
    jsonObject25.add("hi!", (com.google.gson.JsonElement)jsonPrimitive35);
    boolean b37 = jsonObject25.isJsonArray();
    com.google.gson.JsonElement jsonElement39 = jsonObject25.get("hi!");
    java.lang.String str40 = gson14.toJson((com.google.gson.JsonElement)jsonObject25);
    java.lang.reflect.Type type42 = null;
    java.lang.Appendable appendable43 = gson14.fromJson("", type42);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy44 = gson14.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder5.setFieldNamingStrategy(fieldNamingStrategy44);
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder45.serializeSpecialFloatingPointValues();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number34 + "' != '" + 1+ "'", number34.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "{\"hi!\":1}"+ "'", str40.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test335"); }


    com.google.gson.stream.MalformedJsonException malformedJsonException1 = new com.google.gson.stream.MalformedJsonException("");

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test336"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("10");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("\"a\"");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test337"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder5 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setLenient();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.setFieldNamingPolicy(fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setDateFormat((-1));
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLenient();
    int[] i_array17 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.excludeFieldsWithModifiers(i_array17);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder15.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy20 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLongSerializationPolicy(longSerializationPolicy20);
    com.google.gson.JsonElement jsonElement23 = longSerializationPolicy20.serialize((java.lang.Long)1L);
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder12.setLongSerializationPolicy(longSerializationPolicy20);
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder2.setLongSerializationPolicy(longSerializationPolicy20);
    java.lang.reflect.Type type26 = null;
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder29 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder29.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.setLenient();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder29.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder29.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy35 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array36 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy35 };
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder29.setExclusionStrategies(exclusionStrategy_array36);
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder28.setExclusionStrategies(exclusionStrategy_array36);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy39 = null;
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder28.setFieldNamingStrategy(fieldNamingStrategy39);
    com.google.gson.ExclusionStrategy exclusionStrategy41 = null;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder28.addSerializationExclusionStrategy(exclusionStrategy41);
    com.google.gson.ExclusionStrategy exclusionStrategy43 = null;
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder28.addDeserializationExclusionStrategy(exclusionStrategy43);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder2.registerTypeAdapter(type26, (java.lang.Object)exclusionStrategy43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test338"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("1");
    double d2 = jsonPrimitive1.getAsDouble();
    float f3 = jsonPrimitive1.getAsFloat();
    long long4 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f3 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 1L);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test339"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.enableComplexMapKeySerialization();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test340"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement18 = jsonArray0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement18);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test341"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number3 = jsonElement2.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test342"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    java.lang.reflect.Type type35 = null;
    java.lang.Appendable appendable36 = gson7.fromJson("", type35);
    java.lang.String str37 = gson7.toString();
    com.google.gson.JsonObject jsonObject38 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray40 = jsonObject38.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray42 = jsonObject38.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b46 = jsonPrimitive45.isString();
    java.lang.Number number47 = jsonPrimitive45.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive48 = jsonPrimitive45.getAsJsonPrimitive();
    jsonObject38.add("hi!", (com.google.gson.JsonElement)jsonPrimitive48);
    boolean b50 = jsonObject38.isJsonArray();
    com.google.gson.JsonObject jsonObject51 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray53 = jsonObject51.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray55 = jsonObject51.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive58 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b59 = jsonPrimitive58.isString();
    java.lang.Number number60 = jsonPrimitive58.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive61 = jsonPrimitive58.getAsJsonPrimitive();
    jsonObject51.add("hi!", (com.google.gson.JsonElement)jsonPrimitive61);
    boolean b63 = jsonObject51.isJsonArray();
    com.google.gson.JsonElement jsonElement65 = jsonObject51.get("hi!");
    boolean b66 = jsonObject38.equals((java.lang.Object)jsonElement65);
    com.google.gson.JsonObject jsonObject67 = jsonObject38.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement68 = jsonObject67.entrySet();
    int i69 = jsonObject67.size();
    jsonObject67.addProperty("1", "{\"hi!\":1}");
    com.google.gson.JsonArray jsonArray74 = jsonObject67.getAsJsonArray("com.google.gson.stream.MalformedJsonException: 0");
    com.google.gson.JsonPrimitive jsonPrimitive77 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive78 = jsonPrimitive77.getAsJsonPrimitive();
    java.math.BigDecimal bigDecimal79 = jsonPrimitive78.getAsBigDecimal();
    jsonObject67.addProperty("{\"hi!\":1}", (java.lang.Number)bigDecimal79);
    java.lang.reflect.Type type81 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str82 = gson7.toJson((java.lang.Object)"{\"hi!\":1}", type81);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number47 + "' != '" + 1+ "'", number47.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number60 + "' != '" + 1+ "'", number60.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test343"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion((double)1L);
    com.google.gson.ExclusionStrategy exclusionStrategy8 = null;
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.addSerializationExclusionStrategy(exclusionStrategy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test344"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    long long4 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 1L);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test345"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.Gson gson9 = gsonBuilder5.create();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy11 = gson9.getAdapter(typetoken_fieldNamingStrategy10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test346"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    java.lang.String str11 = gson7.toString();
    java.lang.Class<java.lang.reflect.Type> cls12 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.reflect.Type> typeadapter_type13 = gson7.getAdapter(cls12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test347"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'1');
    int i2 = jsonPrimitive1.getAsInt();
    boolean b3 = jsonPrimitive1.isString();
    char char4 = jsonPrimitive1.getAsCharacter();
    long long5 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char4 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1L);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test348"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b17 = jsonPrimitive16.isString();
    boolean b18 = jsonPrimitive16.isBoolean();
    java.lang.String str19 = jsonPrimitive16.getAsString();
    boolean b20 = jsonPrimitive16.isJsonObject();
    int i21 = jsonPrimitive16.getAsInt();
    char char22 = jsonPrimitive16.getAsCharacter();
    byte byte23 = jsonPrimitive16.getAsByte();
    java.lang.String str24 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive16);
    java.lang.String str25 = gson7.toString();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder34 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder34.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy37 = null;
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.addSerializationExclusionStrategy(exclusionStrategy37);
    com.google.gson.ExclusionStrategy exclusionStrategy39 = null;
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder36.addSerializationExclusionStrategy(exclusionStrategy39);
    com.google.gson.Gson gson41 = gsonBuilder36.create();
    com.google.gson.JsonPrimitive jsonPrimitive43 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b44 = jsonPrimitive43.isString();
    boolean b45 = jsonPrimitive43.isBoolean();
    java.lang.String str46 = jsonPrimitive43.getAsString();
    boolean b47 = jsonPrimitive43.isJsonObject();
    java.math.BigDecimal bigDecimal48 = jsonPrimitive43.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement49 = gson41.toJsonTree((java.lang.Object)jsonPrimitive43);
    com.google.gson.internal.Excluder excluder50 = gson41.excluder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder33.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder50);
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder26.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder50);
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder54 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder54.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder55.setDateFormat((int)' ', (int)(short)1);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy59 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setFieldNamingPolicy(fieldNamingPolicy59);
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder53.setFieldNamingPolicy(fieldNamingPolicy59);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str62 = gson7.toJson((java.lang.Object)gsonBuilder53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1"+ "'", str19.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte23 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "1"+ "'", str46.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test349"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy39 = null;
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy39);
    com.google.gson.ExclusionStrategy exclusionStrategy41 = null;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy41);
    com.google.gson.Gson gson43 = gsonBuilder38.create();
    java.lang.String str44 = gson43.toString();
    java.lang.reflect.Type type46 = null;
    java.lang.Appendable appendable47 = gson43.fromJson("", type46);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy48 = gson43.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setLenient();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder50.excludeFieldsWithoutExposeAnnotation();
    boolean b54 = jsonArray49.equals((java.lang.Object)gsonBuilder50);
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    boolean b58 = jsonPrimitive56.isBoolean();
    java.lang.String str59 = jsonPrimitive56.getAsString();
    boolean b60 = jsonPrimitive56.isJsonObject();
    int i61 = jsonPrimitive56.getAsInt();
    boolean b62 = jsonPrimitive56.getAsBoolean();
    jsonArray49.add((com.google.gson.JsonElement)jsonPrimitive56);
    int i64 = jsonArray49.size();
    com.google.gson.JsonArray jsonArray65 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder66 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder66.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder66.setLenient();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder66.excludeFieldsWithoutExposeAnnotation();
    boolean b70 = jsonArray65.equals((java.lang.Object)gsonBuilder66);
    com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b73 = jsonPrimitive72.isString();
    boolean b74 = jsonPrimitive72.isBoolean();
    java.lang.String str75 = jsonPrimitive72.getAsString();
    boolean b76 = jsonPrimitive72.isJsonObject();
    int i77 = jsonPrimitive72.getAsInt();
    boolean b78 = jsonPrimitive72.getAsBoolean();
    jsonArray65.add((com.google.gson.JsonElement)jsonPrimitive72);
    char char80 = jsonArray65.getAsCharacter();
    com.google.gson.JsonElement jsonElement81 = null;
    jsonArray65.add(jsonElement81);
    jsonArray49.addAll(jsonArray65);
    com.google.gson.JsonArray jsonArray84 = new com.google.gson.JsonArray();
    jsonArray84.add((java.lang.Boolean)true);
    jsonArray49.addAll(jsonArray84);
    com.google.gson.JsonElement jsonElement88 = gson43.toJsonTree((java.lang.Object)jsonArray49);
    com.google.gson.JsonElement jsonElement89 = jsonArray0.set((int)(byte)0, (com.google.gson.JsonElement)jsonArray49);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement91 = jsonArray0.remove(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1"+ "'", str59.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "1"+ "'", str75.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement89);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test350"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    jsonArray16.add((java.lang.Number)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    short s37 = jsonArray16.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test351"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    boolean b17 = gson7.htmlSafe();
    com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    boolean b23 = jsonArray18.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    int i30 = jsonPrimitive25.getAsInt();
    boolean b31 = jsonPrimitive25.getAsBoolean();
    jsonArray18.add((com.google.gson.JsonElement)jsonPrimitive25);
    java.math.BigInteger bigInteger33 = jsonArray18.getAsBigInteger();
    int i34 = jsonArray18.getAsInt();
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    java.lang.Number number38 = jsonPrimitive36.getAsNumber();
    java.math.BigDecimal bigDecimal39 = jsonPrimitive36.getAsBigDecimal();
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal39);
    boolean b41 = jsonPrimitive40.isJsonObject();
    boolean b42 = jsonArray18.contains((com.google.gson.JsonElement)jsonPrimitive40);
    java.lang.reflect.Type type43 = null;
    com.google.gson.stream.JsonWriter jsonWriter44 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonArray18, type43, jsonWriter44);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number38 + "' != '" + 1+ "'", number38.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test352"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.Gson gson9 = gsonBuilder8.create();
    java.io.Reader reader10 = null;
    java.lang.Class<int[]> cls11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array12 = gson9.fromJson(reader10, cls11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test353"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    double d6 = jsonPrimitive1.getAsDouble();
    boolean b7 = jsonPrimitive1.isString();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    boolean b19 = jsonArray14.equals((java.lang.Object)gsonBuilder15);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    boolean b23 = jsonPrimitive21.isBoolean();
    java.lang.String str24 = jsonPrimitive21.getAsString();
    boolean b25 = jsonPrimitive21.isJsonObject();
    int i26 = jsonPrimitive21.getAsInt();
    boolean b27 = jsonPrimitive21.getAsBoolean();
    jsonArray14.add((com.google.gson.JsonElement)jsonPrimitive21);
    jsonArray8.addAll(jsonArray14);
    java.math.BigInteger bigInteger30 = jsonArray14.getAsBigInteger();
    boolean b31 = jsonArray14.isJsonPrimitive();
    int i32 = jsonArray14.getAsInt();
    com.google.gson.JsonArray jsonArray33 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder34 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder34.setLenient();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder34.excludeFieldsWithoutExposeAnnotation();
    boolean b38 = jsonArray33.equals((java.lang.Object)gsonBuilder34);
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b41 = jsonPrimitive40.isString();
    boolean b42 = jsonPrimitive40.isBoolean();
    java.lang.String str43 = jsonPrimitive40.getAsString();
    boolean b44 = jsonPrimitive40.isJsonObject();
    int i45 = jsonPrimitive40.getAsInt();
    boolean b46 = jsonPrimitive40.getAsBoolean();
    jsonArray33.add((com.google.gson.JsonElement)jsonPrimitive40);
    java.math.BigInteger bigInteger48 = jsonArray33.getAsBigInteger();
    int i49 = jsonArray33.getAsInt();
    java.lang.Number number50 = jsonArray33.getAsNumber();
    jsonArray33.add("{\"hi!\":1}");
    jsonArray14.add((com.google.gson.JsonElement)jsonArray33);
    jsonArray14.add((java.lang.Boolean)true);
    boolean b56 = jsonPrimitive1.equals((java.lang.Object)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "1"+ "'", str43.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test354"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    jsonArray0.add((java.lang.Boolean)true);
    jsonArray0.add((java.lang.Character)'4');
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal23 = jsonArray0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test355"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder16 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder16.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.setLenient();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.excludeFieldsWithoutExposeAnnotation();
    boolean b20 = jsonArray15.equals((java.lang.Object)gsonBuilder16);
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    boolean b24 = jsonPrimitive22.isBoolean();
    java.lang.String str25 = jsonPrimitive22.getAsString();
    boolean b26 = jsonPrimitive22.isJsonObject();
    int i27 = jsonPrimitive22.getAsInt();
    boolean b28 = jsonPrimitive22.getAsBoolean();
    jsonArray15.add((com.google.gson.JsonElement)jsonPrimitive22);
    int i30 = jsonArray15.size();
    short s31 = jsonArray15.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive33 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b34 = jsonPrimitive33.isString();
    java.lang.Number number35 = jsonPrimitive33.getAsNumber();
    boolean b36 = jsonPrimitive33.isBoolean();
    boolean b37 = jsonArray15.remove((com.google.gson.JsonElement)jsonPrimitive33);
    jsonArray15.add((java.lang.Number)(byte)10);
    java.lang.String str40 = gson7.toJson((java.lang.Object)jsonArray15);
    java.io.Reader reader41 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader42 = gson7.newJsonReader(reader41);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "1"+ "'", str25.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s31 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number35 + "' != '" + 1+ "'", number35.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[10]"+ "'", str40.equals("[10]"));

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test356"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement10 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement12 = jsonParser0.parse("{\"hi!\":1}");
    com.google.gson.stream.JsonReader jsonReader13 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement14 = jsonParser0.parse(jsonReader13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement12);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test357"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder8.excludeFieldsWithModifiers(i_array14);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls17 = null;
    com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive("{\"hi!\":1}");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder16.registerTypeHierarchyAdapter(cls17, (java.lang.Object)"{\"hi!\":1}");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test358"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    java.lang.String str5 = jsonPrimitive1.getAsString();
    boolean b6 = jsonPrimitive1.getAsBoolean();
    float f7 = jsonPrimitive1.getAsFloat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1"+ "'", str5.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f7 == 1.0f);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test359"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.Object obj12 = null;
    java.lang.String str13 = gson7.toJson(obj12);
    com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    boolean b19 = jsonArray14.equals((java.lang.Object)gsonBuilder15);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    boolean b23 = jsonPrimitive21.isBoolean();
    java.lang.String str24 = jsonPrimitive21.getAsString();
    boolean b25 = jsonPrimitive21.isJsonObject();
    int i26 = jsonPrimitive21.getAsInt();
    boolean b27 = jsonPrimitive21.getAsBoolean();
    jsonArray14.add((com.google.gson.JsonElement)jsonPrimitive21);
    java.math.BigInteger bigInteger29 = jsonArray14.getAsBigInteger();
    com.google.gson.JsonArray jsonArray30 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder31 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder31.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder31.setLenient();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder31.excludeFieldsWithoutExposeAnnotation();
    boolean b35 = jsonArray30.equals((java.lang.Object)gsonBuilder31);
    com.google.gson.JsonPrimitive jsonPrimitive37 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b38 = jsonPrimitive37.isString();
    boolean b39 = jsonPrimitive37.isBoolean();
    java.lang.String str40 = jsonPrimitive37.getAsString();
    boolean b41 = jsonPrimitive37.isJsonObject();
    int i42 = jsonPrimitive37.getAsInt();
    boolean b43 = jsonPrimitive37.getAsBoolean();
    jsonArray30.add((com.google.gson.JsonElement)jsonPrimitive37);
    char char45 = jsonArray30.getAsCharacter();
    com.google.gson.JsonArray jsonArray46 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder47 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder47.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder47.setLenient();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder47.excludeFieldsWithoutExposeAnnotation();
    boolean b51 = jsonArray46.equals((java.lang.Object)gsonBuilder47);
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b54 = jsonPrimitive53.isString();
    boolean b55 = jsonPrimitive53.isBoolean();
    java.lang.String str56 = jsonPrimitive53.getAsString();
    boolean b57 = jsonPrimitive53.isJsonObject();
    int i58 = jsonPrimitive53.getAsInt();
    boolean b59 = jsonPrimitive53.getAsBoolean();
    jsonArray46.add((com.google.gson.JsonElement)jsonPrimitive53);
    jsonArray30.addAll(jsonArray46);
    double d62 = jsonArray46.getAsDouble();
    jsonArray14.addAll(jsonArray46);
    short s64 = jsonArray46.getAsShort();
    com.google.gson.JsonArray jsonArray65 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder66 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder66.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder66.setLenient();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder66.excludeFieldsWithoutExposeAnnotation();
    boolean b70 = jsonArray65.equals((java.lang.Object)gsonBuilder66);
    com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b73 = jsonPrimitive72.isString();
    boolean b74 = jsonPrimitive72.isBoolean();
    java.lang.String str75 = jsonPrimitive72.getAsString();
    boolean b76 = jsonPrimitive72.isJsonObject();
    int i77 = jsonPrimitive72.getAsInt();
    boolean b78 = jsonPrimitive72.getAsBoolean();
    jsonArray65.add((com.google.gson.JsonElement)jsonPrimitive72);
    char char80 = jsonArray65.getAsCharacter();
    byte byte81 = jsonArray65.getAsByte();
    java.math.BigDecimal bigDecimal82 = jsonArray65.getAsBigDecimal();
    boolean b83 = jsonArray46.equals((java.lang.Object)jsonArray65);
    java.math.BigDecimal bigDecimal84 = jsonArray46.getAsBigDecimal();
    java.lang.Appendable appendable85 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonArray46, appendable85);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null"+ "'", str13.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "1"+ "'", str40.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char45 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "1"+ "'", str56.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d62 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s64 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "1"+ "'", str75.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte81 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test360"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    java.lang.reflect.Type type14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable15 = gson7.fromJson("com.google.gson.stream.MalformedJsonException: 0", type14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test361"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.Gson gson5 = gsonBuilder4.create();
    boolean b6 = gson5.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy10 = null;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy10);
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy12);
    com.google.gson.Gson gson14 = gsonBuilder9.create();
    java.lang.reflect.Type type15 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement16 = gson5.toJsonTree((java.lang.Object)gson14, type15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson14);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test362"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    double d6 = jsonPrimitive1.getAsDouble();
    double d7 = jsonPrimitive1.getAsDouble();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    boolean b19 = jsonArray14.equals((java.lang.Object)gsonBuilder15);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    boolean b23 = jsonPrimitive21.isBoolean();
    java.lang.String str24 = jsonPrimitive21.getAsString();
    boolean b25 = jsonPrimitive21.isJsonObject();
    int i26 = jsonPrimitive21.getAsInt();
    boolean b27 = jsonPrimitive21.getAsBoolean();
    jsonArray14.add((com.google.gson.JsonElement)jsonPrimitive21);
    jsonArray8.addAll(jsonArray14);
    java.math.BigInteger bigInteger30 = jsonArray14.getAsBigInteger();
    boolean b31 = jsonArray14.isJsonPrimitive();
    int i32 = jsonArray14.getAsInt();
    com.google.gson.JsonArray jsonArray33 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder34 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder34.setLenient();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder34.excludeFieldsWithoutExposeAnnotation();
    boolean b38 = jsonArray33.equals((java.lang.Object)gsonBuilder34);
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b41 = jsonPrimitive40.isString();
    boolean b42 = jsonPrimitive40.isBoolean();
    java.lang.String str43 = jsonPrimitive40.getAsString();
    boolean b44 = jsonPrimitive40.isJsonObject();
    int i45 = jsonPrimitive40.getAsInt();
    boolean b46 = jsonPrimitive40.getAsBoolean();
    jsonArray33.add((com.google.gson.JsonElement)jsonPrimitive40);
    java.math.BigInteger bigInteger48 = jsonArray33.getAsBigInteger();
    int i49 = jsonArray33.getAsInt();
    java.lang.Number number50 = jsonArray33.getAsNumber();
    jsonArray33.add("{\"hi!\":1}");
    jsonArray14.add((com.google.gson.JsonElement)jsonArray33);
    jsonArray14.add((java.lang.Boolean)true);
    boolean b56 = jsonPrimitive1.equals((java.lang.Object)jsonArray14);
    com.google.gson.JsonElement jsonElement58 = jsonArray14.remove((int)(short)0);
    com.google.gson.JsonPrimitive jsonPrimitive61 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b62 = jsonPrimitive61.isString();
    boolean b63 = jsonPrimitive61.isJsonArray();
    java.math.BigInteger bigInteger64 = jsonPrimitive61.getAsBigInteger();
    float f65 = jsonPrimitive61.getAsFloat();
    java.math.BigDecimal bigDecimal66 = jsonPrimitive61.getAsBigDecimal();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement67 = jsonArray14.set((int)'1', (com.google.gson.JsonElement)jsonPrimitive61);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "1"+ "'", str43.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f65 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test363"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.serializeNulls();
    boolean b10 = gson7.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder11 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy14 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder11.enableComplexMapKeySerialization();
    com.google.gson.Gson gson17 = gsonBuilder11.create();
    boolean b18 = gson17.htmlSafe();
    com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    boolean b24 = jsonArray19.equals((java.lang.Object)gsonBuilder20);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    int i31 = jsonPrimitive26.getAsInt();
    boolean b32 = jsonPrimitive26.getAsBoolean();
    jsonArray19.add((com.google.gson.JsonElement)jsonPrimitive26);
    int i34 = jsonArray19.size();
    short s35 = jsonArray19.getAsShort();
    int i36 = jsonArray19.getAsInt();
    com.google.gson.JsonElement jsonElement37 = gson17.toJsonTree((java.lang.Object)jsonArray19);
    java.lang.String str38 = gson7.toJson(jsonElement37);
    java.lang.Class<java.math.BigDecimal> cls40 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal41 = gson7.fromJson("{\"hi!\":1}", cls40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s35 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[1]"+ "'", str38.equals("[1]"));

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test364"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    com.google.gson.JsonPrimitive jsonPrimitive5 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal4);
    byte byte6 = jsonPrimitive5.getAsByte();
    java.math.BigInteger bigInteger7 = jsonPrimitive5.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte6 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger7);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test365"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d2 = jsonPrimitive1.getAsDouble();
    boolean b3 = jsonPrimitive1.isBoolean();
    boolean b4 = jsonPrimitive1.isJsonArray();
    boolean b5 = jsonPrimitive1.isJsonObject();
    java.lang.String str6 = jsonPrimitive1.getAsString();
    com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    boolean b12 = jsonArray7.equals((java.lang.Object)gsonBuilder8);
    com.google.gson.JsonPrimitive jsonPrimitive14 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b15 = jsonPrimitive14.isString();
    boolean b16 = jsonPrimitive14.isBoolean();
    java.lang.String str17 = jsonPrimitive14.getAsString();
    boolean b18 = jsonPrimitive14.isJsonObject();
    int i19 = jsonPrimitive14.getAsInt();
    boolean b20 = jsonPrimitive14.getAsBoolean();
    jsonArray7.add((com.google.gson.JsonElement)jsonPrimitive14);
    char char22 = jsonArray7.getAsCharacter();
    com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithoutExposeAnnotation();
    boolean b28 = jsonArray23.equals((java.lang.Object)gsonBuilder24);
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b31 = jsonPrimitive30.isString();
    boolean b32 = jsonPrimitive30.isBoolean();
    java.lang.String str33 = jsonPrimitive30.getAsString();
    boolean b34 = jsonPrimitive30.isJsonObject();
    int i35 = jsonPrimitive30.getAsInt();
    boolean b36 = jsonPrimitive30.getAsBoolean();
    jsonArray23.add((com.google.gson.JsonElement)jsonPrimitive30);
    jsonArray7.addAll(jsonArray23);
    byte byte39 = jsonArray23.getAsByte();
    boolean b40 = jsonPrimitive1.equals((java.lang.Object)byte39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "4"+ "'", str6.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte39 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test366"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    boolean b18 = jsonArray0.getAsBoolean();
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive("com.google.gson.stream.MalformedJsonException: hi!");
    boolean b21 = jsonPrimitive20.getAsBoolean();
    boolean b22 = jsonArray0.equals((java.lang.Object)jsonPrimitive20);
    java.lang.String str23 = jsonArray0.getAsString();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement25 = jsonArray0.remove((int)(byte)4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test367"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Boolean)true);
    com.google.gson.JsonObject jsonObject2 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray4 = jsonObject2.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray6 = jsonObject2.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive12 = jsonPrimitive9.getAsJsonPrimitive();
    jsonObject2.add("hi!", (com.google.gson.JsonElement)jsonPrimitive12);
    boolean b14 = jsonObject2.isJsonArray();
    com.google.gson.JsonObject jsonObject15 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray17 = jsonObject15.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray19 = jsonObject15.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b23 = jsonPrimitive22.isString();
    java.lang.Number number24 = jsonPrimitive22.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive25 = jsonPrimitive22.getAsJsonPrimitive();
    jsonObject15.add("hi!", (com.google.gson.JsonElement)jsonPrimitive25);
    boolean b27 = jsonObject15.isJsonArray();
    com.google.gson.JsonElement jsonElement29 = jsonObject15.get("hi!");
    boolean b30 = jsonObject2.equals((java.lang.Object)jsonElement29);
    boolean b31 = jsonPrimitive1.equals((java.lang.Object)b30);
    // The following exception was thrown during execution in test generation
    try {
    byte byte32 = jsonPrimitive1.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number24 + "' != '" + 1+ "'", number24.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test368"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)(byte)100);
    java.lang.Number number2 = jsonPrimitive1.getAsNumber();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number2 + "' != '" + (byte)100+ "'", number2.equals((byte)100));

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test369"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b54 = jsonPrimitive53.isString();
    boolean b55 = jsonPrimitive53.isBoolean();
    java.math.BigDecimal bigDecimal56 = jsonPrimitive53.getAsBigDecimal();
    double d57 = jsonPrimitive53.getAsDouble();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement58 = jsonArray32.set((int)(byte)10, (com.google.gson.JsonElement)jsonPrimitive53);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d57 == 1.0d);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test370"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive("{\"hi!\":1}");
    java.lang.Appendable appendable13 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive12, appendable13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test371"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    java.io.Reader reader5 = null;
    java.lang.Class<int[]> cls6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array7 = gson4.fromJson(reader5, cls6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test372"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.serializeSpecialFloatingPointValues();
    com.google.gson.JsonElement jsonElement17 = gson6.toJsonTree((java.lang.Object)gsonBuilder16);
    java.io.Reader reader18 = null;
    java.lang.reflect.Type type19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal20 = gson6.fromJson(reader18, type19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement17);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test373"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    boolean b23 = jsonArray6.isJsonPrimitive();
    int i24 = jsonArray6.getAsInt();
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    int i37 = jsonPrimitive32.getAsInt();
    boolean b38 = jsonPrimitive32.getAsBoolean();
    jsonArray25.add((com.google.gson.JsonElement)jsonPrimitive32);
    java.math.BigInteger bigInteger40 = jsonArray25.getAsBigInteger();
    int i41 = jsonArray25.getAsInt();
    java.lang.Number number42 = jsonArray25.getAsNumber();
    jsonArray25.add("{\"hi!\":1}");
    jsonArray6.add((com.google.gson.JsonElement)jsonArray25);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str46 = jsonArray6.getAsString();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number42 + "' != '" + 1+ "'", number42.equals(1));

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test374"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder52 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setLenient();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithoutExposeAnnotation();
    boolean b56 = jsonArray51.equals((java.lang.Object)gsonBuilder52);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    jsonArray51.addAll(jsonArray57);
    java.math.BigInteger bigInteger73 = jsonArray57.getAsBigInteger();
    boolean b74 = jsonArray57.isJsonPrimitive();
    jsonArray57.add((java.lang.Character)'#');
    boolean b77 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray57);
    float f78 = jsonArray32.getAsFloat();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement79 = jsonArray32.iterator();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive80 = jsonArray32.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f78 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement79);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test375"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    jsonArray0.add((java.lang.Character)'#');
    jsonArray0.add((java.lang.Character)'1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test376"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b9 = jsonPrimitive8.isString();
    boolean b10 = jsonPrimitive8.isBoolean();
    java.lang.String str11 = jsonPrimitive8.getAsString();
    boolean b12 = jsonPrimitive8.isJsonObject();
    java.math.BigDecimal bigDecimal13 = jsonPrimitive8.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement14 = gson6.toJsonTree((java.lang.Object)bigDecimal13);
    java.lang.Class<java.math.BigDecimal> cls16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal17 = gson6.fromJson("com.google.gson.stream.MalformedJsonException: ", cls16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1"+ "'", str11.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test377"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    int[] i_array11 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy14 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLongSerializationPolicy(longSerializationPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy14);
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder17.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy27 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder24.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy27);
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder24.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder24.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy31 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder24.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy31);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder23.setFieldNamingPolicy(fieldNamingPolicy31);
    com.google.gson.GsonBuilder gsonBuilder34 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder34.setLenient();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder34.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder34.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder34.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder41 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder41.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder41.setLenient();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder41.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder41.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy47 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array48 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy47 };
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder41.setExclusionStrategies(exclusionStrategy_array48);
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder40.setExclusionStrategies(exclusionStrategy_array48);
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder33.setExclusionStrategies(exclusionStrategy_array48);
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test378"); }


    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException4 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException4);
    java.lang.Throwable[] throwable_array6 = jsonParseException2.getSuppressed();
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)jsonParseException2);
    java.lang.String str8 = jsonParseException2.toString();
    com.google.gson.JsonParseException jsonParseException10 = new com.google.gson.JsonParseException("");
    com.google.gson.JsonParseException jsonParseException11 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException10);
    jsonParseException2.addSuppressed((java.lang.Throwable)jsonParseException11);
    java.lang.Throwable[] throwable_array13 = jsonParseException2.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "com.google.gson.JsonParseException: hi!"+ "'", str8.equals("com.google.gson.JsonParseException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array13);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test379"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    char char5 = jsonPrimitive1.getAsCharacter();
    int i6 = jsonPrimitive1.getAsInt();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.setLenient();
    boolean b16 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test380"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    boolean b9 = gson7.htmlSafe();
    java.io.Reader reader10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader11 = gson7.newJsonReader(reader10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test381"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    java.lang.Number number18 = jsonArray0.getAsNumber();
    com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    boolean b24 = jsonArray19.equals((java.lang.Object)gsonBuilder20);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    int i31 = jsonPrimitive26.getAsInt();
    boolean b32 = jsonPrimitive26.getAsBoolean();
    jsonArray19.add((com.google.gson.JsonElement)jsonPrimitive26);
    java.math.BigInteger bigInteger34 = jsonArray19.getAsBigInteger();
    int i35 = jsonArray19.getAsInt();
    com.google.gson.JsonNull jsonNull36 = new com.google.gson.JsonNull();
    boolean b37 = jsonArray19.contains((com.google.gson.JsonElement)jsonNull36);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement38 = jsonArray19.iterator();
    java.lang.Number number39 = jsonArray19.getAsNumber();
    char char40 = jsonArray19.getAsCharacter();
    jsonArray0.addAll(jsonArray19);
    boolean b42 = jsonArray0.isJsonObject();
    // The following exception was thrown during execution in test generation
    try {
    char char43 = jsonArray0.getAsCharacter();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number18 + "' != '" + 1+ "'", number18.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number39 + "' != '" + 1+ "'", number39.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char40 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test382"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy10 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy11 = gson7.getAdapter(typetoken_fieldNamingStrategy10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test383"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b17 = jsonPrimitive16.isString();
    boolean b18 = jsonPrimitive16.isBoolean();
    java.lang.String str19 = jsonPrimitive16.getAsString();
    boolean b20 = jsonPrimitive16.isJsonObject();
    int i21 = jsonPrimitive16.getAsInt();
    char char22 = jsonPrimitive16.getAsCharacter();
    byte byte23 = jsonPrimitive16.getAsByte();
    java.lang.String str24 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive16);
    java.lang.String str25 = gson7.toString();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy29 = null;
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.addSerializationExclusionStrategy(exclusionStrategy29);
    com.google.gson.ExclusionStrategy exclusionStrategy31 = null;
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder28.addSerializationExclusionStrategy(exclusionStrategy31);
    com.google.gson.Gson gson33 = gsonBuilder28.create();
    java.lang.String str34 = gson33.toString();
    java.lang.reflect.Type type36 = null;
    java.lang.Appendable appendable37 = gson33.fromJson("", type36);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy38 = gson33.fieldNamingStrategy();
    com.google.gson.internal.Excluder excluder39 = gson33.excluder();
    com.google.gson.reflect.TypeToken<java.lang.Long> typetoken_long40 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<java.lang.Long> typeadapter_long41 = gson7.getDelegateAdapter((com.google.gson.TypeAdapterFactory)excluder39, typetoken_long40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1"+ "'", str19.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte23 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder39);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test384"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    com.google.gson.JsonObject jsonObject53 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray55 = jsonObject53.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray57 = jsonObject53.getAsJsonArray("");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement58 = jsonObject53.entrySet();
    java.lang.String str59 = gson7.toJson((com.google.gson.JsonElement)jsonObject53);
    com.google.gson.JsonPrimitive jsonPrimitive61 = jsonObject53.getAsJsonPrimitive("{\"hi!\":1}");
    com.google.gson.JsonPrimitive jsonPrimitive63 = jsonObject53.getAsJsonPrimitive("{}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "{}"+ "'", str59.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive63);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test385"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.Object obj12 = null;
    java.lang.Appendable appendable13 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(obj12, appendable13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test386"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    java.lang.reflect.Type type9 = null;
    com.google.gson.JsonObject jsonObject10 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray12 = jsonObject10.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray14 = jsonObject10.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b18 = jsonPrimitive17.isString();
    java.lang.Number number19 = jsonPrimitive17.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive20 = jsonPrimitive17.getAsJsonPrimitive();
    jsonObject10.add("hi!", (com.google.gson.JsonElement)jsonPrimitive20);
    boolean b22 = jsonObject10.isJsonArray();
    com.google.gson.JsonElement jsonElement24 = jsonObject10.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d27 = jsonPrimitive26.getAsDouble();
    boolean b28 = jsonPrimitive26.isBoolean();
    boolean b29 = jsonObject10.equals((java.lang.Object)b28);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject10.entrySet();
    com.google.gson.JsonArray jsonArray32 = jsonObject10.getAsJsonArray("1");
    int i33 = jsonObject10.size();
    com.google.gson.JsonElement jsonElement35 = jsonObject10.remove("com.google.gson.stream.MalformedJsonException: 0");
    jsonObject10.addProperty("1", "com.google.gson.stream.MalformedJsonException: hi!");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder0.registerTypeAdapter(type9, (java.lang.Object)jsonObject10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number19 + "' != '" + 1+ "'", number19.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d27 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement35);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test387"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    long long5 = jsonPrimitive1.getAsLong();
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.setVersion((double)'#');
    com.google.gson.Gson gson12 = gsonBuilder11.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy13 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder11.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy13);
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    int[] i_array20 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder17.excludeFieldsWithModifiers(i_array20);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder14.excludeFieldsWithModifiers(i_array20);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy23 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder14.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy23);
    com.google.gson.GsonBuilder gsonBuilder25 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder25.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.disableInnerClassSerialization();
    int[] i_array30 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder27.excludeFieldsWithModifiers(i_array30);
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder14.excludeFieldsWithModifiers(i_array30);
    boolean b33 = jsonPrimitive1.equals((java.lang.Object)gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test388"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    java.io.Reader reader34 = null;
    java.lang.Class<int[]> cls35 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array36 = gson7.fromJson(reader34, cls35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test389"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.internal.Excluder excluder16 = gson7.excluder();
    java.lang.String str17 = gson7.toString();
    com.google.gson.JsonParseException jsonParseException19 = new com.google.gson.JsonParseException("hi!");
    com.google.gson.JsonParseException jsonParseException21 = new com.google.gson.JsonParseException("{\"hi!\":1}");
    jsonParseException19.addSuppressed((java.lang.Throwable)jsonParseException21);
    java.lang.String str23 = jsonParseException21.toString();
    java.lang.Appendable appendable24 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonParseException21, appendable24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "com.google.gson.JsonParseException: {\"hi!\":1}"+ "'", str23.equals("com.google.gson.JsonParseException: {\"hi!\":1}"));

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test390"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("10");
    com.google.gson.stream.JsonReader jsonReader3 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse(jsonReader3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test391"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.serializeNulls();
    boolean b15 = gson7.htmlSafe();
    java.io.Reader reader16 = null;
    java.lang.reflect.Type type17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal18 = gson7.fromJson(reader16, type17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test392"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    java.lang.String str11 = gson7.toString();
    com.google.gson.JsonElement jsonElement12 = null;
    java.lang.String str13 = gson7.toJson(jsonElement12);
    java.io.Reader reader14 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader15 = gson7.newJsonReader(reader14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null"+ "'", str13.equals("null"));

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test393"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("4");
    java.lang.Number number2 = jsonPrimitive1.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive(number2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number2);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test394"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = jsonArray32.getAsJsonArray();
    float f52 = jsonArray51.getAsFloat();
    int i53 = jsonArray51.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f52 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test395"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    java.lang.String str18 = jsonArray0.toString();
    com.google.gson.JsonObject jsonObject19 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray21 = jsonObject19.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray23 = jsonObject19.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    java.lang.Number number28 = jsonPrimitive26.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive29 = jsonPrimitive26.getAsJsonPrimitive();
    jsonObject19.add("hi!", (com.google.gson.JsonElement)jsonPrimitive29);
    boolean b31 = jsonObject19.isJsonArray();
    com.google.gson.JsonObject jsonObject32 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray34 = jsonObject32.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray36 = jsonObject32.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    java.lang.Number number41 = jsonPrimitive39.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive42 = jsonPrimitive39.getAsJsonPrimitive();
    jsonObject32.add("hi!", (com.google.gson.JsonElement)jsonPrimitive42);
    boolean b44 = jsonObject32.isJsonArray();
    com.google.gson.JsonElement jsonElement46 = jsonObject32.get("hi!");
    boolean b47 = jsonObject19.equals((java.lang.Object)jsonElement46);
    com.google.gson.JsonObject jsonObject48 = jsonObject19.getAsJsonObject();
    jsonObject48.addProperty("0", (java.lang.Number)1.0f);
    jsonObject48.addProperty("4", (java.lang.Boolean)false);
    boolean b55 = jsonArray0.remove((com.google.gson.JsonElement)jsonObject48);
    // The following exception was thrown during execution in test generation
    try {
    float f56 = jsonObject48.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[1]"+ "'", str18.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number28 + "' != '" + 1+ "'", number28.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number41 + "' != '" + 1+ "'", number41.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test396"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy7 = gson6.fieldNamingStrategy();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d10 = jsonPrimitive9.getAsDouble();
    boolean b11 = jsonPrimitive9.isJsonObject();
    float f12 = jsonPrimitive9.getAsFloat();
    java.lang.reflect.Type type13 = null;
    com.google.gson.stream.JsonWriter jsonWriter14 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson6.toJson((java.lang.Object)f12, type13, jsonWriter14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f12 == 4.0f);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test397"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    long long2 = jsonPrimitive1.getAsLong();
    boolean b3 = jsonPrimitive1.isBoolean();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject4 = jsonPrimitive1.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 4L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test398"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setVersion((double)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test399"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement15 = jsonObject0.entrySet();
    com.google.gson.JsonPrimitive jsonPrimitive17 = jsonObject0.getAsJsonPrimitive("true");
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("{\"hi!\":1}");
    jsonObject0.addProperty("hi!", (java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test400"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setDateFormat(100);
    com.google.gson.ExclusionStrategy exclusionStrategy9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.addSerializationExclusionStrategy(exclusionStrategy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.serializeNulls();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy14 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder11.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy14);
    java.lang.reflect.Field field17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = fieldNamingPolicy14.translateName(field17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test401"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    java.lang.Number number20 = jsonPrimitive18.getAsNumber();
    boolean b21 = jsonPrimitive18.isBoolean();
    boolean b22 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive18);
    com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder24 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder24.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder24.setLenient();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder24.excludeFieldsWithoutExposeAnnotation();
    boolean b28 = jsonArray23.equals((java.lang.Object)gsonBuilder24);
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b31 = jsonPrimitive30.isString();
    boolean b32 = jsonPrimitive30.isBoolean();
    java.lang.String str33 = jsonPrimitive30.getAsString();
    boolean b34 = jsonPrimitive30.isJsonObject();
    int i35 = jsonPrimitive30.getAsInt();
    boolean b36 = jsonPrimitive30.getAsBoolean();
    jsonArray23.add((com.google.gson.JsonElement)jsonPrimitive30);
    int i38 = jsonArray23.size();
    short s39 = jsonArray23.getAsShort();
    int i40 = jsonArray23.getAsInt();
    jsonArray0.addAll(jsonArray23);
    int i42 = jsonArray23.getAsInt();
    long long43 = jsonArray23.getAsLong();
    jsonArray23.add("{\"hi!\":1,\"{\\\"hi!\\\":1}\":\"1\"}");
    // The following exception was thrown during execution in test generation
    try {
    byte byte46 = jsonArray23.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s39 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long43 == 1L);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test402"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.setDateFormat("0");
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder6.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder6.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder12.setVersion((double)'#');
    com.google.gson.Gson gson18 = gsonBuilder17.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy19 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy19);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder11.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy19);
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder3.setFieldNamingPolicy(fieldNamingPolicy19);
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setLenient();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder25.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy27 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder25.setFieldNamingPolicy(fieldNamingPolicy27);
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder30.setVersion((double)'#');
    com.google.gson.Gson gson36 = gsonBuilder35.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy37 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder35.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy37);
    com.google.gson.GsonBuilder gsonBuilder39 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder41.disableInnerClassSerialization();
    int[] i_array44 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder41.excludeFieldsWithModifiers(i_array44);
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder38.excludeFieldsWithModifiers(i_array44);
    com.google.gson.FieldNamingPolicy fieldNamingPolicy47 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder38.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy47);
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder29.setFieldNamingPolicy(fieldNamingPolicy47);
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder22.setFieldNamingPolicy(fieldNamingPolicy47);
    java.lang.reflect.Field field51 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str52 = fieldNamingPolicy47.translateName(field51);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test403"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy2 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy2);
    com.google.gson.ExclusionStrategy exclusionStrategy4 = null;
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.addSerializationExclusionStrategy(exclusionStrategy4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder3.disableHtmlEscaping();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test404"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    boolean b16 = jsonArray11.equals((java.lang.Object)gsonBuilder12);
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    int i23 = jsonPrimitive18.getAsInt();
    boolean b24 = jsonPrimitive18.getAsBoolean();
    jsonArray11.add((com.google.gson.JsonElement)jsonPrimitive18);
    java.math.BigInteger bigInteger26 = jsonArray11.getAsBigInteger();
    int i27 = jsonArray11.getAsInt();
    com.google.gson.JsonNull jsonNull28 = new com.google.gson.JsonNull();
    boolean b29 = jsonArray11.contains((com.google.gson.JsonElement)jsonNull28);
    java.lang.Appendable appendable30 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonArray11, appendable30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test405"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder8.excludeFieldsWithModifiers(i_array14);
    com.google.gson.ExclusionStrategy exclusionStrategy17 = null;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.addDeserializationExclusionStrategy(exclusionStrategy17);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setDateFormat((int)'h');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test406"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d54 = jsonPrimitive53.getAsDouble();
    java.lang.Number number55 = jsonPrimitive53.getAsNumber();
    jsonArray32.add(number55);
    int i57 = jsonArray32.size();
    // The following exception was thrown during execution in test generation
    try {
    byte byte58 = jsonArray32.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(number55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 2);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test407"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    byte byte32 = jsonArray16.getAsByte();
    boolean b33 = jsonArray16.isJsonPrimitive();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte32 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test408"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    int i23 = jsonArray8.size();
    short s24 = jsonArray8.getAsShort();
    int i25 = jsonArray8.getAsInt();
    com.google.gson.JsonElement jsonElement26 = gson6.toJsonTree((java.lang.Object)jsonArray8);
    java.lang.reflect.Type type28 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Appendable appendable29 = gson6.fromJson("\"a\"", type28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test409"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    jsonArray0.add((java.lang.Boolean)false);
    java.lang.Number number18 = null;
    jsonArray0.add(number18);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d22 = jsonPrimitive21.getAsDouble();
    boolean b23 = jsonPrimitive21.isJsonObject();
    boolean b24 = jsonPrimitive21.isNumber();
    boolean b25 = jsonArray0.remove((com.google.gson.JsonElement)jsonPrimitive21);
    java.lang.String str26 = jsonPrimitive21.getAsString();
    boolean b27 = jsonPrimitive21.isJsonArray();
    char char28 = jsonPrimitive21.getAsCharacter();
    byte byte29 = jsonPrimitive21.getAsByte();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "4"+ "'", str26.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char28 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte29 == (byte)4);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test410"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    boolean b32 = jsonArray16.isJsonArray();
    short s33 = jsonArray16.getAsShort();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonObject jsonObject34 = jsonArray16.getAsJsonObject();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s33 == (short)1);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test411"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)(byte)1);
    int i2 = jsonPrimitive1.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test412"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    jsonObject0.addProperty("hi!", "1");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test413"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isJsonArray();
    boolean b39 = jsonArray16.remove((com.google.gson.JsonElement)jsonPrimitive36);
    boolean b40 = jsonPrimitive36.isString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test414"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    boolean b23 = jsonArray6.isJsonPrimitive();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement25 = jsonArray6.get((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test415"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: hi!", (java.lang.Boolean)true);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement18 = jsonObject0.entrySet();
    boolean b20 = jsonObject0.has("");
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal21 = jsonObject0.getAsBigDecimal();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test416"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    int i16 = jsonArray0.getAsInt();
    com.google.gson.JsonNull jsonNull17 = new com.google.gson.JsonNull();
    boolean b18 = jsonArray0.contains((com.google.gson.JsonElement)jsonNull17);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    java.lang.Number number20 = jsonArray0.getAsNumber();
    char char21 = jsonArray0.getAsCharacter();
    float f22 = jsonArray0.getAsFloat();
    jsonArray0.add((java.lang.Boolean)true);
    // The following exception was thrown during execution in test generation
    try {
    boolean b25 = jsonArray0.getAsBoolean();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number20 + "' != '" + 1+ "'", number20.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char21 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f22 == 1.0f);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test417"); }


    java.lang.Throwable throwable1 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException(throwable1);
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException2);
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)malformedJsonException3);
    java.lang.Throwable[] throwable_array5 = malformedJsonException3.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array5);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test418"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy34 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy35 = gson7.getAdapter(typetoken_fieldNamingStrategy34);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test419"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy7 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLongSerializationPolicy(longSerializationPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder6.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.setLenient();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test420"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.Class<java.math.BigDecimal> cls14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigDecimal bigDecimal15 = gson7.fromJson("\"a\"", cls14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test421"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray0.getAsBigInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test422"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character)'h');
    // The following exception was thrown during execution in test generation
    try {
    long long2 = jsonPrimitive1.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test423"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.setPrettyPrinting();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingPolicy(fieldNamingPolicy7);
    java.lang.reflect.Type type9 = null;
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setLenient();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder10.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder10.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.generateNonExecutableJson();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder5.registerTypeAdapter(type9, (java.lang.Object)gsonBuilder18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test424"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    long long5 = jsonPrimitive1.getAsLong();
    int i6 = jsonPrimitive1.getAsInt();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive1.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test425"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("com.google.gson.stream.MalformedJsonException: 0");
    // The following exception was thrown during execution in test generation
    try {
    int i2 = jsonPrimitive1.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test426"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    boolean b23 = jsonArray6.isJsonPrimitive();
    int i24 = jsonArray6.getAsInt();
    com.google.gson.JsonArray jsonArray25 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder26 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder26.setLenient();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    boolean b30 = jsonArray25.equals((java.lang.Object)gsonBuilder26);
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    boolean b34 = jsonPrimitive32.isBoolean();
    java.lang.String str35 = jsonPrimitive32.getAsString();
    boolean b36 = jsonPrimitive32.isJsonObject();
    int i37 = jsonPrimitive32.getAsInt();
    boolean b38 = jsonPrimitive32.getAsBoolean();
    jsonArray25.add((com.google.gson.JsonElement)jsonPrimitive32);
    java.math.BigInteger bigInteger40 = jsonArray25.getAsBigInteger();
    int i41 = jsonArray25.getAsInt();
    java.lang.Number number42 = jsonArray25.getAsNumber();
    jsonArray25.add("{\"hi!\":1}");
    jsonArray6.add((com.google.gson.JsonElement)jsonArray25);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement47 = jsonArray25.get((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "1"+ "'", str35.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number42 + "' != '" + 1+ "'", number42.equals(1));

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test427"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    boolean b10 = gson7.serializeNulls();
    java.lang.String str11 = gson7.toString();
    com.google.gson.stream.JsonReader jsonReader12 = null;
    java.lang.reflect.Type type13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array14 = gson7.fromJson(jsonReader12, type13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test428"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    byte byte18 = jsonObject0.getAsByte();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test429"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isJsonArray();
    boolean b4 = jsonPrimitive1.getAsBoolean();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    char char6 = jsonPrimitive1.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char6 == '1');

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test430"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    boolean b11 = jsonArray6.equals((java.lang.Object)gsonBuilder7);
    com.google.gson.JsonPrimitive jsonPrimitive13 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b14 = jsonPrimitive13.isString();
    boolean b15 = jsonPrimitive13.isBoolean();
    java.lang.String str16 = jsonPrimitive13.getAsString();
    boolean b17 = jsonPrimitive13.isJsonObject();
    int i18 = jsonPrimitive13.getAsInt();
    boolean b19 = jsonPrimitive13.getAsBoolean();
    jsonArray6.add((com.google.gson.JsonElement)jsonPrimitive13);
    jsonArray0.addAll(jsonArray6);
    java.math.BigInteger bigInteger22 = jsonArray6.getAsBigInteger();
    java.math.BigInteger bigInteger23 = jsonArray6.getAsBigInteger();
    float f24 = jsonArray6.getAsFloat();
    jsonArray6.add("");
    com.google.gson.JsonObject jsonObject27 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray29 = jsonObject27.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray31 = jsonObject27.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    java.lang.Number number36 = jsonPrimitive34.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive37 = jsonPrimitive34.getAsJsonPrimitive();
    jsonObject27.add("hi!", (com.google.gson.JsonElement)jsonPrimitive37);
    boolean b39 = jsonObject27.isJsonArray();
    com.google.gson.JsonObject jsonObject40 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray42 = jsonObject40.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray44 = jsonObject40.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b48 = jsonPrimitive47.isString();
    java.lang.Number number49 = jsonPrimitive47.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive50 = jsonPrimitive47.getAsJsonPrimitive();
    jsonObject40.add("hi!", (com.google.gson.JsonElement)jsonPrimitive50);
    boolean b52 = jsonObject40.isJsonArray();
    com.google.gson.JsonElement jsonElement54 = jsonObject40.get("hi!");
    boolean b55 = jsonObject27.equals((java.lang.Object)jsonElement54);
    com.google.gson.JsonObject jsonObject56 = jsonObject27.getAsJsonObject();
    boolean b57 = jsonArray6.remove((com.google.gson.JsonElement)jsonObject27);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive58 = jsonArray6.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1"+ "'", str16.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f24 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number36 + "' != '" + 1+ "'", number36.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number49 + "' != '" + 1+ "'", number49.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test431"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy7 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy7);
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.disableInnerClassSerialization();
    int[] i_array14 = new int[] { 0 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.excludeFieldsWithModifiers(i_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder8.excludeFieldsWithModifiers(i_array14);
    com.google.gson.ExclusionStrategy exclusionStrategy17 = null;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.addDeserializationExclusionStrategy(exclusionStrategy17);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder16.serializeSpecialFloatingPointValues();
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls20 = null;
    com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder22 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.setLenient();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.excludeFieldsWithoutExposeAnnotation();
    boolean b26 = jsonArray21.equals((java.lang.Object)gsonBuilder22);
    com.google.gson.JsonPrimitive jsonPrimitive28 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b29 = jsonPrimitive28.isString();
    boolean b30 = jsonPrimitive28.isBoolean();
    java.lang.String str31 = jsonPrimitive28.getAsString();
    boolean b32 = jsonPrimitive28.isJsonObject();
    int i33 = jsonPrimitive28.getAsInt();
    boolean b34 = jsonPrimitive28.getAsBoolean();
    jsonArray21.add((com.google.gson.JsonElement)jsonPrimitive28);
    java.math.BigInteger bigInteger36 = jsonArray21.getAsBigInteger();
    com.google.gson.JsonArray jsonArray37 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder38 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder38.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.setLenient();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder38.excludeFieldsWithoutExposeAnnotation();
    boolean b42 = jsonArray37.equals((java.lang.Object)gsonBuilder38);
    com.google.gson.JsonPrimitive jsonPrimitive44 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b45 = jsonPrimitive44.isString();
    boolean b46 = jsonPrimitive44.isBoolean();
    java.lang.String str47 = jsonPrimitive44.getAsString();
    boolean b48 = jsonPrimitive44.isJsonObject();
    int i49 = jsonPrimitive44.getAsInt();
    boolean b50 = jsonPrimitive44.getAsBoolean();
    jsonArray37.add((com.google.gson.JsonElement)jsonPrimitive44);
    char char52 = jsonArray37.getAsCharacter();
    com.google.gson.JsonArray jsonArray53 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder54 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder54.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder54.setLenient();
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder54.excludeFieldsWithoutExposeAnnotation();
    boolean b58 = jsonArray53.equals((java.lang.Object)gsonBuilder54);
    com.google.gson.JsonPrimitive jsonPrimitive60 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b61 = jsonPrimitive60.isString();
    boolean b62 = jsonPrimitive60.isBoolean();
    java.lang.String str63 = jsonPrimitive60.getAsString();
    boolean b64 = jsonPrimitive60.isJsonObject();
    int i65 = jsonPrimitive60.getAsInt();
    boolean b66 = jsonPrimitive60.getAsBoolean();
    jsonArray53.add((com.google.gson.JsonElement)jsonPrimitive60);
    jsonArray37.addAll(jsonArray53);
    double d69 = jsonArray53.getAsDouble();
    jsonArray21.addAll(jsonArray53);
    short s71 = jsonArray53.getAsShort();
    com.google.gson.JsonArray jsonArray72 = jsonArray53.getAsJsonArray();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder73 = gsonBuilder16.registerTypeHierarchyAdapter(cls20, (java.lang.Object)jsonArray53);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "1"+ "'", str31.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "1"+ "'", str47.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char52 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "1"+ "'", str63.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d69 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s71 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray72);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test432"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    com.google.gson.JsonElement jsonElement35 = jsonObject18.remove("");
    jsonObject18.addProperty("com.google.gson.stream.MalformedJsonException: 0", "");
    com.google.gson.JsonObject jsonObject40 = jsonObject18.getAsJsonObject("\"4\"");
    // The following exception was thrown during execution in test generation
    try {
    int i41 = jsonObject18.getAsInt();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject40);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test433"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    int[] i_array4 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithModifiers(i_array4);
    com.google.gson.GsonBuilder gsonBuilder6 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder6.setLenient();
    int[] i_array10 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithModifiers(i_array10);
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder12.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy18 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array19 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy18 };
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder12.setExclusionStrategies(exclusionStrategy_array19);
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder12.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder22 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder22.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.setLenient();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder22.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder22.setVersion((double)'#');
    com.google.gson.Gson gson28 = gsonBuilder27.create();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy29 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder27.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy29);
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder21.setFieldNamingPolicy(fieldNamingPolicy29);
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder11.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy29);
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder2.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy29);
    java.lang.reflect.Field field34 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str35 = fieldNamingPolicy29.translateName(field34);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test434"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.Gson gson4 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setDateFormat(10, 0);
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder5.generateNonExecutableJson();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test435"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder2.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder2.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy8 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array9 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy8 };
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder2.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder1.setExclusionStrategies(exclusionStrategy_array9);
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder1.setDateFormat((int)'t', (int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test436"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonElement jsonElement32 = null;
    jsonArray16.add(jsonElement32);
    jsonArray0.addAll(jsonArray16);
    com.google.gson.GsonBuilder gsonBuilder36 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder36.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder36.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy39 = null;
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy39);
    com.google.gson.ExclusionStrategy exclusionStrategy41 = null;
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder38.addSerializationExclusionStrategy(exclusionStrategy41);
    com.google.gson.Gson gson43 = gsonBuilder38.create();
    java.lang.String str44 = gson43.toString();
    java.lang.reflect.Type type46 = null;
    java.lang.Appendable appendable47 = gson43.fromJson("", type46);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy48 = gson43.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder50 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder50.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setLenient();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder50.excludeFieldsWithoutExposeAnnotation();
    boolean b54 = jsonArray49.equals((java.lang.Object)gsonBuilder50);
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    boolean b58 = jsonPrimitive56.isBoolean();
    java.lang.String str59 = jsonPrimitive56.getAsString();
    boolean b60 = jsonPrimitive56.isJsonObject();
    int i61 = jsonPrimitive56.getAsInt();
    boolean b62 = jsonPrimitive56.getAsBoolean();
    jsonArray49.add((com.google.gson.JsonElement)jsonPrimitive56);
    int i64 = jsonArray49.size();
    com.google.gson.JsonArray jsonArray65 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder66 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder67 = gsonBuilder66.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder68 = gsonBuilder66.setLenient();
    com.google.gson.GsonBuilder gsonBuilder69 = gsonBuilder66.excludeFieldsWithoutExposeAnnotation();
    boolean b70 = jsonArray65.equals((java.lang.Object)gsonBuilder66);
    com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b73 = jsonPrimitive72.isString();
    boolean b74 = jsonPrimitive72.isBoolean();
    java.lang.String str75 = jsonPrimitive72.getAsString();
    boolean b76 = jsonPrimitive72.isJsonObject();
    int i77 = jsonPrimitive72.getAsInt();
    boolean b78 = jsonPrimitive72.getAsBoolean();
    jsonArray65.add((com.google.gson.JsonElement)jsonPrimitive72);
    char char80 = jsonArray65.getAsCharacter();
    com.google.gson.JsonElement jsonElement81 = null;
    jsonArray65.add(jsonElement81);
    jsonArray49.addAll(jsonArray65);
    com.google.gson.JsonArray jsonArray84 = new com.google.gson.JsonArray();
    jsonArray84.add((java.lang.Boolean)true);
    jsonArray49.addAll(jsonArray84);
    com.google.gson.JsonElement jsonElement88 = gson43.toJsonTree((java.lang.Object)jsonArray49);
    com.google.gson.JsonElement jsonElement89 = jsonArray0.set((int)(byte)0, (com.google.gson.JsonElement)jsonArray49);
    com.google.gson.JsonArray jsonArray90 = jsonArray49.getAsJsonArray();
    com.google.gson.JsonElement jsonElement92 = jsonArray49.get((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger93 = jsonArray49.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "1"+ "'", str59.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "1"+ "'", str75.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char80 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonArray90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement92);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test437"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    // The following exception was thrown during execution in test generation
    try {
    double d1 = jsonArray0.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test438"); }


    java.lang.Throwable throwable1 = null;
    com.google.gson.JsonParseException jsonParseException2 = new com.google.gson.JsonParseException("false", throwable1);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test439"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setLenient();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.serializeNulls();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test440"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    int[] i_array11 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder5.excludeFieldsWithModifiers(i_array11);
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy17 = null;
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder16.addSerializationExclusionStrategy(exclusionStrategy17);
    com.google.gson.ExclusionStrategy exclusionStrategy19 = null;
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder16.addSerializationExclusionStrategy(exclusionStrategy19);
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setLenient();
    int[] i_array25 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.excludeFieldsWithModifiers(i_array25);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder23.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy28 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.setLongSerializationPolicy(longSerializationPolicy28);
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder20.setLongSerializationPolicy(longSerializationPolicy28);
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder13.setLongSerializationPolicy(longSerializationPolicy28);
    com.google.gson.GsonBuilder gsonBuilder32 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder32.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder32.setLenient();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder32.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder32.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder38 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder38.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder38.setLenient();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder38.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder38.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder44 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder44.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder44.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy47 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder44.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy47);
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder44.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder49.enableComplexMapKeySerialization();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy51 = com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
    com.google.gson.GsonBuilder gsonBuilder52 = gsonBuilder50.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy51);
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder43.setFieldNamingPolicy(fieldNamingPolicy51);
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder37.setFieldNamingPolicy(fieldNamingPolicy51);
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder31.setFieldNamingPolicy(fieldNamingPolicy51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test441"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("com.google.gson.JsonParseException: hi!");

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test442"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    boolean b17 = jsonArray0.isJsonPrimitive();
    boolean b18 = jsonArray0.getAsBoolean();
    com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    boolean b24 = jsonArray19.equals((java.lang.Object)gsonBuilder20);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    int i31 = jsonPrimitive26.getAsInt();
    boolean b32 = jsonPrimitive26.getAsBoolean();
    jsonArray19.add((com.google.gson.JsonElement)jsonPrimitive26);
    java.math.BigInteger bigInteger34 = jsonArray19.getAsBigInteger();
    int i35 = jsonArray19.getAsInt();
    com.google.gson.JsonNull jsonNull36 = new com.google.gson.JsonNull();
    boolean b37 = jsonArray19.contains((com.google.gson.JsonElement)jsonNull36);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement38 = jsonArray19.iterator();
    java.lang.Number number39 = jsonArray19.getAsNumber();
    jsonArray0.addAll(jsonArray19);
    java.math.BigInteger bigInteger41 = jsonArray19.getAsBigInteger();
    int i42 = jsonArray19.size();
    jsonArray19.add((java.lang.Character)'h');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number39 + "' != '" + 1+ "'", number39.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test443"); }


    java.lang.Throwable throwable2 = null;
    com.google.gson.JsonParseException jsonParseException3 = new com.google.gson.JsonParseException("", throwable2);
    com.google.gson.stream.MalformedJsonException malformedJsonException4 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable)jsonParseException3);
    com.google.gson.JsonParseException jsonParseException5 = new com.google.gson.JsonParseException((java.lang.Throwable)jsonParseException3);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("true", (java.lang.Throwable)jsonParseException3);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test444"); }


    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException("com.google.gson.JsonParseException: {\"hi!\":1}");

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test445"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    byte byte4 = jsonPrimitive1.getAsByte();
    boolean b5 = jsonPrimitive1.getAsBoolean();
    short s6 = jsonPrimitive1.getAsShort();
    short s7 = jsonPrimitive1.getAsShort();
    double d8 = jsonPrimitive1.getAsDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte4 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 1.0d);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test446"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy16 = gson7.fieldNamingStrategy();
    boolean b17 = gson7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.serializeSpecialFloatingPointValues();
    com.google.gson.LongSerializationPolicy longSerializationPolicy23 = com.google.gson.LongSerializationPolicy.STRING;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder22.setLongSerializationPolicy(longSerializationPolicy23);
    com.google.gson.JsonElement jsonElement26 = longSerializationPolicy23.serialize((java.lang.Long)0L);
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls27 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException28 = gson7.fromJson(jsonElement26, cls27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test447"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder19 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder19.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLenient();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder19.excludeFieldsWithoutExposeAnnotation();
    boolean b23 = jsonArray18.equals((java.lang.Object)gsonBuilder19);
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    boolean b27 = jsonPrimitive25.isBoolean();
    java.lang.String str28 = jsonPrimitive25.getAsString();
    boolean b29 = jsonPrimitive25.isJsonObject();
    int i30 = jsonPrimitive25.getAsInt();
    boolean b31 = jsonPrimitive25.getAsBoolean();
    jsonArray18.add((com.google.gson.JsonElement)jsonPrimitive25);
    int i33 = jsonArray18.size();
    short s34 = jsonArray18.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    java.lang.Number number38 = jsonPrimitive36.getAsNumber();
    boolean b39 = jsonPrimitive36.isBoolean();
    boolean b40 = jsonArray18.remove((com.google.gson.JsonElement)jsonPrimitive36);
    com.google.gson.JsonArray jsonArray41 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder42 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder42.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder42.setLenient();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder42.excludeFieldsWithoutExposeAnnotation();
    boolean b46 = jsonArray41.equals((java.lang.Object)gsonBuilder42);
    com.google.gson.JsonPrimitive jsonPrimitive48 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b49 = jsonPrimitive48.isString();
    boolean b50 = jsonPrimitive48.isBoolean();
    java.lang.String str51 = jsonPrimitive48.getAsString();
    boolean b52 = jsonPrimitive48.isJsonObject();
    int i53 = jsonPrimitive48.getAsInt();
    boolean b54 = jsonPrimitive48.getAsBoolean();
    jsonArray41.add((com.google.gson.JsonElement)jsonPrimitive48);
    int i56 = jsonArray41.size();
    short s57 = jsonArray41.getAsShort();
    int i58 = jsonArray41.getAsInt();
    jsonArray18.addAll(jsonArray41);
    java.lang.reflect.Type type60 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement61 = gson17.toJsonTree((java.lang.Object)jsonArray41, type60);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "1"+ "'", str28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s34 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number38 + "' != '" + 1+ "'", number38.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s57 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test448"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    java.lang.Number number50 = jsonArray32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive52 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d53 = jsonPrimitive52.getAsDouble();
    boolean b54 = jsonPrimitive52.isJsonObject();
    float f55 = jsonPrimitive52.getAsFloat();
    java.math.BigInteger bigInteger56 = jsonPrimitive52.getAsBigInteger();
    com.google.gson.JsonPrimitive jsonPrimitive57 = new com.google.gson.JsonPrimitive((java.lang.Number)bigInteger56);
    jsonArray32.add((java.lang.Number)bigInteger56);
    boolean b59 = jsonArray32.isJsonNull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number50 + "' != '" + 1+ "'", number50.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d53 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f55 == 4.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test449"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    com.google.gson.JsonPrimitive jsonPrimitive2 = jsonPrimitive1.getAsJsonPrimitive();
    boolean b3 = jsonPrimitive2.isJsonNull();
    boolean b4 = jsonPrimitive2.isString();
    boolean b5 = jsonPrimitive2.isNumber();
    java.lang.String str6 = jsonPrimitive2.toString();
    boolean b7 = jsonPrimitive2.isJsonArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1"+ "'", str6.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test450"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.Gson gson2 = gsonBuilder0.create();
    com.google.gson.GsonBuilder gsonBuilder3 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder3.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder3.setLenient();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder3.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder3.setVersion((double)'#');
    com.google.gson.Gson gson9 = gsonBuilder8.create();
    com.google.gson.GsonBuilder gsonBuilder10 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder10.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setLenient();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder10.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder10.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.setDateFormat((int)'1');
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeSpecialFloatingPointValues();
    com.google.gson.JsonElement jsonElement20 = gson9.toJsonTree((java.lang.Object)gsonBuilder19);
    com.google.gson.GsonBuilder gsonBuilder21 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder21.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder21.setLenient();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy25 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.setFieldNamingPolicy(fieldNamingPolicy25);
    com.google.gson.GsonBuilder gsonBuilder27 = gsonBuilder26.excludeFieldsWithoutExposeAnnotation();
    int[] i_array28 = new int[] {  };
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder26.excludeFieldsWithModifiers(i_array28);
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder26.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setVersion((double)0.0f);
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder37 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder38 = gsonBuilder37.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder39 = gsonBuilder37.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder41 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder41.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder43 = gsonBuilder41.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy44 = null;
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder43.addSerializationExclusionStrategy(exclusionStrategy44);
    com.google.gson.ExclusionStrategy exclusionStrategy46 = null;
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder43.addSerializationExclusionStrategy(exclusionStrategy46);
    com.google.gson.Gson gson48 = gsonBuilder43.create();
    com.google.gson.JsonPrimitive jsonPrimitive50 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b51 = jsonPrimitive50.isString();
    boolean b52 = jsonPrimitive50.isBoolean();
    java.lang.String str53 = jsonPrimitive50.getAsString();
    boolean b54 = jsonPrimitive50.isJsonObject();
    java.math.BigDecimal bigDecimal55 = jsonPrimitive50.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement56 = gson48.toJsonTree((java.lang.Object)jsonPrimitive50);
    com.google.gson.internal.Excluder excluder57 = gson48.excluder();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder40.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder57);
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder33.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder57);
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder32.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder57);
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder19.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder57);
    com.google.gson.GsonBuilder gsonBuilder64 = gsonBuilder61.setDateFormat((int)(byte)10, (int)'t');
    java.lang.String str65 = gson2.toJson((java.lang.Object)(byte)10);
    java.io.Reader reader66 = null;
    java.lang.Class<int[]> cls67 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array68 = gson2.fromJson(reader66, cls67);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "1"+ "'", str53.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "10"+ "'", str65.equals("10"));

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test451"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("\"a\"");
    char char5 = jsonElement4.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == 'a');

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test452"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    boolean b34 = gson7.serializeNulls();
    com.google.gson.internal.Excluder excluder35 = gson7.excluder();
    com.google.gson.internal.Excluder excluder36 = gson7.excluder();
    com.google.gson.reflect.TypeToken<com.google.gson.FieldNamingStrategy> typetoken_fieldNamingStrategy37 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.TypeAdapter<com.google.gson.FieldNamingStrategy> typeadapter_fieldNamingStrategy38 = gson7.getAdapter(typetoken_fieldNamingStrategy37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder36);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test453"); }


    java.lang.Throwable throwable1 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException2 = new com.google.gson.stream.MalformedJsonException(throwable1);
    com.google.gson.stream.MalformedJsonException malformedJsonException3 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException2);
    java.lang.Throwable[] throwable_array4 = malformedJsonException2.getSuppressed();
    com.google.gson.JsonParseException jsonParseException5 = new com.google.gson.JsonParseException((java.lang.Throwable)malformedJsonException2);
    java.lang.String str6 = malformedJsonException2.toString();
    java.lang.String str7 = malformedJsonException2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "com.google.gson.stream.MalformedJsonException"+ "'", str6.equals("com.google.gson.stream.MalformedJsonException"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "com.google.gson.stream.MalformedJsonException"+ "'", str7.equals("com.google.gson.stream.MalformedJsonException"));

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test454"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setVersion((double)(byte)0);
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.setPrettyPrinting();
    com.google.gson.GsonBuilder gsonBuilder5 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder5.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setLenient();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.setLenient();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy9 = com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.setFieldNamingPolicy(fieldNamingPolicy9);
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.setDateFormat((-1));
    com.google.gson.GsonBuilder gsonBuilder13 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder13.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder13.setLenient();
    int[] i_array17 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.excludeFieldsWithModifiers(i_array17);
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder15.disableHtmlEscaping();
    com.google.gson.LongSerializationPolicy longSerializationPolicy20 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder19.setLongSerializationPolicy(longSerializationPolicy20);
    com.google.gson.JsonElement jsonElement23 = longSerializationPolicy20.serialize((java.lang.Long)1L);
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder12.setLongSerializationPolicy(longSerializationPolicy20);
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder2.setLongSerializationPolicy(longSerializationPolicy20);
    java.lang.Class<com.google.gson.TypeAdapterFactory> cls26 = null;
    com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.setLenient();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder28.excludeFieldsWithoutExposeAnnotation();
    boolean b32 = jsonArray27.equals((java.lang.Object)gsonBuilder28);
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    boolean b36 = jsonPrimitive34.isBoolean();
    java.lang.String str37 = jsonPrimitive34.getAsString();
    boolean b38 = jsonPrimitive34.isJsonObject();
    int i39 = jsonPrimitive34.getAsInt();
    boolean b40 = jsonPrimitive34.getAsBoolean();
    jsonArray27.add((com.google.gson.JsonElement)jsonPrimitive34);
    char char42 = jsonArray27.getAsCharacter();
    com.google.gson.JsonElement jsonElement43 = null;
    jsonArray27.add(jsonElement43);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder2.registerTypeHierarchyAdapter(cls26, (java.lang.Object)jsonArray27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char42 == '1');

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test455"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("com.google.gson.stream.MalformedJsonException");

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test456"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.setLenient();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder7.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder7.setVersion((double)'#');
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.ExclusionStrategy[] exclusionStrategy_array14 = new com.google.gson.ExclusionStrategy[] { exclusionStrategy13 };
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder7.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder6.setExclusionStrategies(exclusionStrategy_array14);
    com.google.gson.Gson gson17 = gsonBuilder6.create();
    com.google.gson.GsonBuilder gsonBuilder18 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder18.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder18.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy21 = null;
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy21);
    com.google.gson.ExclusionStrategy exclusionStrategy23 = null;
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder20.addSerializationExclusionStrategy(exclusionStrategy23);
    com.google.gson.Gson gson25 = gsonBuilder20.create();
    com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b28 = jsonPrimitive27.isString();
    java.lang.Number number29 = jsonPrimitive27.getAsNumber();
    java.math.BigDecimal bigDecimal30 = jsonPrimitive27.getAsBigDecimal();
    long long31 = jsonPrimitive27.getAsLong();
    boolean b32 = jsonPrimitive27.isNumber();
    java.lang.String str33 = gson25.toJson((com.google.gson.JsonElement)jsonPrimitive27);
    com.google.gson.JsonObject jsonObject34 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray36 = jsonObject34.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray38 = jsonObject34.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive41 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b42 = jsonPrimitive41.isString();
    java.lang.Number number43 = jsonPrimitive41.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive44 = jsonPrimitive41.getAsJsonPrimitive();
    jsonObject34.add("hi!", (com.google.gson.JsonElement)jsonPrimitive44);
    boolean b46 = jsonObject34.isJsonArray();
    com.google.gson.JsonElement jsonElement48 = jsonObject34.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive50 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d51 = jsonPrimitive50.getAsDouble();
    boolean b52 = jsonPrimitive50.isBoolean();
    boolean b53 = jsonObject34.equals((java.lang.Object)b52);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement54 = jsonObject34.entrySet();
    com.google.gson.JsonArray jsonArray56 = jsonObject34.getAsJsonArray("1");
    int i57 = jsonObject34.size();
    boolean b58 = jsonObject34.isJsonObject();
    jsonObject34.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Number)1L);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    java.lang.Number number66 = jsonPrimitive64.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive67 = jsonPrimitive64.getAsJsonPrimitive();
    boolean b68 = jsonPrimitive67.isString();
    java.math.BigDecimal bigDecimal69 = jsonPrimitive67.getAsBigDecimal();
    jsonObject34.addProperty("hi!", (java.lang.Number)bigDecimal69);
    boolean b71 = jsonPrimitive27.equals((java.lang.Object)bigDecimal69);
    java.lang.Number number72 = jsonPrimitive27.getAsNumber();
    java.lang.reflect.Type type73 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement74 = gson17.toJsonTree((java.lang.Object)number72, type73);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(exclusionStrategy_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number29 + "' != '" + 1+ "'", number29.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "1"+ "'", str33.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number43 + "' != '" + 1+ "'", number43.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d51 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number66 + "' != '" + 1+ "'", number66.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number72 + "' != '" + 1+ "'", number72.equals(1));

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test457"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.serializeNulls();
    boolean b10 = gson7.htmlSafe();
    com.google.gson.GsonBuilder gsonBuilder11 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder11.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder11.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy14 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder11.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy14);
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder11.enableComplexMapKeySerialization();
    com.google.gson.Gson gson17 = gsonBuilder11.create();
    boolean b18 = gson17.htmlSafe();
    com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder20 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder21 = gsonBuilder20.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder22 = gsonBuilder20.setLenient();
    com.google.gson.GsonBuilder gsonBuilder23 = gsonBuilder20.excludeFieldsWithoutExposeAnnotation();
    boolean b24 = jsonArray19.equals((java.lang.Object)gsonBuilder20);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b27 = jsonPrimitive26.isString();
    boolean b28 = jsonPrimitive26.isBoolean();
    java.lang.String str29 = jsonPrimitive26.getAsString();
    boolean b30 = jsonPrimitive26.isJsonObject();
    int i31 = jsonPrimitive26.getAsInt();
    boolean b32 = jsonPrimitive26.getAsBoolean();
    jsonArray19.add((com.google.gson.JsonElement)jsonPrimitive26);
    int i34 = jsonArray19.size();
    short s35 = jsonArray19.getAsShort();
    int i36 = jsonArray19.getAsInt();
    com.google.gson.JsonElement jsonElement37 = gson17.toJsonTree((java.lang.Object)jsonArray19);
    java.lang.String str38 = gson7.toJson(jsonElement37);
    com.google.gson.JsonObject jsonObject39 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray41 = jsonObject39.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray43 = jsonObject39.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive46 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b47 = jsonPrimitive46.isString();
    java.lang.Number number48 = jsonPrimitive46.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive49 = jsonPrimitive46.getAsJsonPrimitive();
    jsonObject39.add("hi!", (com.google.gson.JsonElement)jsonPrimitive49);
    boolean b51 = jsonObject39.isJsonArray();
    com.google.gson.JsonObject jsonObject52 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray54 = jsonObject52.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray56 = jsonObject52.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    java.lang.Number number61 = jsonPrimitive59.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive62 = jsonPrimitive59.getAsJsonPrimitive();
    jsonObject52.add("hi!", (com.google.gson.JsonElement)jsonPrimitive62);
    boolean b64 = jsonObject52.isJsonArray();
    com.google.gson.JsonElement jsonElement66 = jsonObject52.get("hi!");
    boolean b67 = jsonObject39.equals((java.lang.Object)jsonElement66);
    com.google.gson.JsonObject jsonObject68 = jsonObject39.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement69 = jsonObject68.entrySet();
    com.google.gson.JsonElement jsonElement71 = jsonObject68.remove("[1]");
    java.lang.reflect.Type type72 = null;
    java.lang.Appendable appendable73 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)jsonObject68, type72, appendable73);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "1"+ "'", str29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s35 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[1]"+ "'", str38.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number48 + "' != '" + 1+ "'", number48.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number61 + "' != '" + 1+ "'", number61.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonElement71);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test458"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    java.lang.Object obj11 = null;
    java.lang.reflect.Type type12 = null;
    java.lang.Appendable appendable13 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(obj11, type12, appendable13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test459"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonArray jsonArray52 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder53 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder53.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder53.setLenient();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder53.excludeFieldsWithoutExposeAnnotation();
    boolean b57 = jsonArray52.equals((java.lang.Object)gsonBuilder53);
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    boolean b61 = jsonPrimitive59.isBoolean();
    java.lang.String str62 = jsonPrimitive59.getAsString();
    boolean b63 = jsonPrimitive59.isJsonObject();
    int i64 = jsonPrimitive59.getAsInt();
    boolean b65 = jsonPrimitive59.getAsBoolean();
    jsonArray52.add((com.google.gson.JsonElement)jsonPrimitive59);
    int i67 = jsonArray52.size();
    short s68 = jsonArray52.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive70 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b71 = jsonPrimitive70.isString();
    java.lang.Number number72 = jsonPrimitive70.getAsNumber();
    boolean b73 = jsonPrimitive70.isBoolean();
    boolean b74 = jsonArray52.remove((com.google.gson.JsonElement)jsonPrimitive70);
    com.google.gson.JsonArray jsonArray75 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder76 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder77 = gsonBuilder76.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder76.setLenient();
    com.google.gson.GsonBuilder gsonBuilder79 = gsonBuilder76.excludeFieldsWithoutExposeAnnotation();
    boolean b80 = jsonArray75.equals((java.lang.Object)gsonBuilder76);
    com.google.gson.JsonPrimitive jsonPrimitive82 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b83 = jsonPrimitive82.isString();
    boolean b84 = jsonPrimitive82.isBoolean();
    java.lang.String str85 = jsonPrimitive82.getAsString();
    boolean b86 = jsonPrimitive82.isJsonObject();
    int i87 = jsonPrimitive82.getAsInt();
    boolean b88 = jsonPrimitive82.getAsBoolean();
    jsonArray75.add((com.google.gson.JsonElement)jsonPrimitive82);
    int i90 = jsonArray75.size();
    short s91 = jsonArray75.getAsShort();
    int i92 = jsonArray75.getAsInt();
    jsonArray52.addAll(jsonArray75);
    int i94 = jsonArray75.getAsInt();
    boolean b95 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray75);
    jsonArray32.add((java.lang.Boolean)false);
    // The following exception was thrown during execution in test generation
    try {
    boolean b98 = jsonArray32.getAsBoolean();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "1"+ "'", str62.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s68 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number72 + "' != '" + 1+ "'", number72.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "1"+ "'", str85.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s91 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test460"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy11 = gson7.fieldNamingStrategy();
    java.lang.Object obj12 = null;
    java.lang.String str13 = gson7.toJson(obj12);
    com.google.gson.JsonObject jsonObject14 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray16 = jsonObject14.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray18 = jsonObject14.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    java.lang.Number number23 = jsonPrimitive21.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive24 = jsonPrimitive21.getAsJsonPrimitive();
    jsonObject14.add("hi!", (com.google.gson.JsonElement)jsonPrimitive24);
    boolean b26 = jsonObject14.isJsonArray();
    com.google.gson.JsonElement jsonElement28 = jsonObject14.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d31 = jsonPrimitive30.getAsDouble();
    boolean b32 = jsonPrimitive30.isBoolean();
    boolean b33 = jsonObject14.equals((java.lang.Object)b32);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement34 = jsonObject14.entrySet();
    jsonObject14.addProperty("1", (java.lang.Character)'4');
    int i38 = jsonObject14.size();
    int i39 = jsonObject14.size();
    java.lang.Appendable appendable40 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonObject14, appendable40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null"+ "'", str13.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number23 + "' != '" + 1+ "'", number23.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test461"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    com.google.gson.JsonObject jsonObject16 = new com.google.gson.JsonObject();
    jsonObject16.addProperty("hi!", "1");
    com.google.gson.JsonArray jsonArray21 = jsonObject16.getAsJsonArray("0");
    com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder23 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder24 = gsonBuilder23.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder23.setLenient();
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder23.excludeFieldsWithoutExposeAnnotation();
    boolean b27 = jsonArray22.equals((java.lang.Object)gsonBuilder23);
    com.google.gson.JsonPrimitive jsonPrimitive29 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b30 = jsonPrimitive29.isString();
    boolean b31 = jsonPrimitive29.isBoolean();
    java.lang.String str32 = jsonPrimitive29.getAsString();
    boolean b33 = jsonPrimitive29.isJsonObject();
    int i34 = jsonPrimitive29.getAsInt();
    boolean b35 = jsonPrimitive29.getAsBoolean();
    jsonArray22.add((com.google.gson.JsonElement)jsonPrimitive29);
    java.math.BigInteger bigInteger37 = jsonArray22.getAsBigInteger();
    com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder39 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.setLenient();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder39.excludeFieldsWithoutExposeAnnotation();
    boolean b43 = jsonArray38.equals((java.lang.Object)gsonBuilder39);
    com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b46 = jsonPrimitive45.isString();
    boolean b47 = jsonPrimitive45.isBoolean();
    java.lang.String str48 = jsonPrimitive45.getAsString();
    boolean b49 = jsonPrimitive45.isJsonObject();
    int i50 = jsonPrimitive45.getAsInt();
    boolean b51 = jsonPrimitive45.getAsBoolean();
    jsonArray38.add((com.google.gson.JsonElement)jsonPrimitive45);
    char char53 = jsonArray38.getAsCharacter();
    com.google.gson.JsonArray jsonArray54 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder55 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder55.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder57 = gsonBuilder55.setLenient();
    com.google.gson.GsonBuilder gsonBuilder58 = gsonBuilder55.excludeFieldsWithoutExposeAnnotation();
    boolean b59 = jsonArray54.equals((java.lang.Object)gsonBuilder55);
    com.google.gson.JsonPrimitive jsonPrimitive61 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b62 = jsonPrimitive61.isString();
    boolean b63 = jsonPrimitive61.isBoolean();
    java.lang.String str64 = jsonPrimitive61.getAsString();
    boolean b65 = jsonPrimitive61.isJsonObject();
    int i66 = jsonPrimitive61.getAsInt();
    boolean b67 = jsonPrimitive61.getAsBoolean();
    jsonArray54.add((com.google.gson.JsonElement)jsonPrimitive61);
    jsonArray38.addAll(jsonArray54);
    double d70 = jsonArray54.getAsDouble();
    jsonArray22.addAll(jsonArray54);
    com.google.gson.GsonBuilder gsonBuilder72 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder73 = gsonBuilder72.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder74 = gsonBuilder72.setLenient();
    int[] i_array76 = new int[] { 100 };
    com.google.gson.GsonBuilder gsonBuilder77 = gsonBuilder74.excludeFieldsWithModifiers(i_array76);
    boolean b78 = jsonArray22.equals((java.lang.Object)gsonBuilder74);
    boolean b79 = jsonObject16.equals((java.lang.Object)gsonBuilder74);
    java.lang.Appendable appendable80 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((java.lang.Object)gsonBuilder74, appendable80);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "1"+ "'", str32.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "1"+ "'", str48.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char53 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "1"+ "'", str64.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d70 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test462"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    boolean b11 = jsonPrimitive9.isBoolean();
    java.lang.String str12 = jsonPrimitive9.getAsString();
    boolean b13 = jsonPrimitive9.isJsonObject();
    java.math.BigDecimal bigDecimal14 = jsonPrimitive9.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement15 = gson7.toJsonTree((java.lang.Object)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    com.google.gson.FieldNamingStrategy fieldNamingStrategy17 = gson7.fieldNamingStrategy();
    com.google.gson.stream.JsonReader jsonReader18 = null;
    java.lang.reflect.Type type19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.StackTraceElement[] stackTraceElement_array20 = gson7.fromJson(jsonReader18, type19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1"+ "'", str12.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy17);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test463"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonObject jsonObject13 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray15 = jsonObject13.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray17 = jsonObject13.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    java.lang.Number number22 = jsonPrimitive20.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive23 = jsonPrimitive20.getAsJsonPrimitive();
    jsonObject13.add("hi!", (com.google.gson.JsonElement)jsonPrimitive23);
    boolean b25 = jsonObject13.isJsonArray();
    com.google.gson.JsonElement jsonElement27 = jsonObject13.get("hi!");
    boolean b28 = jsonObject0.equals((java.lang.Object)jsonElement27);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject();
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject29.entrySet();
    int i31 = jsonObject29.size();
    jsonObject29.addProperty("1", "{\"hi!\":1}");
    java.lang.Object obj35 = null;
    boolean b36 = jsonObject29.equals(obj35);
    com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder39 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder40 = gsonBuilder39.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder41 = gsonBuilder39.setLenient();
    com.google.gson.GsonBuilder gsonBuilder42 = gsonBuilder39.excludeFieldsWithoutExposeAnnotation();
    boolean b43 = jsonArray38.equals((java.lang.Object)gsonBuilder39);
    com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b46 = jsonPrimitive45.isString();
    boolean b47 = jsonPrimitive45.isBoolean();
    java.lang.String str48 = jsonPrimitive45.getAsString();
    boolean b49 = jsonPrimitive45.isJsonObject();
    int i50 = jsonPrimitive45.getAsInt();
    boolean b51 = jsonPrimitive45.getAsBoolean();
    jsonArray38.add((com.google.gson.JsonElement)jsonPrimitive45);
    int i53 = jsonArray38.size();
    short s54 = jsonArray38.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive56 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b57 = jsonPrimitive56.isString();
    java.lang.Number number58 = jsonPrimitive56.getAsNumber();
    boolean b59 = jsonPrimitive56.isBoolean();
    boolean b60 = jsonArray38.remove((com.google.gson.JsonElement)jsonPrimitive56);
    jsonObject29.add("", (com.google.gson.JsonElement)jsonPrimitive56);
    boolean b62 = jsonPrimitive56.isJsonPrimitive();
    java.math.BigDecimal bigDecimal63 = jsonPrimitive56.getAsBigDecimal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonObject29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "1"+ "'", str48.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s54 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number58 + "' != '" + 1+ "'", number58.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test464"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder15 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder15.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder15.setLenient();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder15.excludeFieldsWithoutExposeAnnotation();
    boolean b19 = jsonArray14.equals((java.lang.Object)gsonBuilder15);
    com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b22 = jsonPrimitive21.isString();
    boolean b23 = jsonPrimitive21.isBoolean();
    java.lang.String str24 = jsonPrimitive21.getAsString();
    boolean b25 = jsonPrimitive21.isJsonObject();
    int i26 = jsonPrimitive21.getAsInt();
    boolean b27 = jsonPrimitive21.getAsBoolean();
    jsonArray14.add((com.google.gson.JsonElement)jsonPrimitive21);
    int i29 = jsonArray14.size();
    short s30 = jsonArray14.getAsShort();
    int i31 = jsonArray14.getAsInt();
    short s32 = jsonArray14.getAsShort();
    int i33 = jsonArray14.size();
    com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b36 = jsonPrimitive35.isString();
    boolean b37 = jsonPrimitive35.isBoolean();
    java.lang.String str38 = jsonPrimitive35.getAsString();
    boolean b39 = jsonPrimitive35.isJsonObject();
    double d40 = jsonPrimitive35.getAsDouble();
    double d41 = jsonPrimitive35.getAsDouble();
    jsonArray14.add((com.google.gson.JsonElement)jsonPrimitive35);
    java.lang.Class<com.google.gson.stream.MalformedJsonException> cls43 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.MalformedJsonException malformedJsonException44 = gson7.fromJson((com.google.gson.JsonElement)jsonPrimitive35, cls43);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s30 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s32 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "1"+ "'", str38.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d40 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d41 == 1.0d);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test465"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    jsonArray0.add((java.lang.Boolean)true);
    char char3 = jsonArray0.getAsCharacter();
    // The following exception was thrown during execution in test generation
    try {
    java.math.BigInteger bigInteger4 = jsonArray0.getAsBigInteger();
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char3 == 't');

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test466"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.setVersion((double)'#');
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder5.setVersion((double)1L);
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder5.setLenient();
    java.lang.reflect.Type type9 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException11 = new com.google.gson.stream.MalformedJsonException("false");
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder8.registerTypeAdapter(type9, (java.lang.Object)"false");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test467"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder52 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder53 = gsonBuilder52.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder52.setLenient();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder52.excludeFieldsWithoutExposeAnnotation();
    boolean b56 = jsonArray51.equals((java.lang.Object)gsonBuilder52);
    com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder58 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder59 = gsonBuilder58.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder60 = gsonBuilder58.setLenient();
    com.google.gson.GsonBuilder gsonBuilder61 = gsonBuilder58.excludeFieldsWithoutExposeAnnotation();
    boolean b62 = jsonArray57.equals((java.lang.Object)gsonBuilder58);
    com.google.gson.JsonPrimitive jsonPrimitive64 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b65 = jsonPrimitive64.isString();
    boolean b66 = jsonPrimitive64.isBoolean();
    java.lang.String str67 = jsonPrimitive64.getAsString();
    boolean b68 = jsonPrimitive64.isJsonObject();
    int i69 = jsonPrimitive64.getAsInt();
    boolean b70 = jsonPrimitive64.getAsBoolean();
    jsonArray57.add((com.google.gson.JsonElement)jsonPrimitive64);
    jsonArray51.addAll(jsonArray57);
    java.math.BigInteger bigInteger73 = jsonArray57.getAsBigInteger();
    boolean b74 = jsonArray57.isJsonPrimitive();
    jsonArray57.add((java.lang.Character)'#');
    boolean b77 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray57);
    float f78 = jsonArray32.getAsFloat();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement79 = jsonArray32.iterator();
    jsonArray32.add((java.lang.Character)' ');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Number number82 = jsonArray32.getAsNumber();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "1"+ "'", str67.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f78 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement79);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test468"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.GsonBuilder gsonBuilder7 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder8 = gsonBuilder7.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder7.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy10 = null;
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy10);
    com.google.gson.ExclusionStrategy exclusionStrategy12 = null;
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder9.addSerializationExclusionStrategy(exclusionStrategy12);
    com.google.gson.Gson gson14 = gsonBuilder9.create();
    boolean b15 = gson14.serializeNulls();
    boolean b16 = gson14.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    java.lang.Number number22 = jsonPrimitive18.getAsNumber();
    long long23 = jsonPrimitive18.getAsLong();
    java.lang.String str24 = gson14.toJson((java.lang.Object)jsonPrimitive18);
    com.google.gson.JsonObject jsonObject25 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray27 = jsonObject25.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray29 = jsonObject25.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b33 = jsonPrimitive32.isString();
    java.lang.Number number34 = jsonPrimitive32.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive35 = jsonPrimitive32.getAsJsonPrimitive();
    jsonObject25.add("hi!", (com.google.gson.JsonElement)jsonPrimitive35);
    boolean b37 = jsonObject25.isJsonArray();
    com.google.gson.JsonElement jsonElement39 = jsonObject25.get("hi!");
    java.lang.String str40 = gson14.toJson((com.google.gson.JsonElement)jsonObject25);
    int i41 = jsonObject25.size();
    com.google.gson.stream.JsonWriter jsonWriter42 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson6.toJson((com.google.gson.JsonElement)jsonObject25, jsonWriter42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number22 + "' != '" + 1+ "'", number22.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number34 + "' != '" + 1+ "'", number34.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "{\"hi!\":1}"+ "'", str40.equals("{\"hi!\":1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test469"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.disableHtmlEscaping();
    com.google.gson.Gson gson6 = gsonBuilder5.create();
    com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.setLenient();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder8.excludeFieldsWithoutExposeAnnotation();
    boolean b12 = jsonArray7.equals((java.lang.Object)gsonBuilder8);
    com.google.gson.JsonPrimitive jsonPrimitive14 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b15 = jsonPrimitive14.isString();
    boolean b16 = jsonPrimitive14.isBoolean();
    java.lang.String str17 = jsonPrimitive14.getAsString();
    boolean b18 = jsonPrimitive14.isJsonObject();
    int i19 = jsonPrimitive14.getAsInt();
    boolean b20 = jsonPrimitive14.getAsBoolean();
    jsonArray7.add((com.google.gson.JsonElement)jsonPrimitive14);
    int i22 = jsonArray7.size();
    int i23 = jsonArray7.getAsInt();
    boolean b24 = jsonArray7.isJsonPrimitive();
    java.lang.String str25 = jsonArray7.toString();
    char char26 = jsonArray7.getAsCharacter();
    java.lang.reflect.Type type27 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonParseException jsonParseException28 = gson6.fromJson((com.google.gson.JsonElement)jsonArray7, type27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[1]"+ "'", str25.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char26 == '1');

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test470"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.htmlSafe();
    com.google.gson.JsonNull jsonNull9 = com.google.gson.JsonNull.INSTANCE;
    java.lang.String str10 = gson7.toJson((com.google.gson.JsonElement)jsonNull9);
    com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder12 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder13 = gsonBuilder12.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder12.setLenient();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder12.excludeFieldsWithoutExposeAnnotation();
    boolean b16 = jsonArray11.equals((java.lang.Object)gsonBuilder12);
    com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b19 = jsonPrimitive18.isString();
    boolean b20 = jsonPrimitive18.isBoolean();
    java.lang.String str21 = jsonPrimitive18.getAsString();
    boolean b22 = jsonPrimitive18.isJsonObject();
    int i23 = jsonPrimitive18.getAsInt();
    boolean b24 = jsonPrimitive18.getAsBoolean();
    jsonArray11.add((com.google.gson.JsonElement)jsonPrimitive18);
    int i26 = jsonArray11.size();
    int i27 = jsonArray11.getAsInt();
    boolean b28 = jsonArray11.isJsonPrimitive();
    java.lang.reflect.Type type29 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement30 = gson7.toJsonTree((java.lang.Object)jsonArray11, type29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonNull9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "null"+ "'", str10.equals("null"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "1"+ "'", str21.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test471"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    boolean b17 = gson7.htmlSafe();
    com.google.gson.internal.Excluder excluder18 = gson7.excluder();
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d21 = jsonPrimitive20.getAsDouble();
    boolean b22 = jsonPrimitive20.isBoolean();
    boolean b23 = jsonPrimitive20.isJsonArray();
    java.math.BigInteger bigInteger24 = jsonPrimitive20.getAsBigInteger();
    com.google.gson.stream.JsonWriter jsonWriter25 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive20, jsonWriter25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger24);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test472"); }


    com.google.gson.JsonParser jsonParser0 = new com.google.gson.JsonParser();
    com.google.gson.JsonElement jsonElement2 = jsonParser0.parse("1");
    com.google.gson.JsonElement jsonElement4 = jsonParser0.parse("");
    com.google.gson.JsonElement jsonElement6 = jsonParser0.parse("com.google.gson.stream.MalformedJsonException");
    com.google.gson.stream.JsonReader jsonReader7 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement8 = jsonParser0.parse(jsonReader7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement6);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test473"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.GsonBuilder gsonBuilder4 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder4.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.serializeSpecialFloatingPointValues();
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder6.generateNonExecutableJson();
    com.google.gson.GsonBuilder gsonBuilder8 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder9 = gsonBuilder8.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder8.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy11 = null;
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder10.addSerializationExclusionStrategy(exclusionStrategy11);
    com.google.gson.ExclusionStrategy exclusionStrategy13 = null;
    com.google.gson.GsonBuilder gsonBuilder14 = gsonBuilder10.addSerializationExclusionStrategy(exclusionStrategy13);
    com.google.gson.Gson gson15 = gsonBuilder10.create();
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b18 = jsonPrimitive17.isString();
    boolean b19 = jsonPrimitive17.isBoolean();
    java.lang.String str20 = jsonPrimitive17.getAsString();
    boolean b21 = jsonPrimitive17.isJsonObject();
    java.math.BigDecimal bigDecimal22 = jsonPrimitive17.getAsBigDecimal();
    com.google.gson.JsonElement jsonElement23 = gson15.toJsonTree((java.lang.Object)jsonPrimitive17);
    com.google.gson.internal.Excluder excluder24 = gson15.excluder();
    com.google.gson.GsonBuilder gsonBuilder25 = gsonBuilder7.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder24);
    com.google.gson.GsonBuilder gsonBuilder26 = gsonBuilder0.registerTypeAdapterFactory((com.google.gson.TypeAdapterFactory)excluder24);
    com.google.gson.GsonBuilder gsonBuilder27 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder28 = gsonBuilder27.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder27.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy30 = null;
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder29.addSerializationExclusionStrategy(exclusionStrategy30);
    com.google.gson.ExclusionStrategy exclusionStrategy32 = null;
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder29.addSerializationExclusionStrategy(exclusionStrategy32);
    com.google.gson.Gson gson34 = gsonBuilder29.create();
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    java.lang.Number number38 = jsonPrimitive36.getAsNumber();
    java.math.BigDecimal bigDecimal39 = jsonPrimitive36.getAsBigDecimal();
    long long40 = jsonPrimitive36.getAsLong();
    boolean b41 = jsonPrimitive36.isNumber();
    java.lang.String str42 = gson34.toJson((com.google.gson.JsonElement)jsonPrimitive36);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy43 = gson34.fieldNamingStrategy();
    com.google.gson.GsonBuilder gsonBuilder44 = gsonBuilder26.setFieldNamingStrategy(fieldNamingStrategy43);
    java.lang.reflect.Type type45 = null;
    com.google.gson.GsonBuilder gsonBuilder46 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder46.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder48 = gsonBuilder46.setLenient();
    com.google.gson.GsonBuilder gsonBuilder49 = gsonBuilder46.excludeFieldsWithoutExposeAnnotation();
    com.google.gson.GsonBuilder gsonBuilder50 = gsonBuilder46.disableInnerClassSerialization();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.GsonBuilder gsonBuilder51 = gsonBuilder44.registerTypeAdapter(type45, (java.lang.Object)gsonBuilder46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "1"+ "'", str20.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number38 + "' != '" + 1+ "'", number38.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder50);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test474"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    int i16 = jsonArray0.getAsInt();
    int i17 = jsonArray0.getAsInt();
    int i18 = jsonArray0.getAsInt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test475"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    java.lang.String str15 = gson7.toString();
    com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b18 = jsonPrimitive17.isString();
    java.lang.String str19 = jsonPrimitive17.getAsString();
    boolean b20 = jsonPrimitive17.isJsonObject();
    int i21 = jsonPrimitive17.getAsInt();
    java.lang.Appendable appendable22 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive17, appendable22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1"+ "'", str19.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test476"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.io.Writer writer9 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonWriter jsonWriter10 = gson7.newJsonWriter(writer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test477"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    byte byte32 = jsonArray16.getAsByte();
    java.lang.String str33 = jsonArray16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte32 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[1]"+ "'", str33.equals("[1]"));

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test478"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    java.lang.String str8 = gson7.toString();
    java.lang.reflect.Type type10 = null;
    java.lang.Appendable appendable11 = gson7.fromJson("", type10);
    com.google.gson.FieldNamingStrategy fieldNamingStrategy12 = gson7.fieldNamingStrategy();
    com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder14 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder15 = gsonBuilder14.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder16 = gsonBuilder14.setLenient();
    com.google.gson.GsonBuilder gsonBuilder17 = gsonBuilder14.excludeFieldsWithoutExposeAnnotation();
    boolean b18 = jsonArray13.equals((java.lang.Object)gsonBuilder14);
    com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b21 = jsonPrimitive20.isString();
    boolean b22 = jsonPrimitive20.isBoolean();
    java.lang.String str23 = jsonPrimitive20.getAsString();
    boolean b24 = jsonPrimitive20.isJsonObject();
    int i25 = jsonPrimitive20.getAsInt();
    boolean b26 = jsonPrimitive20.getAsBoolean();
    jsonArray13.add((com.google.gson.JsonElement)jsonPrimitive20);
    int i28 = jsonArray13.size();
    com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder30 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder30.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder32 = gsonBuilder30.setLenient();
    com.google.gson.GsonBuilder gsonBuilder33 = gsonBuilder30.excludeFieldsWithoutExposeAnnotation();
    boolean b34 = jsonArray29.equals((java.lang.Object)gsonBuilder30);
    com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b37 = jsonPrimitive36.isString();
    boolean b38 = jsonPrimitive36.isBoolean();
    java.lang.String str39 = jsonPrimitive36.getAsString();
    boolean b40 = jsonPrimitive36.isJsonObject();
    int i41 = jsonPrimitive36.getAsInt();
    boolean b42 = jsonPrimitive36.getAsBoolean();
    jsonArray29.add((com.google.gson.JsonElement)jsonPrimitive36);
    char char44 = jsonArray29.getAsCharacter();
    com.google.gson.JsonElement jsonElement45 = null;
    jsonArray29.add(jsonElement45);
    jsonArray13.addAll(jsonArray29);
    com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
    jsonArray48.add((java.lang.Boolean)true);
    jsonArray13.addAll(jsonArray48);
    com.google.gson.JsonElement jsonElement52 = gson7.toJsonTree((java.lang.Object)jsonArray13);
    boolean b53 = jsonArray13.isJsonObject();
    // The following exception was thrown during execution in test generation
    try {
    float f54 = jsonArray13.getAsFloat();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(appendable11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingStrategy12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "1"+ "'", str23.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "1"+ "'", str39.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char44 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test479"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    jsonArray0.add((java.lang.Number)1.0f);
    jsonArray0.add("");
    // The following exception was thrown during execution in test generation
    try {
    double d54 = jsonArray0.getAsDouble();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test480"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    boolean b3 = jsonPrimitive1.isBoolean();
    java.lang.String str4 = jsonPrimitive1.getAsString();
    boolean b5 = jsonPrimitive1.isJsonObject();
    int i6 = jsonPrimitive1.getAsInt();
    boolean b7 = jsonPrimitive1.getAsBoolean();
    java.lang.Number number8 = jsonPrimitive1.getAsNumber();
    char char9 = jsonPrimitive1.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1"+ "'", str4.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number8 + "' != '" + 1+ "'", number8.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char9 == '1');

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test481"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    java.math.BigDecimal bigDecimal4 = jsonPrimitive1.getAsBigDecimal();
    com.google.gson.JsonPrimitive jsonPrimitive5 = new com.google.gson.JsonPrimitive((java.lang.Number)bigDecimal4);
    boolean b6 = jsonPrimitive5.isJsonObject();
    java.math.BigDecimal bigDecimal7 = jsonPrimitive5.getAsBigDecimal();
    byte byte8 = jsonPrimitive5.getAsByte();
    long long9 = jsonPrimitive5.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte8 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1L);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test482"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive4 = jsonPrimitive1.getAsJsonPrimitive();
    byte byte5 = jsonPrimitive1.getAsByte();
    float f6 = jsonPrimitive1.getAsFloat();
    int i7 = jsonPrimitive1.getAsInt();
    com.google.gson.JsonObject jsonObject8 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray10 = jsonObject8.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray12 = jsonObject8.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    java.lang.Number number17 = jsonPrimitive15.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive18 = jsonPrimitive15.getAsJsonPrimitive();
    jsonObject8.add("hi!", (com.google.gson.JsonElement)jsonPrimitive18);
    jsonObject8.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject8.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive27 = jsonObject8.getAsJsonPrimitive("1");
    boolean b29 = jsonObject8.has("com.google.gson.stream.MalformedJsonException: hi!");
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement30 = jsonObject8.entrySet();
    boolean b31 = jsonPrimitive1.equals((java.lang.Object)jsonObject8);
    // The following exception was thrown during execution in test generation
    try {
    long long32 = jsonObject8.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte5 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f6 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number17 + "' != '" + 1+ "'", number17.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test483"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.JsonPrimitive jsonPrimitive9 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b10 = jsonPrimitive9.isString();
    java.lang.Number number11 = jsonPrimitive9.getAsNumber();
    java.math.BigDecimal bigDecimal12 = jsonPrimitive9.getAsBigDecimal();
    long long13 = jsonPrimitive9.getAsLong();
    boolean b14 = jsonPrimitive9.isNumber();
    java.lang.String str15 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive9);
    boolean b16 = gson7.htmlSafe();
    boolean b17 = gson7.htmlSafe();
    com.google.gson.internal.Excluder excluder18 = gson7.excluder();
    java.lang.Object obj19 = null;
    java.lang.reflect.Type type20 = null;
    com.google.gson.stream.JsonWriter jsonWriter21 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson(obj19, type20, jsonWriter21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number11 + "' != '" + 1+ "'", number11.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1"+ "'", str15.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(excluder18);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test484"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    jsonObject0.addProperty("1", (java.lang.Character)'4');
    int i24 = jsonObject0.size();
    // The following exception was thrown during execution in test generation
    try {
    long long25 = jsonObject0.getAsLong();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 2);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test485"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    int i15 = jsonArray0.size();
    short s16 = jsonArray0.getAsShort();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonElement jsonElement18 = jsonArray0.remove((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)1);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test486"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)true);
    jsonObject0.addProperty("hi!", (java.lang.Boolean)false);
    com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject0.getAsJsonPrimitive("1");
    boolean b21 = jsonObject0.has("com.google.gson.stream.MalformedJsonException: hi!");
    com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    java.math.BigDecimal bigDecimal25 = jsonPrimitive24.getAsBigDecimal();
    jsonObject0.addProperty("10", (java.lang.Number)bigDecimal25);
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonPrimitive jsonPrimitive27 = jsonObject0.getAsJsonPrimitive();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonPrimitive19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test487"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    com.google.gson.LongSerializationPolicy longSerializationPolicy8 = com.google.gson.LongSerializationPolicy.DEFAULT;
    com.google.gson.JsonElement jsonElement10 = longSerializationPolicy8.serialize((java.lang.Long)0L);
    double d11 = jsonElement10.getAsDouble();
    java.lang.String str12 = gson7.toJson(jsonElement10);
    java.lang.String str13 = gson7.toString();
    boolean b14 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b17 = jsonPrimitive16.isString();
    boolean b18 = jsonPrimitive16.isBoolean();
    java.lang.String str19 = jsonPrimitive16.getAsString();
    boolean b20 = jsonPrimitive16.isJsonObject();
    int i21 = jsonPrimitive16.getAsInt();
    char char22 = jsonPrimitive16.getAsCharacter();
    byte byte23 = jsonPrimitive16.getAsByte();
    java.lang.String str24 = gson7.toJson((com.google.gson.JsonElement)jsonPrimitive16);
    com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d27 = jsonPrimitive26.getAsDouble();
    boolean b28 = jsonPrimitive26.isJsonObject();
    float f29 = jsonPrimitive26.getAsFloat();
    java.lang.Appendable appendable30 = null;
    // The following exception was thrown during execution in test generation
    try {
    gson7.toJson((com.google.gson.JsonElement)jsonPrimitive26, appendable30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(longSerializationPolicy8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0"+ "'", str12.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1"+ "'", str19.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char22 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(byte23 == (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1"+ "'", str24.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d27 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f29 == 4.0f);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test488"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.ExclusionStrategy exclusionStrategy5 = null;
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy5);
    com.google.gson.Gson gson7 = gsonBuilder2.create();
    boolean b8 = gson7.serializeNulls();
    boolean b9 = gson7.htmlSafe();
    com.google.gson.JsonPrimitive jsonPrimitive11 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b12 = jsonPrimitive11.isString();
    boolean b13 = jsonPrimitive11.isBoolean();
    java.lang.String str14 = jsonPrimitive11.getAsString();
    java.lang.Number number15 = jsonPrimitive11.getAsNumber();
    long long16 = jsonPrimitive11.getAsLong();
    java.lang.String str17 = gson7.toJson((java.lang.Object)jsonPrimitive11);
    com.google.gson.JsonObject jsonObject18 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray20 = jsonObject18.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray22 = jsonObject18.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b26 = jsonPrimitive25.isString();
    java.lang.Number number27 = jsonPrimitive25.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive28 = jsonPrimitive25.getAsJsonPrimitive();
    jsonObject18.add("hi!", (com.google.gson.JsonElement)jsonPrimitive28);
    boolean b30 = jsonObject18.isJsonArray();
    com.google.gson.JsonElement jsonElement32 = jsonObject18.get("hi!");
    java.lang.String str33 = gson7.toJson((com.google.gson.JsonElement)jsonObject18);
    java.io.Reader reader34 = null;
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.stream.JsonReader jsonReader35 = gson7.newJsonReader(reader34);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1"+ "'", str14.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number15 + "' != '" + 1+ "'", number15.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1"+ "'", str17.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number27 + "' != '" + 1+ "'", number27.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{\"hi!\":1}"+ "'", str33.equals("{\"hi!\":1}"));

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test489"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.Number number3 = jsonPrimitive1.getAsNumber();
    boolean b4 = jsonPrimitive1.isBoolean();
    long long5 = jsonPrimitive1.getAsLong();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number3 + "' != '" + 1+ "'", number3.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1L);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test490"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("1");
    short s2 = jsonPrimitive1.getAsShort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s2 == (short)1);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test491"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    jsonArray0.addAll(jsonArray16);
    boolean b32 = jsonArray16.isJsonArray();
    com.google.gson.JsonArray jsonArray33 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder34 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder34.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder34.setLenient();
    com.google.gson.GsonBuilder gsonBuilder37 = gsonBuilder34.excludeFieldsWithoutExposeAnnotation();
    boolean b38 = jsonArray33.equals((java.lang.Object)gsonBuilder34);
    com.google.gson.JsonPrimitive jsonPrimitive40 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b41 = jsonPrimitive40.isString();
    boolean b42 = jsonPrimitive40.isBoolean();
    java.lang.String str43 = jsonPrimitive40.getAsString();
    boolean b44 = jsonPrimitive40.isJsonObject();
    int i45 = jsonPrimitive40.getAsInt();
    boolean b46 = jsonPrimitive40.getAsBoolean();
    jsonArray33.add((com.google.gson.JsonElement)jsonPrimitive40);
    java.math.BigInteger bigInteger48 = jsonArray33.getAsBigInteger();
    int i49 = jsonArray33.getAsInt();
    com.google.gson.JsonNull jsonNull50 = new com.google.gson.JsonNull();
    boolean b51 = jsonArray33.contains((com.google.gson.JsonElement)jsonNull50);
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement52 = jsonArray33.iterator();
    java.lang.Number number53 = jsonArray33.getAsNumber();
    jsonArray16.addAll(jsonArray33);
    char char55 = jsonArray33.getAsCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "1"+ "'", str43.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number53 + "' != '" + 1+ "'", number53.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char55 == '1');

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test492"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("com.google.gson.stream.MalformedJsonException: hi!");
    java.lang.String str2 = jsonPrimitive1.getAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "com.google.gson.stream.MalformedJsonException: hi!"+ "'", str2.equals("com.google.gson.stream.MalformedJsonException: hi!"));

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test493"); }


    com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
    com.google.gson.JsonArray jsonArray2 = jsonObject0.getAsJsonArray("1");
    com.google.gson.JsonArray jsonArray4 = jsonObject0.getAsJsonArray("");
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    java.lang.Number number9 = jsonPrimitive7.getAsNumber();
    com.google.gson.JsonPrimitive jsonPrimitive10 = jsonPrimitive7.getAsJsonPrimitive();
    jsonObject0.add("hi!", (com.google.gson.JsonElement)jsonPrimitive10);
    boolean b12 = jsonObject0.isJsonArray();
    com.google.gson.JsonElement jsonElement14 = jsonObject0.get("hi!");
    com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive((java.lang.Character)'4');
    double d17 = jsonPrimitive16.getAsDouble();
    boolean b18 = jsonPrimitive16.isBoolean();
    boolean b19 = jsonObject0.equals((java.lang.Object)b18);
    java.util.Set<java.util.Map.Entry<java.lang.String,com.google.gson.JsonElement>> set_entry_str_jsonElement20 = jsonObject0.entrySet();
    com.google.gson.JsonArray jsonArray22 = jsonObject0.getAsJsonArray("1");
    int i23 = jsonObject0.size();
    boolean b24 = jsonObject0.isJsonObject();
    jsonObject0.addProperty("com.google.gson.stream.MalformedJsonException: 0", (java.lang.Number)1L);
    com.google.gson.JsonObject jsonObject29 = jsonObject0.getAsJsonObject("com.google.gson.stream.MalformedJsonException: hi!");
    jsonObject0.addProperty("null", "");
    // The following exception was thrown during execution in test generation
    try {
    short s33 = jsonObject0.getAsShort();
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number9 + "' != '" + 1+ "'", number9.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonPrimitive10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_entry_str_jsonElement20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonArray22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(jsonObject29);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test494"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.ExclusionStrategy exclusionStrategy3 = null;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.addSerializationExclusionStrategy(exclusionStrategy3);
    com.google.gson.GsonBuilder gsonBuilder7 = gsonBuilder2.setDateFormat((int)'h', (int)'h');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder7);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test495"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    char char15 = jsonArray0.getAsCharacter();
    com.google.gson.JsonElement jsonElement16 = null;
    jsonArray0.add(jsonElement16);
    int i18 = jsonArray0.size();
    java.util.Iterator<com.google.gson.JsonElement> iterator_jsonElement19 = jsonArray0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char15 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_jsonElement19);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test496"); }


    com.google.gson.JsonParseException jsonParseException1 = new com.google.gson.JsonParseException("{\"hi!\":1,\"{\\\"hi!\\\":1}\":\"1\"}");
    java.lang.Throwable throwable4 = null;
    com.google.gson.stream.MalformedJsonException malformedJsonException5 = new com.google.gson.stream.MalformedJsonException(throwable4);
    com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable)malformedJsonException5);
    com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable)malformedJsonException5);
    jsonParseException1.addSuppressed((java.lang.Throwable)malformedJsonException7);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test497"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.serializeNulls();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.serializeSpecialFloatingPointValues();
    com.google.gson.FieldNamingPolicy fieldNamingPolicy3 = com.google.gson.FieldNamingPolicy.IDENTITY;
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder0.setFieldNamingStrategy((com.google.gson.FieldNamingStrategy)fieldNamingPolicy3);
    com.google.gson.GsonBuilder gsonBuilder5 = gsonBuilder0.enableComplexMapKeySerialization();
    com.google.gson.Gson gson6 = gsonBuilder0.create();
    boolean b7 = gson6.htmlSafe();
    com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder9 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder10 = gsonBuilder9.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder11 = gsonBuilder9.setLenient();
    com.google.gson.GsonBuilder gsonBuilder12 = gsonBuilder9.excludeFieldsWithoutExposeAnnotation();
    boolean b13 = jsonArray8.equals((java.lang.Object)gsonBuilder9);
    com.google.gson.JsonPrimitive jsonPrimitive15 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b16 = jsonPrimitive15.isString();
    boolean b17 = jsonPrimitive15.isBoolean();
    java.lang.String str18 = jsonPrimitive15.getAsString();
    boolean b19 = jsonPrimitive15.isJsonObject();
    int i20 = jsonPrimitive15.getAsInt();
    boolean b21 = jsonPrimitive15.getAsBoolean();
    jsonArray8.add((com.google.gson.JsonElement)jsonPrimitive15);
    int i23 = jsonArray8.size();
    short s24 = jsonArray8.getAsShort();
    int i25 = jsonArray8.getAsInt();
    com.google.gson.JsonElement jsonElement26 = gson6.toJsonTree((java.lang.Object)jsonArray8);
    com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder28 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder29 = gsonBuilder28.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder30 = gsonBuilder28.setLenient();
    com.google.gson.GsonBuilder gsonBuilder31 = gsonBuilder28.excludeFieldsWithoutExposeAnnotation();
    boolean b32 = jsonArray27.equals((java.lang.Object)gsonBuilder28);
    com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b35 = jsonPrimitive34.isString();
    boolean b36 = jsonPrimitive34.isBoolean();
    java.lang.String str37 = jsonPrimitive34.getAsString();
    boolean b38 = jsonPrimitive34.isJsonObject();
    int i39 = jsonPrimitive34.getAsInt();
    boolean b40 = jsonPrimitive34.getAsBoolean();
    jsonArray27.add((com.google.gson.JsonElement)jsonPrimitive34);
    int i42 = jsonArray27.size();
    com.google.gson.JsonArray jsonArray43 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder44 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder45 = gsonBuilder44.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder46 = gsonBuilder44.setLenient();
    com.google.gson.GsonBuilder gsonBuilder47 = gsonBuilder44.excludeFieldsWithoutExposeAnnotation();
    boolean b48 = jsonArray43.equals((java.lang.Object)gsonBuilder44);
    com.google.gson.JsonPrimitive jsonPrimitive50 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b51 = jsonPrimitive50.isString();
    boolean b52 = jsonPrimitive50.isBoolean();
    java.lang.String str53 = jsonPrimitive50.getAsString();
    boolean b54 = jsonPrimitive50.isJsonObject();
    int i55 = jsonPrimitive50.getAsInt();
    boolean b56 = jsonPrimitive50.getAsBoolean();
    jsonArray43.add((com.google.gson.JsonElement)jsonPrimitive50);
    char char58 = jsonArray43.getAsCharacter();
    com.google.gson.JsonElement jsonElement59 = null;
    jsonArray43.add(jsonElement59);
    jsonArray27.addAll(jsonArray43);
    com.google.gson.JsonPrimitive jsonPrimitive63 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b64 = jsonPrimitive63.isString();
    boolean b65 = jsonPrimitive63.isJsonArray();
    boolean b66 = jsonArray43.remove((com.google.gson.JsonElement)jsonPrimitive63);
    java.lang.reflect.Type type67 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str68 = gson6.toJson((java.lang.Object)b66, type67);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fieldNamingPolicy3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1"+ "'", str18.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s24 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonElement26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "1"+ "'", str53.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char58 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test498"); }


    com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder1 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder1.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder1.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder1.excludeFieldsWithoutExposeAnnotation();
    boolean b5 = jsonArray0.equals((java.lang.Object)gsonBuilder1);
    com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b8 = jsonPrimitive7.isString();
    boolean b9 = jsonPrimitive7.isBoolean();
    java.lang.String str10 = jsonPrimitive7.getAsString();
    boolean b11 = jsonPrimitive7.isJsonObject();
    int i12 = jsonPrimitive7.getAsInt();
    boolean b13 = jsonPrimitive7.getAsBoolean();
    jsonArray0.add((com.google.gson.JsonElement)jsonPrimitive7);
    java.math.BigInteger bigInteger15 = jsonArray0.getAsBigInteger();
    com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder17 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder18 = gsonBuilder17.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder19 = gsonBuilder17.setLenient();
    com.google.gson.GsonBuilder gsonBuilder20 = gsonBuilder17.excludeFieldsWithoutExposeAnnotation();
    boolean b21 = jsonArray16.equals((java.lang.Object)gsonBuilder17);
    com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b24 = jsonPrimitive23.isString();
    boolean b25 = jsonPrimitive23.isBoolean();
    java.lang.String str26 = jsonPrimitive23.getAsString();
    boolean b27 = jsonPrimitive23.isJsonObject();
    int i28 = jsonPrimitive23.getAsInt();
    boolean b29 = jsonPrimitive23.getAsBoolean();
    jsonArray16.add((com.google.gson.JsonElement)jsonPrimitive23);
    char char31 = jsonArray16.getAsCharacter();
    com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder33 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder34 = gsonBuilder33.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder35 = gsonBuilder33.setLenient();
    com.google.gson.GsonBuilder gsonBuilder36 = gsonBuilder33.excludeFieldsWithoutExposeAnnotation();
    boolean b37 = jsonArray32.equals((java.lang.Object)gsonBuilder33);
    com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b40 = jsonPrimitive39.isString();
    boolean b41 = jsonPrimitive39.isBoolean();
    java.lang.String str42 = jsonPrimitive39.getAsString();
    boolean b43 = jsonPrimitive39.isJsonObject();
    int i44 = jsonPrimitive39.getAsInt();
    boolean b45 = jsonPrimitive39.getAsBoolean();
    jsonArray32.add((com.google.gson.JsonElement)jsonPrimitive39);
    jsonArray16.addAll(jsonArray32);
    double d48 = jsonArray32.getAsDouble();
    jsonArray0.addAll(jsonArray32);
    short s50 = jsonArray32.getAsShort();
    java.lang.String str51 = jsonArray32.getAsString();
    com.google.gson.JsonArray jsonArray52 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder53 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder54 = gsonBuilder53.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder55 = gsonBuilder53.setLenient();
    com.google.gson.GsonBuilder gsonBuilder56 = gsonBuilder53.excludeFieldsWithoutExposeAnnotation();
    boolean b57 = jsonArray52.equals((java.lang.Object)gsonBuilder53);
    com.google.gson.JsonPrimitive jsonPrimitive59 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b60 = jsonPrimitive59.isString();
    boolean b61 = jsonPrimitive59.isBoolean();
    java.lang.String str62 = jsonPrimitive59.getAsString();
    boolean b63 = jsonPrimitive59.isJsonObject();
    int i64 = jsonPrimitive59.getAsInt();
    boolean b65 = jsonPrimitive59.getAsBoolean();
    jsonArray52.add((com.google.gson.JsonElement)jsonPrimitive59);
    int i67 = jsonArray52.size();
    short s68 = jsonArray52.getAsShort();
    com.google.gson.JsonPrimitive jsonPrimitive70 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b71 = jsonPrimitive70.isString();
    java.lang.Number number72 = jsonPrimitive70.getAsNumber();
    boolean b73 = jsonPrimitive70.isBoolean();
    boolean b74 = jsonArray52.remove((com.google.gson.JsonElement)jsonPrimitive70);
    com.google.gson.JsonArray jsonArray75 = new com.google.gson.JsonArray();
    com.google.gson.GsonBuilder gsonBuilder76 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder77 = gsonBuilder76.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder78 = gsonBuilder76.setLenient();
    com.google.gson.GsonBuilder gsonBuilder79 = gsonBuilder76.excludeFieldsWithoutExposeAnnotation();
    boolean b80 = jsonArray75.equals((java.lang.Object)gsonBuilder76);
    com.google.gson.JsonPrimitive jsonPrimitive82 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b83 = jsonPrimitive82.isString();
    boolean b84 = jsonPrimitive82.isBoolean();
    java.lang.String str85 = jsonPrimitive82.getAsString();
    boolean b86 = jsonPrimitive82.isJsonObject();
    int i87 = jsonPrimitive82.getAsInt();
    boolean b88 = jsonPrimitive82.getAsBoolean();
    jsonArray75.add((com.google.gson.JsonElement)jsonPrimitive82);
    int i90 = jsonArray75.size();
    short s91 = jsonArray75.getAsShort();
    int i92 = jsonArray75.getAsInt();
    jsonArray52.addAll(jsonArray75);
    int i94 = jsonArray75.getAsInt();
    boolean b95 = jsonArray32.contains((com.google.gson.JsonElement)jsonArray75);
    java.lang.Number number96 = jsonArray32.getAsNumber();
    jsonArray32.add((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1"+ "'", str10.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "1"+ "'", str26.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char31 == '1');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s50 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "1"+ "'", str51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "1"+ "'", str62.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s68 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number72 + "' != '" + 1+ "'", number72.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "1"+ "'", str85.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s91 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number96 + "' != '" + 1+ "'", number96.equals(1));

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test499"); }


    com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Number)1);
    boolean b2 = jsonPrimitive1.isString();
    java.lang.String str3 = jsonPrimitive1.getAsString();
    float f4 = jsonPrimitive1.getAsFloat();
    java.math.BigInteger bigInteger5 = jsonPrimitive1.getAsBigInteger();
    // The following exception was thrown during execution in test generation
    try {
    com.google.gson.JsonArray jsonArray6 = jsonPrimitive1.getAsJsonArray();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1"+ "'", str3.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(f4 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigInteger5);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test500"); }


    com.google.gson.GsonBuilder gsonBuilder0 = new com.google.gson.GsonBuilder();
    com.google.gson.GsonBuilder gsonBuilder1 = gsonBuilder0.disableInnerClassSerialization();
    com.google.gson.GsonBuilder gsonBuilder2 = gsonBuilder0.setLenient();
    com.google.gson.GsonBuilder gsonBuilder3 = gsonBuilder2.setLenient();
    com.google.gson.GsonBuilder gsonBuilder4 = gsonBuilder2.disableHtmlEscaping();
    com.google.gson.GsonBuilder gsonBuilder6 = gsonBuilder4.setDateFormat("4");
    com.google.gson.Gson gson7 = gsonBuilder6.create();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gsonBuilder6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gson7);

  }

}
